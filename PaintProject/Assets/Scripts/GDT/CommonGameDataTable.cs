// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GDT
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

/// Defined by Enum.xlsx
public enum EquipSlot : byte
{
  ES_None = 0,
  ES_Head = 1,
  ES_TopAccessori = 2,
  ES_BottomAccessori = 3,
  ES_TopBody = 4,
  ES_Bareback = 5,
  ES_BottomBody = 6,
  ES_Hand = 7,
  ES_Shoes = 8,
  ES_Pet = 9,
  ES_Vehicle = 10,
  ES_Costume = 11,
  ES_Device = 12,
};

/// Defined by Enum.xlsx
public enum CurrencyMainType : byte
{
  CMT_None = 0,
  CMT_Gold = 1,
  CMT_Item = 2,
  CMT_Ticket = 3,
  CMT_Storage = 4,
  CMT_GamePoint = 5,
  CMT_Coin = 6,
};

/// Defined by Enum.xlsx
public enum CurrencySubType : byte
{
  CST_None = 0,
  CST_GoldMain = 1,
  CST_ItemBagSize = 2,
  CST_Warehouse = 3,
  CST_CharacterSlot = 4,
  CST_FriendPoint = 5,
  CST_PlatformTicket = 6,
  CST_PlatformTicketSingle = 7,
  CST_PETSlot = 8,
  CST_GameCoin_FREE = 9,
  CST_GameCoin_PAY = 10,
  CST_NftBagSize = 11,
  CST_Awm = 101,
  CST_Klay = 102,
};

/// Defined by Enum.xlsx
public enum ChargedType : byte
{
  CT_None = 0,
  CT_Reset = 1,
  CT_Charge = 2,
};

/// Defined by Enum.xlsx
public enum CharacterType : byte
{
  CT_None = 0,
  CT_Man = 1,
  CT_Woman = 2,
  CT_NPC = 3,
  CT_Pet = 4,
  CT_Object = 5,
  CT_NemoCat = 6,
};

/// Defined by Enum.xlsx
public enum CalculationType : byte
{
  none = 0,
  MOVE_Add = 15,
  MOVE_Ratio = 16,
  SE_KnockBack = 42,
  SE_Invincibility = 43,
  SE_Target_Pull_Back = 44,
  SE_Target_Pull_Front = 45,
  SE_Target_Move = 46,
  SE_CameraEffect_Light = 47,
  SE_CameraEffect_Fog = 48,
  SE_Stun = 49,
  SE_RespawnStun = 50,
  SE_Clear = 51,
};

/// Defined by Enum.xlsx
public enum RewardGetType : byte
{
  RGT_None = 0,
  RGT_Quest = 1,
  RGT_Buy = 2,
  RGT_Basic = 3,
};

/// Defined by Enum.xlsx
public enum RewardType : byte
{
  RT_None = 0,
  RT_RateOne = 1,
  RT_All = 2,
  RT_Select = 3,
  RT_CharacterType_All = 4,
};

/// Defined by Enum.xlsx
public enum CashShopMainType : byte
{
  CSMT_None = 0,
  CSMT_Limited = 1,
  CSMT_Regular = 2,
  CSMT_Recommend = 3,
  CSMT_Exchange = 4,
  CSMT_NFT = 5,
};

/// Defined by Enum.xlsx
public enum PurchaseCycleType : byte
{
  PCT_None = 0,
  PCT_Account = 1,
  PCT_AccountDaily = 2,
  PCT_AccountWeek = 3,
  PCT_AccountMonthly = 4,
  PCT_Character = 5,
  PCT_CharacterDaily = 6,
  PCT_CharacterWeek = 7,
  PCT_CharacterMonthly = 8,
};

/// Defined by Enum.xlsx
public enum ProductExposureType : byte
{
  PET_None = 0,
  PET_SingleLarge = 1,
  PET_SingleMiddle = 2,
  PET_SingleSmall = 3,
  PET_ContinuousLarge = 4,
  PET_ContinuousMiddle = 5,
  PET_ContinuousSmall = 6,
  PET_Banner = 7,
};

/// Defined by Enum.xlsx
public enum SaleTagType : byte
{
  STT_None = 0,
  STT_Hot = 1,
  STT_Efficiency = 2,
  STT_Recommend = 3,
};

/// Defined by Enum.xlsx
public enum ApplicationType : byte
{
  AT_Account = 0,
  AT_Character = 1,
  AT_Object = 2,
};

/// Defined by Enum.xlsx
public enum MovingPurchasesType : byte
{
  MPT_None = 0,
  MPT_Mail = 1,
  MPT_OpenImmediately = 2,
  MPT_BagInventory = 3,
};

/// Defined by Enum.xlsx
public enum ContentDisplayType : byte
{
  CDT_None = 0,
  CDT_Hud = 1,
  CDT_Menu = 2,
  CDT_NPC = 3,
};

/// Defined by Enum.xlsx
public enum ContentMainType : byte
{
  CT_None = 0,
  CT_Default = 1,
  CT_Character = 2,
  CT_Shop = 3,
  CT_BagInventory = 4,
  CT_MAP = 5,
  CT_CharacterItemSlot = 6,
  CT_Exit = 7,
  CT_Warehouse = 8,
  CT_Mail = 9,
  CT_Friend = 10,
  CT_CharacterAction = 11,
  CT_ItemGrowth = 12,
  CT_InGameShop = 13,
  CT_PlatformGame = 14,
  CT_Lobby = 15,
  CT_Tier = 16,
  CT_CharacterInfo = 17,
  CT_CashShop = 18,
  CT_LeaderBoard = 19,
  CT_SkillSetting = 20,
  CT_Wallet = 21,
  CT_Setting = 22,
  CT_Emotion = 23,
  CT_PlatformGameMulti = 24,
  CT_PlatformGameSingle = 25,
  CT_PlatformGameSkill = 26,
  CT_Swap = 27,
  CT_EntertainContent = 28,
  CT_Holdem = 29,
  CT_Quest = 30,
  CT_Mission = 31,
  CT_FutureHunter = 32,
  CT_Iceberg = 33,
  CT_NFTBagInventory = 34,
};

/// Defined by Enum.xlsx
public enum OpenConditionType : byte
{
  OCT_None = 0,
  OCT_Level = 1,
  OCT_Quest = 2,
};

/// Defined by Enum.xlsx
public enum MailType : byte
{
  MT_None = 0,
  MT_Normal = 1,
  MT_System = 2,
};

/// Defined by Enum.xlsx
public enum MailSubType : byte
{
  MST_None = 0,
  MST_Quest = 1,
  MST_Bm = 2,
};

/// Defined by Enum.xlsx
public enum KeepType : byte
{
  KT_None = 0,
  KT_NotKeep = 1,
  KT_Keep = 2,
};

/// Defined by Enum.xlsx
public enum DayType : byte
{
  DT_None = 0,
  DT_Mon = 1,
  DT_Tue = 2,
  DT_Wed = 3,
  DT_Thu = 4,
  DT_Fir = 5,
  DT_Sat = 6,
  DT_Sun = 7,
  DT_ALL = 8,
};

/// Defined by Enum.xlsx
public enum ContentsResetType : byte
{
  CRT_None = 0,
  CRT_Day = 1,
  CRT_Week = 2,
  CRT_Month = 3,
  CRT_Infinity = 4,
};

/// Defined by Enum.xlsx
public enum NpcType : byte
{
  NT_None = 0,
  NT_NPC = 1,
  NT_Nemo = 2,
  NT_Ai810701 = 3,
  NT_BunnyGirl = 4,
  NT_Ai810701_Old = 5,
  NT_ContentManager = 6,
};

/// Defined by Enum.xlsx
public enum CameraMainType : byte
{
  CMT_None = 0,
  CMT_BaseInGame = 1,
  CMT_PlatformGame = 2,
  CMT_Housing = 3,
  CMT_Iceberg = 4,
  CMT_AnotherCity = 5,
  CMT_Iceberg_HeadsAndTails = 6,
  CMT_Iceberg_DrawCard = 7,
  CMT_Iceberg_Bingo = 8,
  CMT_Holdem = 9,
  CMT_FutureHunter = 10,
};

/// Defined by Enum.xlsx
public enum CameraSubType : byte
{
  CST_Free = 0,
  CST_Single = 1,
  CST_Normal = 2,
  CST_Quarter = 3,
  CST_Top = 4,
  CST_CharacterInfo = 5,
  CST_Uphill = 6,
  CST_Downhill = 7,
  CST_Respawn = 8,
  CST_GameWatch = 9,
  CST_QuestMove = 10,
};

/// Defined by Enum.xlsx
public enum InteractionInvocationType : byte
{
  IIT_None = 0,
  IIT_Control = 1,
};

/// Defined by Enum.xlsx
public enum MapType : byte
{
  MT_None = 0,
  MT_Field = 1,
  MT_Stage = 3,
  MT_EntertainContent = 4,
};

/// Defined by Enum.xlsx
public enum GatheringObjectMainType : byte
{
  GOMT_None = 0,
  GOMT_Mining = 1,
  GOMT_Gathering = 2,
  GOMT_Collecting = 3,
};

/// Defined by Enum.xlsx
public enum GatheringObjectSubType : byte
{
  GOST_None = 0,
  GOST_Ore = 1,
  GOST_Reptile = 2,
  GOST_ScrapMetal = 3,
};

/// Defined by Enum.xlsx
public enum GatheringLevelType : byte
{
  GLT_None = 0,
  GLT_Mining = 1,
  GLT_Gathering = 2,
  GLT_Collecting = 3,
};

/// Defined by Enum.xlsx
public enum TierType : byte
{
  TT_None = 0,
  TT_AWM = 1,
};

/// Defined by Enum.xlsx
public enum PlatformGameType : byte
{
  PGT_Multi = 0,
  PGT_Single = 1,
};

/// Defined by Enum.xlsx
public enum ObjectType : byte
{
  OT_None = 0,
  OT_Move = 1,
  OT_GetItem = 2,
  OT_GetScore = 3,
};

/// Defined by Enum.xlsx
public enum TriggerFuntionType : byte
{
  TFT_None = 0,
  TFT_ObjectCreate = 1,
  TFT_Animation = 2,
  TFT_ReSpawn = 3,
  TFT_SkillEffect = 4,
  TFT_Track = 5,
  TFT_Door = 6,
};

/// Defined by Enum.xlsx
public enum AudioSourceType : byte
{
  AST_Bgm = 0,
  AST_Sfx = 1,
  AST_Ambient = 2,
};

/// Defined by Enum.xlsx
public enum AudioSourcePositionType : byte
{
  ASPT_Local = 0,
  ASPT_DontDestroy = 1,
};

/// Defined by Enum.xlsx
public enum AudioSourceEventType : byte
{
  ASET_Open = 0,
  ASET_Close = 1,
  ASET_TriggerEnter = 2,
};

/// Defined by Enum.xlsx
public enum MaterialType : byte
{
  MT_Default = 0,
  MT_Water = 1,
};

/// Defined by Enum.xlsx
public enum EffectOutputLocationType : byte
{
  EOLT_None = 0,
  EOLT_HeadUp = 1,
  EOLT_Body = 2,
  EOLT_RightHand = 3,
  EOLT_LeftHand = 4,
  EOLT_Foot = 5,
};

/// Defined by Enum.xlsx
public enum EffectOutputType : byte
{
  EOT_Player = 0,
  EOT_FirstLocation = 1,
};

/// Defined by Enum.xlsx
public enum EquipType : byte
{
  ET_None = 0,
  ET_Change = 1,
  ET_Duplicate = 2,
};

/// Defined by Enum.xlsx
public enum LoadingMainType : byte
{
  LMT_None = 0,
  LMT_Tip = 1,
  LMT_Event = 2,
  LMT_Explain01 = 3,
  LMT_Explain02 = 4,
  LMT_Explain03 = 5,
  LMT_Explain04 = 6,
};

/// Defined by Enum.xlsx
public enum EmotionType : byte
{
  ET_None = 0,
  ET_Emoticon = 1,
  ET_Action = 2,
};

/// Defined by Enum.xlsx
public enum SwapCoinType : byte
{
  SCT_None = 0,
  SCT_Deposit = 1,
  SCT_Withdraw = 2,
};

/// Defined by Enum.xlsx
public enum LanguageType : byte
{
  LT_English = 0,
  LT_Korean = 1,
  LT_China = 2,
  LT_Taiwan = 3,
};

/// Defined by Enum.xlsx
public enum SystemMsgOutputType : byte
{
  SMOT_None = 0,
  SMOT_GetItem = 1,
  SMOT_Operation = 2,
  SMOT_WinRewardHoldem = 3,
  SMOT_WinRewardTreasurelottery = 4,
  SMOT_JackpotHoldem = 5,
  SMOT_JackpotTreasurelottery = 6,
};

/// Defined by Enum.xlsx
public enum SystemMsgType : byte
{
  SMT_NONE = 0,
  SMT_GameInfo = 1,
  SMT_Notice = 2,
  SMT_Toast = 3,
};

/// Defined by Enum.xlsx
public enum WalletType : byte
{
  WT_None = 0,
  WT_MetaMask = 1,
  WT_OKX = 2,
};

/// Defined by Enum.xlsx
public enum NpcFunction : byte
{
  NP_None = 0,
  NP_UIOpen = 1,
  NP_Warp = 2,
};

/// Defined by Enum.xlsx
public enum InteractionType : byte
{
  INTER_None = 0,
  INTER_Direct = 1,
  INTER_Button = 2,
};

/// Defined by Enum.xlsx
public enum EntertainContentType : byte
{
  EC_None = 0,
  EC_HeadsAndTails = 1,
  EC_DrawCard = 2,
  EC_Bingo = 3,
};

/// Defined by Enum.xlsx
public enum BetLimit : byte
{
  BT_NoLimit = 0,
  BT_X10Limit = 1,
};

/// Defined by Enum.xlsx
public enum ActionAnimationType : byte
{
  AAT_None = 0,
  AAT_Victory1st = 1,
  AAT_Victory2st = 2,
  AAT_Victory3st = 3,
  AAT_Sad = 4,
  AAT_Talk = 5,
  AAT_RandomIdle = 6,
  AAT_Greeting = 7,
  AAT_Praying = 8,
  AAT_Talk001 = 9,
  AAT_Talk002 = 10,
};

/// Defined by Enum.xlsx
public enum PeriodType : byte
{
  PT_None = 0,
  PT_Use = 1,
  PT_Get = 2,
};

/// Defined by Enum.xlsx
public enum SlotType : byte
{
  ST_None = 0,
  ST_Normal = 1,
  ST_AddMultiplier = 2,
};

/// Defined by Enum.xlsx
public enum NFTPublishType : byte
{
  NPT_None = 0,
  NPT_AW = 1,
};

/// Defined by Enum.xlsx
public enum ShopCalculationType : byte
{
  SCT_None = 0,
  SCT_Fruit = 1,
};

/// Defined by Enum.xlsx
public enum TokenAddressType : byte
{
  TAT_None = 0,
  TAT_Coin = 1,
  TAT_NFT = 2,
};

/// Defined by Enum.xlsx
public enum EventUseACCType : byte
{
  EUA_None = 0,
  EUA_TreasureLottery = 1,
  EUA_Holdem = 2,
};

/// Defined by Enum.xlsx
public enum CustomizingMainType : byte
{
  CMT_None = 0,
  CMT_Head = 1,
  CMT_Face = 2,
  CMT_Body = 3,
  CMT_Color = 4,
  CMT_Morphing = 5,
};

/// Defined by Enum.xlsx
public enum CustomizingSubType : byte
{
  CST_None = 0,
  CST_Hair = 1,
  CST_Ear = 2,
  CST_Eyes = 3,
  CST_Eye_L = 4,
  CST_Eye_R = 5,
  CST_Nose = 6,
  CST_Lip = 7,
  CST_Whisker = 8,
  CST_Hand = 9,
  CST_Shoes = 10,
  CST_Tail = 11,
  CST_TopBody = 12,
  CST_BottomBody = 13,
  CST_Face = 14,
  CST_Body = 15,
  CST_Pupil = 16,
  CST_Eyebrows = 17,
  CST_Iris = 18,
  CST_Skin = 19,
  CST_Chest = 20,
  CST_Waist = 21,
  CST_Hip = 22,
  CST_Height = 23,
  CST_Eye = 24,
  CST_Cheek = 25,
};

/// Defined by Enum.xlsx
public enum CustomizingType : byte
{
  CT_None = 0,
  CT_Morphing = 1,
  CT_Color = 2,
  CT_Preset = 3,
};

/// Defined by Enum.xlsx
public enum CustomizingDetailType : byte
{
  CDT_None = 0,
  CDT_Location = 1,
  CDT_Thick = 2,
  CDT_Height = 3,
  CDT_Width = 4,
  CDT_Size = 5,
  CDT_Length = 6,
  CDT_Sclera = 7,
  CDT_Iris = 8,
  CDT_Sclera_L = 9,
  CDT_Iris_L = 10,
  CDT_Sclera_R = 11,
  CDT_Iris_R = 12,
  CDT_Base = 13,
  CDT_Pattern01 = 14,
  CDT_Left = 15,
  CDT_Right = 16,
  CDT_BodyPattern = 17,
  CDT_BodyForm = 18,
  CDT_Area = 19,
  CDT_Null = 20,
  CDT_Bright = 21,
};

/// Defined by Enum.xlsx
public enum TertiaryCapability : byte
{
  WalkDistance = 0,
  RunDistance = 1,
  StaminaCost = 2,
};

/// Defined by Enum.xlsx
public enum PresetType : byte
{
  PT_None = 0,
  PT_Mesh = 1,
  PT_Color = 2,
  PT_Texture = 3,
};

/// Defined by Enum.xlsx
public enum PresetDetailType : byte
{
  PDT_None = 0,
  PDT_Mask = 1,
  PDT_Material = 2,
};

/// Defined by Enum.xlsx
public enum CustomizingDivideType : byte
{
  CDT_None = 0,
  CDT_Left = 1,
  CDT_Right = 2,
  CDT_Base = 3,
  CDT_Pattern01 = 4,
};

/// Defined by Enum.xlsx
public enum CharacterUsedType : byte
{
  CUT_Player = 0,
  CUT_NPC = 1,
  CUT_Pet = 2,
};

/// Defined by Enum.xlsx
public enum StorageType : byte
{
  ST_None = 0,
  ST_ALL = 1,
  ST_Character = 2,
  ST_NFT = 3,
};

/// Defined by Enum.xlsx
public enum ItemMainType : byte
{
  IMT_None = 0,
  IMT_Equip = 1,
  IMT_Using = 2,
  IMT_Event = 3,
  IMT_Quest = 4,
  IMT_ETC = 8,
};

/// Defined by Enum.xlsx
public enum ItemSubType : byte
{
  IST_None = 0,
  IST_Clothes = 1,
  IST_Pet = 2,
  IST_Vehicle = 3,
  IST_Potion = 4,
  IST_Ticket = 5,
  IST_Box = 6,
  IST_Nft = 7,
  IST_Costume = 8,
  IST_Quest = 9,
  IST_Gather = 19,
  IST_ETC = 20,
  IST_Device = 21,
};

/// Defined by Enum.xlsx
public enum ItemDetailsType : byte
{
  IDT_None = 0,
  IDT_Head = 1,
  IDT_TopAccessori = 2,
  IDT_BottomAccessori = 3,
  IDT_TopBody = 4,
  IDT_Bareback = 5,
  IDT_BottomBody = 6,
  IDT_Hand = 7,
  IDT_Shoes = 8,
  IDT_Costume = 9,
  IDT_RewardBox = 10,
  IDT_PackageBox = 11,
  IDT_Effect = 12,
  IDT_Emoticon = 41,
  IDT_Device = 42,
  IDT_FortuneTree = 43,
  IDT_EA = 44,
};

/// Defined by Enum.xlsx
public enum ItemGradeType : byte
{
  IGT_None = 0,
  IGT_1Tier = 1,
  IGT_2Tier = 2,
  IGT_3Tier = 3,
  IGT_4Tier = 4,
  IGT_5Tier = 5,
  IGT_6Tier = 6,
  IGT_7Tier = 7,
  IGT_8Tier = 8,
  IGT_Ect = 9,
};

/// Defined by Inventory.xlsx
public enum InventoryType : byte
{
  IT_None = 0,
  IT_Bag = 1,
  IT_Clothes = 2,
  IT_Pet = 3,
  IT_Vehicle = 4,
  IT_Housing = 5,
  IT_Warehouse = 6,
  IT_Costume = 7,
  IT_CharacterSlot = 8,
  IT_FriendList = 9,
  IT_FriendBlockList = 10,
  IT_FriendRecommendList = 11,
  IT_FriendReceptionList = 12,
  IT_EquipBag = 13,
  IT_OutsideHousing = 14,
  IT_InsideHousing = 15,
};

/// Defined by Inventory.xlsx
public enum InventoryCategoryType : byte
{
  ICT_None = 0,
  ICT_All = 1,
  ICT_Clothes = 2,
  ICT_Pet = 3,
  ICT_Vehicle = 4,
  ICT_Housing = 5,
  ICT_Using = 6,
  ICT_Quest = 7,
  ICT_NFT = 8,
  ICT_Event = 9,
  ICT_Costume = 10,
  ICT_MainBuilding = 11,
  ICT_Building = 12,
  ICT_Environment = 13,
  ICT_Sculpture = 14,
  ICT_Interior = 15,
  ICT_Furniture = 16,
  ICT_Lighting = 17,
  ICT_HomeAppliances = 18,
  ICT_Decorations = 19,
  ICT_ETC = 20,
};

/// Defined by Pet.xlsx
public enum PetType : byte
{
  PT_None = 0,
  PT_Egg = 1,
  PT_BattlePet = 2,
  PT_MiningPet = 3,
};

/// Defined by Pet.xlsx
public enum PetGradeType : byte
{
  PGT_None = 0,
  PGT_1Tier = 1,
  PGT_2Tier = 2,
  PGT_3Tier = 3,
  PGT_4Tier = 4,
  PGT_5Tier = 5,
  PGT_6Tier = 6,
  PGT_7Tier = 7,
  PGT_8Tier = 8,
  PGT_9Tier = 9,
  PGT_10Tier = 10,
};

/// Defined by Quest.xlsx
public enum QuestType : byte
{
  QT_None = 0,
  QT_Main = 1,
  QT_Sub = 2,
  QT_Repeat = 3,
  QT_Event = 4,
  QT_Attraction = 5,
  QT_Mission = 6,
  QT_Tutorial = 7,
};

/// Defined by Quest.xlsx
public enum QuestConditionType : byte
{
  QT_None = 0,
  QT_Region = 1,
  QT_ItemGet = 2,
  QT_ItemUse = 3,
  QT_NPC = 4,
  QT_Interaction = 5,
  QT_Event = 6,
  QT_ContentMove = 7,
  QT_ScenarioScene = 8,
  QT_ResetDailyQuest = 11,
  QT_JoinMode = 18,
  QT_ModeVictory = 19,
  QT_ModeFailure = 20,
  QT_TierLevel = 104,
  QT_ShopPurchase = 105,
  QT_TotalShopPurchase = 106,
  QT_EarningCurrency = 107,
  QT_WalletConnection = 108,
  QT_StartNoConditions = 109,
  QT_ResetQuest = 110,
  QT_UsingCurrency = 111,
};

/// Defined by Quest.xlsx
public enum QuestAcceptType : byte
{
  QAT_None = 0,
  QAT_Auto = 1,
  QAT_Manual = 2,
};

/// Defined by Quest.xlsx
public enum QuestFailType : byte
{
  QFT_None = 0,
  QFT_Time = 1,
  QFT_Item = 2,
};

/// Defined by Quest.xlsx
public enum QuestStartValue01 : byte
{
  CT_None = 0,
  CT_Default = 1,
  CT_Character = 2,
  CT_Shop = 3,
  CT_BagInventory = 4,
  CT_MAP = 5,
  CT_CharacterItemSlot = 6,
  CT_Exit = 7,
  CT_Warehouse = 8,
  CT_Mail = 9,
  CT_Friend = 10,
  CT_CharacterAction = 11,
  CT_ItemGrowth = 12,
  CT_InGameShop = 13,
  CT_PlatformGame = 14,
  CT_Lobby = 15,
  CT_Tier = 16,
  CT_CharacterInfo = 17,
  CT_CashShop = 18,
  CT_LeaderBoard = 19,
  CT_SkillSetting = 20,
  CT_Wallet = 21,
  CT_Setting = 22,
  CT_Emoticon = 23,
  CT_PlatformGameMulti = 24,
  CT_PlatformGameSingle = 25,
  CT_PlatformGameSkill = 26,
  CT_Mission = 31,
};

/// Defined by Quest.xlsx
public enum QuestCategoryType : byte
{
  QC_None = 0,
  QC_Mission = 1,
  QC_Achievements = 2,
  QC_Tutorial = 3,
  QC_Quest = 4,
};

/// Defined by Quest.xlsx
public enum QuestTabType : byte
{
  QT_None = 0,
  QT_M_Daily = 1,
  QT_M_Weekly = 2,
  QT_M_Monthly = 3,
  QT_M_Event = 4,
  QT_Achievements = 5,
  QT_Tutorial = 6,
  QT_Q_Episode = 7,
  QT_Q_Tribe = 8,
  QT_Q_sub = 9,
  QT_Q_Event = 10,
  QT_Mission = 11,
};

/// Defined by Quest.xlsx
public enum GameModeValue : byte
{
  GMV_NoOneEscapeSingle = 1,
  GMV_NoOneEscapeMulti = 2,
  GMV_HoldemGame = 3,
  GMV_TreasureRotaryGame = 4,
  GMV_HeadsAndTails = 5,
  GMV_BingoGame = 6,
  GMV_DrawCardGame = 7,
};

/// Defined by RedDot.xlsx
public enum ReddotMainType : byte
{
  RMT_None = 0,
  RMT_CashShop = 1,
  RMT_Mail = 2,
  RMT_Inventory = 3,
  RMT_Friend = 4,
  RMT_Tier = 5,
  RMT_PlatformGame = 6,
  RMT_Chatting = 7,
  RMT_Quest = 8,
  RMT_Mission = 9,
  RMT_NFTInventory = 10,
};

/// Defined by RedDot.xlsx
public enum ReddotSubType : byte
{
  RST_None = 0,
  RST_MainHud = 1,
  RST_MainTab = 2,
  RST_SubTab = 3,
  RST_DetailTab = 4,
  RST_Menu = 5,
  RST_MenuList = 6,
  RST_Slot = 7,
  RST_Tab = 8,
  RST_FriendTab = 9,
  RST_AcceptTab = 10,
  RST_SingleTab = 11,
  RST_MultiTab = 12,
  RST_SkillList = 13,
  RST_WhisperTab = 14,
  RST_NewMail = 15,
  RST_ItemMail = 16,
  RST_GetItem = 17,
  RST_NewFriend = 18,
  RST_NewFriendApply = 19,
  RST_TierReward = 20,
  RST_SkillSlot = 21,
  RST_NewWhisper = 22,
  RST_FreeProduct = 23,
  RST_RankingSlot = 24,
  RST_QuestMainTab = 25,
  RST_QuestSubTab = 26,
  RST_QuestTitle = 27,
  RST_NewQuest = 28,
  RST_AcceptQuest = 29,
  RST_MissionMainTab = 30,
  RST_MissionDailyTab = 31,
  RST_MissionReward = 32,
};

/// Defined by RedDot.xlsx
public enum ReddotIconType : byte
{
  RIT_None = 0,
  RIT_Basic = 1,
  RIT_New = 2,
};

/// Defined by ScenarioScene.xlsx
public enum ScriptType : byte
{
  ST_None = 0,
  ST_Button = 1,
  ST_Dialogue = 2,
  ST_Dialogue_Basic = 3,
  ST_Dialogue_center = 4,
  ST_Dialogue_Toto_TopL = 5,
  ST_Dialogue_Toto_TopM = 6,
  ST_Dialogue_Toto_TopR = 7,
  ST_Dialogue_Toto_bottomL = 8,
  ST_Dialogue_Toto_bottomM = 9,
  ST_Dialogue_Toto_bottomR = 10,
  ST_Dialogue_Toto_image1 = 11,
  ST_Dialogue_lobby_L = 12,
  ST_Dialogue_lobby_R = 13,
  ST_Dialogue_Title_bottomR = 14,
  ST_Dialogue_Title_center = 15,
  ST_Dialogue_Title_bottomM = 16,
  ST_Dialogue_loading_bottomR = 17,
};

/// Defined by ScenarioScene.xlsx
public enum ScriptCharacterType : byte
{
  None = 0,
  Player = 1,
  NPC = 2,
};

/// Defined by ScenarioScene.xlsx
public enum ScenarioDirectingType : byte
{
  None = 0,
  SD_UI_Appear = 1,
  SD_UI_DisAppear = 2,
  SD_UI_Focus = 3,
  SD_UI_Button_Focus = 4,
  SD_UI_Focus_Area = 5,
};

/// Defined by Skill.xlsx
public enum SkillGradeType : byte
{
  SGT_None = 0,
  SGT_1Tier = 1,
  SGT_2Tier = 2,
  SGT_3Tier = 3,
  SGT_4Tier = 4,
  SGT_5Tier = 5,
  SGT_6Tier = 6,
  SGT_7Tier = 7,
  SGT_8Tier = 8,
};

/// Defined by Skill.xlsx
public enum SkillType : byte
{
  ST_None = 0,
  ST_Active = 1,
  ST_Passive = 2,
};

/// Defined by Skill.xlsx
public enum SkillUserType : byte
{
  SUT_None = 0,
  SUT_Player = 1,
  SUT_Couple = 2,
  SUT_Monster = 3,
  SUT_Pet = 4,
  SUT_PlatformGame = 5,
};

/// Defined by Skill.xlsx
public enum SkillUseType : byte
{
  SUT_None = 0,
  SUT_Immediately = 1,
  SUT_Control_Range = 2,
};

/// Defined by Skill.xlsx
public enum SkillCostType : byte
{
  SCT_None = 0,
  SCT_Hp_Int = 1,
  SCT_Hp_Ratio = 2,
  SCT_Mp_Int = 3,
  SCT_Mp_Ratio = 4,
};

/// Defined by Skill.xlsx
public enum SkillRangeType : byte
{
  SRT_None = 0,
  SRT_Self_Rectangle = 1,
  SRT_Self_FanShape = 2,
  SRT_Self_Circle = 3,
  SRT_Control_Circle = 4,
  SRT_Front_All = 5,
  SRT_Area_All = 6,
  SRT_Player_Self = 7,
  SRT_FirstRank = 8,
};

/// Defined by Skill.xlsx
public enum ApplyType : byte
{
  AT_None = 0,
  AT_Character = 1,
  AT_Enemy = 2,
  AT_RandomEnemy = 3,
  AT_Party = 4,
};

/// Defined by Skill.xlsx
public enum SkillGetType : byte
{
  SGT_Basic = 0,
  SGT_Upgrade = 1,
  SGT_Levelup = 2,
  SGT_Tier = 3,
};

/// Defined by Skill.xlsx
public enum BuffType : byte
{
  BT_None = 0,
  BT_Buff = 1,
  BT_Debuff = 2,
};

/// Defined by Custom
public struct vector2 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public vector2 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }

  public static Offset<GDT.vector2> Createvector2(FlatBufferBuilder builder, float X, float Y) {
    builder.Prep(4, 8);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<GDT.vector2>(builder.Offset);
  }
  public vector2T UnPack() {
    var _o = new vector2T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(vector2T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
  }
  public static Offset<GDT.vector2> Pack(FlatBufferBuilder builder, vector2T _o) {
    if (_o == null) return default(Offset<GDT.vector2>);
    return Createvector2(
      builder,
      _o.X,
      _o.Y);
  }
};

public class vector2T
{
  public float X { get; set; }
  public float Y { get; set; }

  public vector2T() {
    this.X = 0.0f;
    this.Y = 0.0f;
  }
}

/// Defined by Custom
public struct vector3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public vector3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<GDT.vector3> Createvector3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<GDT.vector3>(builder.Offset);
  }
  public vector3T UnPack() {
    var _o = new vector3T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(vector3T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
  }
  public static Offset<GDT.vector3> Pack(FlatBufferBuilder builder, vector3T _o) {
    if (_o == null) return default(Offset<GDT.vector3>);
    return Createvector3(
      builder,
      _o.X,
      _o.Y,
      _o.Z);
  }
};

public class vector3T
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }

  public vector3T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
  }
}

/// Defined by Custom
public struct vector4 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public vector4 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }
  public float W { get { return __p.bb.GetFloat(__p.bb_pos + 12); } }

  public static Offset<GDT.vector4> Createvector4(FlatBufferBuilder builder, float X, float Y, float Z, float W) {
    builder.Prep(4, 16);
    builder.PutFloat(W);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<GDT.vector4>(builder.Offset);
  }
  public vector4T UnPack() {
    var _o = new vector4T();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(vector4T _o) {
    _o.X = this.X;
    _o.Y = this.Y;
    _o.Z = this.Z;
    _o.W = this.W;
  }
  public static Offset<GDT.vector4> Pack(FlatBufferBuilder builder, vector4T _o) {
    if (_o == null) return default(Offset<GDT.vector4>);
    return Createvector4(
      builder,
      _o.X,
      _o.Y,
      _o.Z,
      _o.W);
  }
};

public class vector4T
{
  public float X { get; set; }
  public float Y { get; set; }
  public float Z { get; set; }
  public float W { get; set; }

  public vector4T() {
    this.X = 0.0f;
    this.Y = 0.0f;
    this.Z = 0.0f;
    this.W = 0.0f;
  }
}

/// Defined by Custom
public struct color : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public color __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float R { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float G { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float B { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<GDT.color> Createcolor(FlatBufferBuilder builder, float R, float G, float B) {
    builder.Prep(4, 12);
    builder.PutFloat(B);
    builder.PutFloat(G);
    builder.PutFloat(R);
    return new Offset<GDT.color>(builder.Offset);
  }
  public colorT UnPack() {
    var _o = new colorT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(colorT _o) {
    _o.R = this.R;
    _o.G = this.G;
    _o.B = this.B;
  }
  public static Offset<GDT.color> Pack(FlatBufferBuilder builder, colorT _o) {
    if (_o == null) return default(Offset<GDT.color>);
    return Createcolor(
      builder,
      _o.R,
      _o.G,
      _o.B);
  }
};

public class colorT
{
  public float R { get; set; }
  public float G { get; set; }
  public float B { get; set; }

  public colorT() {
    this.R = 0.0f;
    this.G = 0.0f;
    this.B = 0.0f;
  }
}

/// Defined by Custom
public struct datetime : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public datetime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Year { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Month { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int Day { get { return __p.bb.GetInt(__p.bb_pos + 8); } }
  public int Hour { get { return __p.bb.GetInt(__p.bb_pos + 12); } }
  public int Minute { get { return __p.bb.GetInt(__p.bb_pos + 16); } }
  public int Second { get { return __p.bb.GetInt(__p.bb_pos + 20); } }
  public long UnixTime { get { return __p.bb.GetLong(__p.bb_pos + 24); } }

  public static Offset<GDT.datetime> Createdatetime(FlatBufferBuilder builder, int Year, int Month, int Day, int Hour, int Minute, int Second, long UnixTime) {
    builder.Prep(8, 32);
    builder.PutLong(UnixTime);
    builder.PutInt(Second);
    builder.PutInt(Minute);
    builder.PutInt(Hour);
    builder.PutInt(Day);
    builder.PutInt(Month);
    builder.PutInt(Year);
    return new Offset<GDT.datetime>(builder.Offset);
  }
  public datetimeT UnPack() {
    var _o = new datetimeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(datetimeT _o) {
    _o.Year = this.Year;
    _o.Month = this.Month;
    _o.Day = this.Day;
    _o.Hour = this.Hour;
    _o.Minute = this.Minute;
    _o.Second = this.Second;
    _o.UnixTime = this.UnixTime;
  }
  public static Offset<GDT.datetime> Pack(FlatBufferBuilder builder, datetimeT _o) {
    if (_o == null) return default(Offset<GDT.datetime>);
    return Createdatetime(
      builder,
      _o.Year,
      _o.Month,
      _o.Day,
      _o.Hour,
      _o.Minute,
      _o.Second,
      _o.UnixTime);
  }
};

public class datetimeT
{
  public int Year { get; set; }
  public int Month { get; set; }
  public int Day { get; set; }
  public int Hour { get; set; }
  public int Minute { get; set; }
  public int Second { get; set; }
  public long UnixTime { get; set; }

  public datetimeT() {
    this.Year = 0;
    this.Month = 0;
    this.Day = 0;
    this.Hour = 0;
    this.Minute = 0;
    this.Second = 0;
    this.UnixTime = 0;
  }
}

/// Defined by Custom
public struct time : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public time __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Hour { get { return __p.bb.GetInt(__p.bb_pos + 0); } }
  public int Minute { get { return __p.bb.GetInt(__p.bb_pos + 4); } }
  public int Second { get { return __p.bb.GetInt(__p.bb_pos + 8); } }
  public int TimeSinceMidnight { get { return __p.bb.GetInt(__p.bb_pos + 12); } }

  public static Offset<GDT.time> Createtime(FlatBufferBuilder builder, int Hour, int Minute, int Second, int TimeSinceMidnight) {
    builder.Prep(4, 16);
    builder.PutInt(TimeSinceMidnight);
    builder.PutInt(Second);
    builder.PutInt(Minute);
    builder.PutInt(Hour);
    return new Offset<GDT.time>(builder.Offset);
  }
  public timeT UnPack() {
    var _o = new timeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(timeT _o) {
    _o.Hour = this.Hour;
    _o.Minute = this.Minute;
    _o.Second = this.Second;
    _o.TimeSinceMidnight = this.TimeSinceMidnight;
  }
  public static Offset<GDT.time> Pack(FlatBufferBuilder builder, timeT _o) {
    if (_o == null) return default(Offset<GDT.time>);
    return Createtime(
      builder,
      _o.Hour,
      _o.Minute,
      _o.Second,
      _o.TimeSinceMidnight);
  }
};

public class timeT
{
  public int Hour { get; set; }
  public int Minute { get; set; }
  public int Second { get; set; }
  public int TimeSinceMidnight { get; set; }

  public timeT() {
    this.Hour = 0;
    this.Minute = 0;
    this.Second = 0;
    this.TimeSinceMidnight = 0;
  }
}

/// Defined by Common.xlsx
public struct Common : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Common GetRootAsCommon(ByteBuffer _bb) { return GetRootAsCommon(_bb, new Common()); }
  public static Common GetRootAsCommon(ByteBuffer _bb, Common obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Common __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// 스태미나 회복 주기(단위 : 초)
  public int StaminaRecoveryCycle { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 스태미나 회복 량(단위 : 스태미나)
  public int StaminaRecoveryAmount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 조립 / 배치 횟수 회복 주기(단위 : 초)
  public int NOABRecoveryCycle { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 조립 / 배치 횟수 회복 주기에 따른 회복 횟수
  public int NOABRecoveryAmount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 조합 슬롯 수량 오픈 조건 ( 정신 > 조건 )
  public int NOCSSlotNumberOpen(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NOCSSlotNumberOpenLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNOCSSlotNumberOpenBytes() { return __p.__vector_as_span<int>(12, 4); }
#else
  public ArraySegment<byte>? GetNOCSSlotNumberOpenBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public int[] GetNOCSSlotNumberOpenArray() { return __p.__vector_as_array<int>(12); }
  /// 조합 슬롯 수량
  public int NOCSSlotNumber(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NOCSSlotNumberLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<int> GetNOCSSlotNumberBytes() { return __p.__vector_as_span<int>(14, 4); }
#else
  public ArraySegment<byte>? GetNOCSSlotNumberBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetNOCSSlotNumberArray() { return __p.__vector_as_array<int>(14); }
  /// 피로 상태 증가(모든 컨텐츠 공유)
  public int TIREDIncreasingStatus { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 피로 상태 회복 주기(단위 : 초)
  public int TIREDRecoveryCycle { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 피로 상태 회복 주기에 따른 회복 피로도
  public int TIREDRecoveryAmount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 수면 상태 전환(피로도 조건)
  public int SLEEPSwitchStatus { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 수면 상태 종료(조건 : 피로 수치)
  public int SLEEPEndStatus { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// HUD 상태이상 아이콘 최대 표시 개수
  public int HudConditionIconMax { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 매일
  public GDT.time? ContentsResetTimeDay { get { int o = __p.__offset(28); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 매주 월요일
  public GDT.time? ContentsResetTimeWeek { get { int o = __p.__offset(30); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 매월 1일
  public GDT.time? ContentsResetTimeMonthly { get { int o = __p.__offset(32); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 캐릭터 삭제 대기 시간
  public int CharacterDeleteTime { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 생성 맵(임시)
  public int CharacterCreateMapID { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 닉네임 최소 입력 수
  public int CharacterNickNameMin { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 닉네임 최대 입력 수
  public int CharacterNickNameMax { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 생성 시, 스폰 그룹
  public int CharacterCreateSpawnGroup { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 에어드랍 시작 시간
  public GDT.time? EventCoinAirDropStartTime { get { int o = __p.__offset(44); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 에어드랍 시작 10분 전(초)
  public int EventCoinAirDrop10Min { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 에어드랍 시작 5분 전(초)
  public int EventCoinAirDrop5Min { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 에어드랍 시작 1분 전(초)
  public int EventCoinAirDrop1Min { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 에어드랍 시작 이후 종료 시간(초)
  public int EventCoinAirDropEnd { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 에어드랍 코인 수량
  public int EventCoinAirDropCount { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 일반 우편 최대 보관 개수
  public int MailNormalMaxCount { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 시스템 우편 최대 보관 개수
  public int MailSystemMaxCount { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 친구 신청 리스트 최대 인원 수
  public int FriendRequestListMaxCount { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 친구 리스트 최대 인원 수
  public int FriendFriendListMaxCount { get { int o = __p.__offset(62); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 친구 수락 리스트 최대 인원 수
  public int FriendReceptionListMaxCount { get { int o = __p.__offset(64); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 친구 차단 리스트 최대 인원 수
  public int FriendBlockListMaxCount { get { int o = __p.__offset(66); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 친구 추천 최대 인원 수
  public int FriendRecommendListMaxCount { get { int o = __p.__offset(68); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 친구 수락 대기 시간 (초)
  public int FriendAcceptanceTime { get { int o = __p.__offset(70); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 우정 포인트 발신 가능 횟수
  public int FriendFriendShipPointSendNum { get { int o = __p.__offset(72); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 우정 포인트 최대 발신 가능 횟수
  public int FriendFriendShipPointSendMax { get { int o = __p.__offset(74); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 호감도 최대
  public int FriendLikabilityMax { get { int o = __p.__offset(76); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 새로고침 시간 (초)
  public int FriendRefreshCoolTime { get { int o = __p.__offset(78); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 추천 순위 플레이어 티어 범위
  public int FriendRecommendTier { get { int o = __p.__offset(80); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 추천 순위 플레이어 레벨 범위
  public int FriendRecommendLevel { get { int o = __p.__offset(82); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 동일 내용 반복 시, 입력 제한 시간 참조
  public int ChattingRepeatPenaltyTime { get { int o = __p.__offset(84); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 비속어 및 금지 단어 사용 시, 입력 제한 시간 참조
  public int ChattingSlangPenaltyTime { get { int o = __p.__offset(86); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 채팅 출력 반경
  public int ChattingWorldOutputRadius { get { int o = __p.__offset(88); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 채팅 글자 수 제한
  public int ChattingMaxWord { get { int o = __p.__offset(90); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 채팅 팝업창 리스트 제한
  public int ChattingPopupMaxList { get { int o = __p.__offset(92); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 메인Hud 채팅 리스트 제한
  public int ChattingMainHudMaxList { get { int o = __p.__offset(94); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 말풍선 줄바꿈
  public int SpeechBalloonLineChange { get { int o = __p.__offset(96); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 말풍선 출력 시간
  public float SpeechBalloonTime { get { int o = __p.__offset(98); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 힘 스탯 최대 값
  public int CharacterPrimaryCapabilityMAXSTR { get { int o = __p.__offset(100); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 민첩 스탯 최대 값
  public int CharacterPrimaryCapabilityMAXDEX { get { int o = __p.__offset(102); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 체력 스탯 최대 값
  public int CharacterPrimaryCapabilityMAXCON { get { int o = __p.__offset(104); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 정신 스탯 최대 값
  public int CharacterPrimaryCapabilityMAXWIS { get { int o = __p.__offset(106); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 지능 스탯 최대 값
  public int CharacterPrimaryCapabilityMAXINT { get { int o = __p.__offset(108); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 센스 스탯 최대 값
  public int CharacterPrimaryCapabilityMAXSEN { get { int o = __p.__offset(110); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 아이템 글로벌 쿨타임 (밀리 초)
  public int USINGITEMGLOBALCOOLTIME { get { int o = __p.__offset(112); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 메인 퀘스트 최대 진행 개수
  public int MainQuestMaxCount { get { int o = __p.__offset(114); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 서브 퀘스트 최대 진행 개수
  public int SubQuestMaxCount { get { int o = __p.__offset(116); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 스크립트 속도 1배속
  public float ScriptSpeed01 { get { int o = __p.__offset(118); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 스크립트 속도 2배속
  public float ScriptSpeed02 { get { int o = __p.__offset(120); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 스크립트 속도 3배속
  public float ScriptSpeed03 { get { int o = __p.__offset(122); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 자동 대화 대기 시간
  public int ScriptAutoTime { get { int o = __p.__offset(124); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 퀘스트 허드에 표시할 퀘스트 최대 개수
  public int QuestHudInfoCheckCount { get { int o = __p.__offset(126); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 탈 것 탑승 이펙트
  public int VehicleRideEffect { get { int o = __p.__offset(128); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 탈 것 해제 이펙트
  public int VehicleUnloadEffect { get { int o = __p.__offset(130); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 새로고침 시간 (초)
  public int MailRefreshCoolTime { get { int o = __p.__offset(132); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 스킬 글로벌 쿨타임(밀리 초)
  public int SkillGLOBALCOOLTIME { get { int o = __p.__offset(134); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 당겨오기 스킬 사용 시, 타겟이 당겨지는 속도(m/s)
  public float SkillTargetPullSpeed { get { int o = __p.__offset(136); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 플랫폼 게임 입장 카운트
  public int PlatformGameEnterCount { get { int o = __p.__offset(138); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// AWM 교환 경험치
  public float AWMTierExp { get { int o = __p.__offset(140); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 플랫폼 매칭 시간 (밀리초)
  public int PlatformGameMatchingCount { get { int o = __p.__offset(142); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 플랫폼 게임 종료 카운트(밀리초)
  public int PlatformGameEndCount { get { int o = __p.__offset(144); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 1 위 승리 포즈 애니메이션
  public int PlatformGameRank1Animation { get { int o = __p.__offset(146); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 2 위 승리 포즈 애니메이션
  public int PlatformGameRank2Animation { get { int o = __p.__offset(148); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 3 위 승리 포즈 애니메이션
  public int PlatformGameRank3Animation { get { int o = __p.__offset(150); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 1 위 캐릭터 모델 출력 좌표
  public GDT.vector3? PlatformGameRank1Position { get { int o = __p.__offset(152); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 2 위 캐릭터 모델 출력 좌표
  public GDT.vector3? PlatformGameRank2Position { get { int o = __p.__offset(154); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 3 위 캐릭터 모델 출력 좌표
  public GDT.vector3? PlatformGameRank3Position { get { int o = __p.__offset(156); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 플랫폼 게임 결과창 카메라 좌표
  public GDT.vector3? PlatformGameResultCameraPosition { get { int o = __p.__offset(158); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 플랫폼 게임 싱글 모드 캐릭터 모델 출력 좌표
  public GDT.vector3? PlatformGameSinglePosition { get { int o = __p.__offset(160); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 플랫폼 게임 싱글 모드 결과창 카메라 좌표
  public GDT.vector3? PlatformGameResultCameraPositionSingle { get { int o = __p.__offset(162); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 플랫폼 게임 역방향 체크 시간 (밀리초)
  public int PlatformGameReverseDirectionTime { get { int o = __p.__offset(164); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 플랫폼 게임 리스폰 연출 시간 (밀리초)
  public int PlatformGameRespawnTime { get { int o = __p.__offset(166); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 역주행 각도
  public int PlatformGameReversePlayAngle { get { int o = __p.__offset(168); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 원거리 스킬 타게팅 이펙트
  public int PlatformGameTargetingEffect { get { int o = __p.__offset(170); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 아이템 획득 이펙트
  public int PlatformGameGetItemEffect { get { int o = __p.__offset(172); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 플랫폼 게임 시작 시, 스킬 쿨타임 적용 시간(밀리초)
  public int PlatformGameStartCoolTime { get { int o = __p.__offset(174); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 플랫폼 게임 입장 타임 아웃 시간 (밀리초)
  public int PlatformGameTimeOut { get { int o = __p.__offset(176); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 타임 아웃 시, 발송할 메일 ID
  public int PlatformGameTimeOutMailID { get { int o = __p.__offset(178); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Intro Scene 호출 시 재생될 Sound
  public int SceneTypeIntroBGM { get { int o = __p.__offset(180); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Bootstrap Scene 호출 시 재생될 Sound
  public int SceneTypeBootstrapBGM { get { int o = __p.__offset(182); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Login Scene 호출 시 재생될 Sound
  public int SceneTypeLoginBGM { get { int o = __p.__offset(184); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Lobby Scene 호출 시 재생될 Sound
  public int SceneTypeLobbyBGM { get { int o = __p.__offset(186); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// SceneLoad Scene 호출 시 재생될 Sound
  public int SceneTypeSceneLoadBGM { get { int o = __p.__offset(188); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 로그인 아이디 최대 제한 수
  public int LoginWordMaxCount { get { int o = __p.__offset(190); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 로그인 아이디 최소 제한 수
  public int LoginWordMinCount { get { int o = __p.__offset(192); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 랜덤 Idle 플레이 주기 (밀리 초)
  public int CharacterPlayIdleTime { get { int o = __p.__offset(194); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 랜던 Idle 플레이 확률 (만분 률)
  public int CharacterPlayIdleRate { get { int o = __p.__offset(196); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 랜덤 Idle 애니메이션 ID
  public int CharacterPlayIdleId { get { int o = __p.__offset(198); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 통신해제 Check 시간 (밀리초)
  public int DeviceDisconnectCheckTime { get { int o = __p.__offset(200); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 재 연결 시간 (밀리초)
  public int DeviceReconnectTime { get { int o = __p.__offset(202); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// App   재 진입 시간 (밀리초)
  public int DeviceSuspendingCheckTime { get { int o = __p.__offset(204); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 재 연결 횟수
  public int DeviceReconnectCount { get { int o = __p.__offset(206); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 체형 커스터마이징 인덱스
  public int CharacterBodyFormValue { get { int o = __p.__offset(208); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 꼬리 커스터마이징 인덱스
  public int CharacterTailFormValue { get { int o = __p.__offset(210); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 패턴 커스터마이징 인덱스
  public int CharacterPatternValue { get { int o = __p.__offset(212); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 점프 파워 값
  public float CharacterJumpPowerValue { get { int o = __p.__offset(214); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 캐릭터 중력 값
  public float CharacterGravityValue { get { int o = __p.__offset(216); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 채널 접속 시도 시간(밀리초)
  public int ChannelTryAccessTime { get { int o = __p.__offset(218); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 채널 새로 고침 쿨타임 (밀리초)
  public int ChannelRefreshTime { get { int o = __p.__offset(220); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 원활 컬러
  public string ChannelStateColor01 { get { int o = __p.__offset(222); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelStateColor01Bytes() { return __p.__vector_as_span<byte>(222, 1); }
#else
  public ArraySegment<byte>? GetChannelStateColor01Bytes() { return __p.__vector_as_arraysegment(222); }
#endif
  public byte[] GetChannelStateColor01Array() { return __p.__vector_as_array<byte>(222); }
  /// 보통 컬러
  public string ChannelStateColor02 { get { int o = __p.__offset(224); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelStateColor02Bytes() { return __p.__vector_as_span<byte>(224, 1); }
#else
  public ArraySegment<byte>? GetChannelStateColor02Bytes() { return __p.__vector_as_arraysegment(224); }
#endif
  public byte[] GetChannelStateColor02Array() { return __p.__vector_as_array<byte>(224); }
  /// 혼잡 컬러
  public string ChannelStateColor03 { get { int o = __p.__offset(226); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelStateColor03Bytes() { return __p.__vector_as_span<byte>(226, 1); }
#else
  public ArraySegment<byte>? GetChannelStateColor03Bytes() { return __p.__vector_as_arraysegment(226); }
#endif
  public byte[] GetChannelStateColor03Array() { return __p.__vector_as_array<byte>(226); }
  /// 포화 컬러
  public string ChannelStateColor04 { get { int o = __p.__offset(228); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetChannelStateColor04Bytes() { return __p.__vector_as_span<byte>(228, 1); }
#else
  public ArraySegment<byte>? GetChannelStateColor04Bytes() { return __p.__vector_as_arraysegment(228); }
#endif
  public byte[] GetChannelStateColor04Array() { return __p.__vector_as_array<byte>(228); }
  /// 추천 채널 개수
  public int ChannelRecommendCount { get { int o = __p.__offset(230); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카운트 다운 5초
  public int PlatformGameStartCountDown5SFX { get { int o = __p.__offset(232); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카운트 다운 4초
  public int PlatformGameStartCountDown4SFX { get { int o = __p.__offset(234); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카운트 다운 3초
  public int PlatformGameStartCountDown3SFX { get { int o = __p.__offset(236); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카운트 다운 2초
  public int PlatformGameStartCountDown2SFX { get { int o = __p.__offset(238); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카운트 다운 1초
  public int PlatformGameStartCountDown1SFX { get { int o = __p.__offset(240); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카운트 다운 0초(Go!)
  public int PlatformGameStartCountDownGoSFX { get { int o = __p.__offset(242); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 캐릭터 ui 최대 출력 개수
  public int CharacterUIShowMaxCount { get { int o = __p.__offset(244); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 코인 출금 가능 시간
  public GDT.time? WithdrawLimeTimeStart { get { int o = __p.__offset(246); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 코인 출금 불가능 시간
  public GDT.time? WithdrawLimeTimeEnd { get { int o = __p.__offset(248); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  /// 코인 일일 출금 제한 횟수
  public int CoinWithdrawLimit { get { int o = __p.__offset(250); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// NFT 일일 출금 제한 횟수
  public int NFTWithdrawLimit { get { int o = __p.__offset(252); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// NFT 전송 대기 시간
  public int NFTTransferWaitingTime { get { int o = __p.__offset(254); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// NFT 전송 수수료Klay로 수수료 고정
  public int NFTTransmitFee { get { int o = __p.__offset(256); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// Kei nft 오픈씨 링크
  public string NFTOpenseaAddressKei { get { int o = __p.__offset(258); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNFTOpenseaAddressKeiBytes() { return __p.__vector_as_span<byte>(258, 1); }
#else
  public ArraySegment<byte>? GetNFTOpenseaAddressKeiBytes() { return __p.__vector_as_arraysegment(258); }
#endif
  public byte[] GetNFTOpenseaAddressKeiArray() { return __p.__vector_as_array<byte>(258); }
  /// 이모티콘 출력 시간
  public float EmoticonTime { get { int o = __p.__offset(260); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 이모티콘 재 사용 쿨타임(밀리 초)
  public int EmoticonCoolTime { get { int o = __p.__offset(262); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 이모티콘 반복 입력 제한 값 (초 단위)
  public int EmoticonRepeatLimit { get { int o = __p.__offset(264); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 코인 교환 티어 경험치
  public float TierExchangeEXP { get { int o = __p.__offset(266); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 새로고침 시간 (초)
  public int ExchangeRefreshCoolTime { get { int o = __p.__offset(268); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 입금 제한 시간 (밀리초)
  public int ExchangeDepositCoolTime { get { int o = __p.__offset(270); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 소각 컨텐츠 티어 경험치
  public int ExpConstantValue { get { int o = __p.__offset(272); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 아이템 장착 중 색상값
  public string ItemEquipColor { get { int o = __p.__offset(274); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemEquipColorBytes() { return __p.__vector_as_span<byte>(274, 1); }
#else
  public ArraySegment<byte>? GetItemEquipColorBytes() { return __p.__vector_as_arraysegment(274); }
#endif
  public byte[] GetItemEquipColorArray() { return __p.__vector_as_array<byte>(274); }
  /// 아이템 장착 가능 색상 값
  public string ItemEquipPossibleColor { get { int o = __p.__offset(276); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemEquipPossibleColorBytes() { return __p.__vector_as_span<byte>(276, 1); }
#else
  public ArraySegment<byte>? GetItemEquipPossibleColorBytes() { return __p.__vector_as_arraysegment(276); }
#endif
  public byte[] GetItemEquipPossibleColorArray() { return __p.__vector_as_array<byte>(276); }
  /// 아이템 장착 불가 색상 값
  public string ItemEquipImpossibleColor { get { int o = __p.__offset(278); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemEquipImpossibleColorBytes() { return __p.__vector_as_span<byte>(278, 1); }
#else
  public ArraySegment<byte>? GetItemEquipImpossibleColorBytes() { return __p.__vector_as_arraysegment(278); }
#endif
  public byte[] GetItemEquipImpossibleColorArray() { return __p.__vector_as_array<byte>(278); }
  /// 아이템 장착 불가 요구 티어 미달 색상 값
  public string ItemEquipTierImpossibleColor { get { int o = __p.__offset(280); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemEquipTierImpossibleColorBytes() { return __p.__vector_as_span<byte>(280, 1); }
#else
  public ArraySegment<byte>? GetItemEquipTierImpossibleColorBytes() { return __p.__vector_as_arraysegment(280); }
#endif
  public byte[] GetItemEquipTierImpossibleColorArray() { return __p.__vector_as_array<byte>(280); }
  /// 자동 이동 남은 거리 색상
  public string AutoMoveDistanceTextColor { get { int o = __p.__offset(282); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAutoMoveDistanceTextColorBytes() { return __p.__vector_as_span<byte>(282, 1); }
#else
  public ArraySegment<byte>? GetAutoMoveDistanceTextColorBytes() { return __p.__vector_as_arraysegment(282); }
#endif
  public byte[] GetAutoMoveDistanceTextColorArray() { return __p.__vector_as_array<byte>(282); }
  /// 자동 이동 카메라 적용 시간
  public float AutoMoveCameraTime { get { int o = __p.__offset(284); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 자동 이동 카메라 시점 x 값
  public float AutoMoveCameraViewX { get { int o = __p.__offset(286); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 자동 이동 카메라 시점 y 값
  public float AutoMoveCameraViewY { get { int o = __p.__offset(288); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 자동 이동 카메라 시점 z 값
  public float AutoMoveCameraViewZ { get { int o = __p.__offset(290); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 자동 이동 카메라 거리 값
  public float AutoMoveCameraDistance { get { int o = __p.__offset(292); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 무료 코인 충전 양
  public int HoldemFreeCashRefill { get { int o = __p.__offset(294); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 일일 무료 코인 충전 횟수 제한
  public int HoldemFreeRefill { get { int o = __p.__offset(296); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 무료방에서 사용하는 재화
  public GDT.CurrencySubType HoldemCurrencyFree { get { int o = __p.__offset(298); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  /// 유료방에서 사용하는 재화
  public GDT.CurrencySubType HoldemCurrencyPay { get { int o = __p.__offset(300); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  /// 홀덤 시작 최소 인원
  public int HoldemGameStartMin { get { int o = __p.__offset(302); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 홀덤 잭팟 최초 기본금액
  public int HoldemJackpotBaseAmount { get { int o = __p.__offset(304); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 홀덤 다음 게임 시작까지 대기 시간(밀리초 단위)
  public int HoldemNextGameWaitTime { get { int o = __p.__offset(306); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 팝업 메시지가 채팅창에 표시될 때의 색상 값
  public string PopupChatColor { get { int o = __p.__offset(308); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPopupChatColorBytes() { return __p.__vector_as_span<byte>(308, 1); }
#else
  public ArraySegment<byte>? GetPopupChatColorBytes() { return __p.__vector_as_arraysegment(308); }
#endif
  public byte[] GetPopupChatColorArray() { return __p.__vector_as_array<byte>(308); }
  /// 누적 배율
  public float TreasureLotteryAccrueRate { get { int o = __p.__offset(310); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 잭팟 갱신 주기(초 단위)
  public int TreasureLotteryJackpotRenewalTime { get { int o = __p.__offset(312); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 잭팟 연출 사운드
  public int TreasureLotteryJackpotSound { get { int o = __p.__offset(314); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 퓨처헌터 진행 여부 팝업 초기화 시간 (밀리 초)
  public int TreasureLotteryProgressPopupResetTime { get { int o = __p.__offset(316); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 퓨처헌터 버튼 딜레이 타임 (밀리초)
  public int TreasureLotteryButtonDelayTime { get { int o = __p.__offset(318); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 동전 던지기 다음 게임 시작까지 대기 시간(밀리초 단위)
  public int HeadsAndTailsNextGameWaitTime { get { int o = __p.__offset(320); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 콘텐츠 시작 대기 및 동전 선택 단계에서 남은 시간이 붉은 색으로 변할때의 남은 시간
  public int HeadsAndTailsRemainedTimeRed { get { int o = __p.__offset(322); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 상품 가격 갱신 시간
  public int ShopCostRefreshTime { get { int o = __p.__offset(324); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 열매 NFT 가치
  public int FruitCalculationValue { get { int o = __p.__offset(326); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 메인 HUD 에 표시 될 스킬 ID
  public int FastRunSkillID { get { int o = __p.__offset(328); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 이속 증가 스킬의 버프 ID
  public int FastRunBuffID { get { int o = __p.__offset(330); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 서버 재 시작 시 에어 드랍 오브젝트 생성 딜레이 시간 (밀리초)
  public int AirDropReStartTime { get { int o = __p.__offset(332); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카메라 회전 감도 X 최소값
  public float CameraRotationValueMinX { get { int o = __p.__offset(334); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 카메라 회전 감도 Y 최소값
  public float CameraRotationValueMinY { get { int o = __p.__offset(336); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 카메라 회전 감도 X 기본값
  public float CameraRotationValueBasicX { get { int o = __p.__offset(338); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 카메라 회전 감도 Y 기본값
  public float CameraRotationValueBasicY { get { int o = __p.__offset(340); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 카메라 회전 감도 X 최대값
  public float CameraRotationValueMaxX { get { int o = __p.__offset(342); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 카메라 회전 감도 Y 최대값
  public float CameraRotationValueMaxY { get { int o = __p.__offset(344); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 퓨처헌터 상금 획득 메시지 ID
  public string TREASURELOTTERYRewardMessageKey { get { int o = __p.__offset(346); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTREASURELOTTERYRewardMessageKeyBytes() { return __p.__vector_as_span<byte>(346, 1); }
#else
  public ArraySegment<byte>? GetTREASURELOTTERYRewardMessageKeyBytes() { return __p.__vector_as_arraysegment(346); }
#endif
  public byte[] GetTREASURELOTTERYRewardMessageKeyArray() { return __p.__vector_as_array<byte>(346); }
  /// 퓨쳐헌터 상금 획득 메시지 출력 기준 값
  public int TREASURELOTTERYRewardMessageGet { get { int o = __p.__offset(348); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 홀덤 상금 획득 메시지 ID
  public string HoldemRewardMessageKey { get { int o = __p.__offset(350); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetHoldemRewardMessageKeyBytes() { return __p.__vector_as_span<byte>(350, 1); }
#else
  public ArraySegment<byte>? GetHoldemRewardMessageKeyBytes() { return __p.__vector_as_arraysegment(350); }
#endif
  public byte[] GetHoldemRewardMessageKeyArray() { return __p.__vector_as_array<byte>(350); }
  /// 홀덤 상금 획득 메시지 출력 기준 값
  public int HoldemRewardMessageGet { get { int o = __p.__offset(352); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 네임플레이트 배율 최소 거리
  public float UINamePlateZoomRatio { get { int o = __p.__offset(354); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 그리는 다른유저 캐릭터 최대 갯수
  public int RenderCharMaxCount { get { int o = __p.__offset(356); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 그리는 다른유저 캐릭터 최소 거리
  public float RenderCharMinDistance { get { int o = __p.__offset(358); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 그림자 출력 최대 거리
  public float RenderShadowMaxDistance { get { int o = __p.__offset(360); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  /// 공용 메일
  public int CommonRewardMail { get { int o = __p.__offset(362); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 퀘스트 메일
  public int QuestRewardMail { get { int o = __p.__offset(364); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 미션 메일
  public int MissionRewardMail { get { int o = __p.__offset(366); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartCommon(FlatBufferBuilder builder) { builder.StartTable(182); }
  public static void AddStaminaRecoveryCycle(FlatBufferBuilder builder, int StaminaRecoveryCycle) { builder.AddInt(0, StaminaRecoveryCycle, 0); }
  public static void AddStaminaRecoveryAmount(FlatBufferBuilder builder, int StaminaRecoveryAmount) { builder.AddInt(1, StaminaRecoveryAmount, 0); }
  public static void AddNOABRecoveryCycle(FlatBufferBuilder builder, int NOABRecoveryCycle) { builder.AddInt(2, NOABRecoveryCycle, 0); }
  public static void AddNOABRecoveryAmount(FlatBufferBuilder builder, int NOABRecoveryAmount) { builder.AddInt(3, NOABRecoveryAmount, 0); }
  public static void AddNOCSSlotNumberOpen(FlatBufferBuilder builder, VectorOffset NOCSSlotNumberOpenOffset) { builder.AddOffset(4, NOCSSlotNumberOpenOffset.Value, 0); }
  public static VectorOffset CreateNOCSSlotNumberOpenVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNOCSSlotNumberOpenVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNOCSSlotNumberOpenVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddNOCSSlotNumber(FlatBufferBuilder builder, VectorOffset NOCSSlotNumberOffset) { builder.AddOffset(5, NOCSSlotNumberOffset.Value, 0); }
  public static VectorOffset CreateNOCSSlotNumberVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNOCSSlotNumberVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNOCSSlotNumberVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTIREDIncreasingStatus(FlatBufferBuilder builder, int TIREDIncreasingStatus) { builder.AddInt(6, TIREDIncreasingStatus, 0); }
  public static void AddTIREDRecoveryCycle(FlatBufferBuilder builder, int TIREDRecoveryCycle) { builder.AddInt(7, TIREDRecoveryCycle, 0); }
  public static void AddTIREDRecoveryAmount(FlatBufferBuilder builder, int TIREDRecoveryAmount) { builder.AddInt(8, TIREDRecoveryAmount, 0); }
  public static void AddSLEEPSwitchStatus(FlatBufferBuilder builder, int SLEEPSwitchStatus) { builder.AddInt(9, SLEEPSwitchStatus, 0); }
  public static void AddSLEEPEndStatus(FlatBufferBuilder builder, int SLEEPEndStatus) { builder.AddInt(10, SLEEPEndStatus, 0); }
  public static void AddHudConditionIconMax(FlatBufferBuilder builder, int HudConditionIconMax) { builder.AddInt(11, HudConditionIconMax, 0); }
  public static void AddContentsResetTimeDay(FlatBufferBuilder builder, Offset<GDT.time> ContentsResetTimeDayOffset) { builder.AddStruct(12, ContentsResetTimeDayOffset.Value, 0); }
  public static void AddContentsResetTimeWeek(FlatBufferBuilder builder, Offset<GDT.time> ContentsResetTimeWeekOffset) { builder.AddStruct(13, ContentsResetTimeWeekOffset.Value, 0); }
  public static void AddContentsResetTimeMonthly(FlatBufferBuilder builder, Offset<GDT.time> ContentsResetTimeMonthlyOffset) { builder.AddStruct(14, ContentsResetTimeMonthlyOffset.Value, 0); }
  public static void AddCharacterDeleteTime(FlatBufferBuilder builder, int CharacterDeleteTime) { builder.AddInt(15, CharacterDeleteTime, 0); }
  public static void AddCharacterCreateMapID(FlatBufferBuilder builder, int CharacterCreateMapID) { builder.AddInt(16, CharacterCreateMapID, 0); }
  public static void AddCharacterNickNameMin(FlatBufferBuilder builder, int CharacterNickNameMin) { builder.AddInt(17, CharacterNickNameMin, 0); }
  public static void AddCharacterNickNameMax(FlatBufferBuilder builder, int CharacterNickNameMax) { builder.AddInt(18, CharacterNickNameMax, 0); }
  public static void AddCharacterCreateSpawnGroup(FlatBufferBuilder builder, int CharacterCreateSpawnGroup) { builder.AddInt(19, CharacterCreateSpawnGroup, 0); }
  public static void AddEventCoinAirDropStartTime(FlatBufferBuilder builder, Offset<GDT.time> EventCoinAirDropStartTimeOffset) { builder.AddStruct(20, EventCoinAirDropStartTimeOffset.Value, 0); }
  public static void AddEventCoinAirDrop10Min(FlatBufferBuilder builder, int EventCoinAirDrop10Min) { builder.AddInt(21, EventCoinAirDrop10Min, 0); }
  public static void AddEventCoinAirDrop5Min(FlatBufferBuilder builder, int EventCoinAirDrop5Min) { builder.AddInt(22, EventCoinAirDrop5Min, 0); }
  public static void AddEventCoinAirDrop1Min(FlatBufferBuilder builder, int EventCoinAirDrop1Min) { builder.AddInt(23, EventCoinAirDrop1Min, 0); }
  public static void AddEventCoinAirDropEnd(FlatBufferBuilder builder, int EventCoinAirDropEnd) { builder.AddInt(24, EventCoinAirDropEnd, 0); }
  public static void AddEventCoinAirDropCount(FlatBufferBuilder builder, int EventCoinAirDropCount) { builder.AddInt(25, EventCoinAirDropCount, 0); }
  public static void AddMailNormalMaxCount(FlatBufferBuilder builder, int MailNormalMaxCount) { builder.AddInt(26, MailNormalMaxCount, 0); }
  public static void AddMailSystemMaxCount(FlatBufferBuilder builder, int MailSystemMaxCount) { builder.AddInt(27, MailSystemMaxCount, 0); }
  public static void AddFriendRequestListMaxCount(FlatBufferBuilder builder, int FriendRequestListMaxCount) { builder.AddInt(28, FriendRequestListMaxCount, 0); }
  public static void AddFriendFriendListMaxCount(FlatBufferBuilder builder, int FriendFriendListMaxCount) { builder.AddInt(29, FriendFriendListMaxCount, 0); }
  public static void AddFriendReceptionListMaxCount(FlatBufferBuilder builder, int FriendReceptionListMaxCount) { builder.AddInt(30, FriendReceptionListMaxCount, 0); }
  public static void AddFriendBlockListMaxCount(FlatBufferBuilder builder, int FriendBlockListMaxCount) { builder.AddInt(31, FriendBlockListMaxCount, 0); }
  public static void AddFriendRecommendListMaxCount(FlatBufferBuilder builder, int FriendRecommendListMaxCount) { builder.AddInt(32, FriendRecommendListMaxCount, 0); }
  public static void AddFriendAcceptanceTime(FlatBufferBuilder builder, int FriendAcceptanceTime) { builder.AddInt(33, FriendAcceptanceTime, 0); }
  public static void AddFriendFriendShipPointSendNum(FlatBufferBuilder builder, int FriendFriendShipPointSendNum) { builder.AddInt(34, FriendFriendShipPointSendNum, 0); }
  public static void AddFriendFriendShipPointSendMax(FlatBufferBuilder builder, int FriendFriendShipPointSendMax) { builder.AddInt(35, FriendFriendShipPointSendMax, 0); }
  public static void AddFriendLikabilityMax(FlatBufferBuilder builder, int FriendLikabilityMax) { builder.AddInt(36, FriendLikabilityMax, 0); }
  public static void AddFriendRefreshCoolTime(FlatBufferBuilder builder, int FriendRefreshCoolTime) { builder.AddInt(37, FriendRefreshCoolTime, 0); }
  public static void AddFriendRecommendTier(FlatBufferBuilder builder, int FriendRecommendTier) { builder.AddInt(38, FriendRecommendTier, 0); }
  public static void AddFriendRecommendLevel(FlatBufferBuilder builder, int FriendRecommendLevel) { builder.AddInt(39, FriendRecommendLevel, 0); }
  public static void AddChattingRepeatPenaltyTime(FlatBufferBuilder builder, int ChattingRepeatPenaltyTime) { builder.AddInt(40, ChattingRepeatPenaltyTime, 0); }
  public static void AddChattingSlangPenaltyTime(FlatBufferBuilder builder, int ChattingSlangPenaltyTime) { builder.AddInt(41, ChattingSlangPenaltyTime, 0); }
  public static void AddChattingWorldOutputRadius(FlatBufferBuilder builder, int ChattingWorldOutputRadius) { builder.AddInt(42, ChattingWorldOutputRadius, 0); }
  public static void AddChattingMaxWord(FlatBufferBuilder builder, int ChattingMaxWord) { builder.AddInt(43, ChattingMaxWord, 0); }
  public static void AddChattingPopupMaxList(FlatBufferBuilder builder, int ChattingPopupMaxList) { builder.AddInt(44, ChattingPopupMaxList, 0); }
  public static void AddChattingMainHudMaxList(FlatBufferBuilder builder, int ChattingMainHudMaxList) { builder.AddInt(45, ChattingMainHudMaxList, 0); }
  public static void AddSpeechBalloonLineChange(FlatBufferBuilder builder, int SpeechBalloonLineChange) { builder.AddInt(46, SpeechBalloonLineChange, 0); }
  public static void AddSpeechBalloonTime(FlatBufferBuilder builder, float SpeechBalloonTime) { builder.AddFloat(47, SpeechBalloonTime, 0.0f); }
  public static void AddCharacterPrimaryCapabilityMAXSTR(FlatBufferBuilder builder, int CharacterPrimaryCapabilityMAXSTR) { builder.AddInt(48, CharacterPrimaryCapabilityMAXSTR, 0); }
  public static void AddCharacterPrimaryCapabilityMAXDEX(FlatBufferBuilder builder, int CharacterPrimaryCapabilityMAXDEX) { builder.AddInt(49, CharacterPrimaryCapabilityMAXDEX, 0); }
  public static void AddCharacterPrimaryCapabilityMAXCON(FlatBufferBuilder builder, int CharacterPrimaryCapabilityMAXCON) { builder.AddInt(50, CharacterPrimaryCapabilityMAXCON, 0); }
  public static void AddCharacterPrimaryCapabilityMAXWIS(FlatBufferBuilder builder, int CharacterPrimaryCapabilityMAXWIS) { builder.AddInt(51, CharacterPrimaryCapabilityMAXWIS, 0); }
  public static void AddCharacterPrimaryCapabilityMAXINT(FlatBufferBuilder builder, int CharacterPrimaryCapabilityMAXINT) { builder.AddInt(52, CharacterPrimaryCapabilityMAXINT, 0); }
  public static void AddCharacterPrimaryCapabilityMAXSEN(FlatBufferBuilder builder, int CharacterPrimaryCapabilityMAXSEN) { builder.AddInt(53, CharacterPrimaryCapabilityMAXSEN, 0); }
  public static void AddUSINGITEMGLOBALCOOLTIME(FlatBufferBuilder builder, int USINGITEMGLOBALCOOLTIME) { builder.AddInt(54, USINGITEMGLOBALCOOLTIME, 0); }
  public static void AddMainQuestMaxCount(FlatBufferBuilder builder, int MainQuestMaxCount) { builder.AddInt(55, MainQuestMaxCount, 0); }
  public static void AddSubQuestMaxCount(FlatBufferBuilder builder, int SubQuestMaxCount) { builder.AddInt(56, SubQuestMaxCount, 0); }
  public static void AddScriptSpeed01(FlatBufferBuilder builder, float ScriptSpeed01) { builder.AddFloat(57, ScriptSpeed01, 0.0f); }
  public static void AddScriptSpeed02(FlatBufferBuilder builder, float ScriptSpeed02) { builder.AddFloat(58, ScriptSpeed02, 0.0f); }
  public static void AddScriptSpeed03(FlatBufferBuilder builder, float ScriptSpeed03) { builder.AddFloat(59, ScriptSpeed03, 0.0f); }
  public static void AddScriptAutoTime(FlatBufferBuilder builder, int ScriptAutoTime) { builder.AddInt(60, ScriptAutoTime, 0); }
  public static void AddQuestHudInfoCheckCount(FlatBufferBuilder builder, int QuestHudInfoCheckCount) { builder.AddInt(61, QuestHudInfoCheckCount, 0); }
  public static void AddVehicleRideEffect(FlatBufferBuilder builder, int VehicleRideEffect) { builder.AddInt(62, VehicleRideEffect, 0); }
  public static void AddVehicleUnloadEffect(FlatBufferBuilder builder, int VehicleUnloadEffect) { builder.AddInt(63, VehicleUnloadEffect, 0); }
  public static void AddMailRefreshCoolTime(FlatBufferBuilder builder, int MailRefreshCoolTime) { builder.AddInt(64, MailRefreshCoolTime, 0); }
  public static void AddSkillGLOBALCOOLTIME(FlatBufferBuilder builder, int SkillGLOBALCOOLTIME) { builder.AddInt(65, SkillGLOBALCOOLTIME, 0); }
  public static void AddSkillTargetPullSpeed(FlatBufferBuilder builder, float SkillTargetPullSpeed) { builder.AddFloat(66, SkillTargetPullSpeed, 0.0f); }
  public static void AddPlatformGameEnterCount(FlatBufferBuilder builder, int PlatformGameEnterCount) { builder.AddInt(67, PlatformGameEnterCount, 0); }
  public static void AddAWMTierExp(FlatBufferBuilder builder, float AWMTierExp) { builder.AddFloat(68, AWMTierExp, 0.0f); }
  public static void AddPlatformGameMatchingCount(FlatBufferBuilder builder, int PlatformGameMatchingCount) { builder.AddInt(69, PlatformGameMatchingCount, 0); }
  public static void AddPlatformGameEndCount(FlatBufferBuilder builder, int PlatformGameEndCount) { builder.AddInt(70, PlatformGameEndCount, 0); }
  public static void AddPlatformGameRank1Animation(FlatBufferBuilder builder, int PlatformGameRank1Animation) { builder.AddInt(71, PlatformGameRank1Animation, 0); }
  public static void AddPlatformGameRank2Animation(FlatBufferBuilder builder, int PlatformGameRank2Animation) { builder.AddInt(72, PlatformGameRank2Animation, 0); }
  public static void AddPlatformGameRank3Animation(FlatBufferBuilder builder, int PlatformGameRank3Animation) { builder.AddInt(73, PlatformGameRank3Animation, 0); }
  public static void AddPlatformGameRank1Position(FlatBufferBuilder builder, Offset<GDT.vector3> PlatformGameRank1PositionOffset) { builder.AddStruct(74, PlatformGameRank1PositionOffset.Value, 0); }
  public static void AddPlatformGameRank2Position(FlatBufferBuilder builder, Offset<GDT.vector3> PlatformGameRank2PositionOffset) { builder.AddStruct(75, PlatformGameRank2PositionOffset.Value, 0); }
  public static void AddPlatformGameRank3Position(FlatBufferBuilder builder, Offset<GDT.vector3> PlatformGameRank3PositionOffset) { builder.AddStruct(76, PlatformGameRank3PositionOffset.Value, 0); }
  public static void AddPlatformGameResultCameraPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PlatformGameResultCameraPositionOffset) { builder.AddStruct(77, PlatformGameResultCameraPositionOffset.Value, 0); }
  public static void AddPlatformGameSinglePosition(FlatBufferBuilder builder, Offset<GDT.vector3> PlatformGameSinglePositionOffset) { builder.AddStruct(78, PlatformGameSinglePositionOffset.Value, 0); }
  public static void AddPlatformGameResultCameraPositionSingle(FlatBufferBuilder builder, Offset<GDT.vector3> PlatformGameResultCameraPositionSingleOffset) { builder.AddStruct(79, PlatformGameResultCameraPositionSingleOffset.Value, 0); }
  public static void AddPlatformGameReverseDirectionTime(FlatBufferBuilder builder, int PlatformGameReverseDirectionTime) { builder.AddInt(80, PlatformGameReverseDirectionTime, 0); }
  public static void AddPlatformGameRespawnTime(FlatBufferBuilder builder, int PlatformGameRespawnTime) { builder.AddInt(81, PlatformGameRespawnTime, 0); }
  public static void AddPlatformGameReversePlayAngle(FlatBufferBuilder builder, int PlatformGameReversePlayAngle) { builder.AddInt(82, PlatformGameReversePlayAngle, 0); }
  public static void AddPlatformGameTargetingEffect(FlatBufferBuilder builder, int PlatformGameTargetingEffect) { builder.AddInt(83, PlatformGameTargetingEffect, 0); }
  public static void AddPlatformGameGetItemEffect(FlatBufferBuilder builder, int PlatformGameGetItemEffect) { builder.AddInt(84, PlatformGameGetItemEffect, 0); }
  public static void AddPlatformGameStartCoolTime(FlatBufferBuilder builder, int PlatformGameStartCoolTime) { builder.AddInt(85, PlatformGameStartCoolTime, 0); }
  public static void AddPlatformGameTimeOut(FlatBufferBuilder builder, int PlatformGameTimeOut) { builder.AddInt(86, PlatformGameTimeOut, 0); }
  public static void AddPlatformGameTimeOutMailID(FlatBufferBuilder builder, int PlatformGameTimeOutMailID) { builder.AddInt(87, PlatformGameTimeOutMailID, 0); }
  public static void AddSceneTypeIntroBGM(FlatBufferBuilder builder, int SceneTypeIntroBGM) { builder.AddInt(88, SceneTypeIntroBGM, 0); }
  public static void AddSceneTypeBootstrapBGM(FlatBufferBuilder builder, int SceneTypeBootstrapBGM) { builder.AddInt(89, SceneTypeBootstrapBGM, 0); }
  public static void AddSceneTypeLoginBGM(FlatBufferBuilder builder, int SceneTypeLoginBGM) { builder.AddInt(90, SceneTypeLoginBGM, 0); }
  public static void AddSceneTypeLobbyBGM(FlatBufferBuilder builder, int SceneTypeLobbyBGM) { builder.AddInt(91, SceneTypeLobbyBGM, 0); }
  public static void AddSceneTypeSceneLoadBGM(FlatBufferBuilder builder, int SceneTypeSceneLoadBGM) { builder.AddInt(92, SceneTypeSceneLoadBGM, 0); }
  public static void AddLoginWordMaxCount(FlatBufferBuilder builder, int LoginWordMaxCount) { builder.AddInt(93, LoginWordMaxCount, 0); }
  public static void AddLoginWordMinCount(FlatBufferBuilder builder, int LoginWordMinCount) { builder.AddInt(94, LoginWordMinCount, 0); }
  public static void AddCharacterPlayIdleTime(FlatBufferBuilder builder, int CharacterPlayIdleTime) { builder.AddInt(95, CharacterPlayIdleTime, 0); }
  public static void AddCharacterPlayIdleRate(FlatBufferBuilder builder, int CharacterPlayIdleRate) { builder.AddInt(96, CharacterPlayIdleRate, 0); }
  public static void AddCharacterPlayIdleId(FlatBufferBuilder builder, int CharacterPlayIdleId) { builder.AddInt(97, CharacterPlayIdleId, 0); }
  public static void AddDeviceDisconnectCheckTime(FlatBufferBuilder builder, int DeviceDisconnectCheckTime) { builder.AddInt(98, DeviceDisconnectCheckTime, 0); }
  public static void AddDeviceReconnectTime(FlatBufferBuilder builder, int DeviceReconnectTime) { builder.AddInt(99, DeviceReconnectTime, 0); }
  public static void AddDeviceSuspendingCheckTime(FlatBufferBuilder builder, int DeviceSuspendingCheckTime) { builder.AddInt(100, DeviceSuspendingCheckTime, 0); }
  public static void AddDeviceReconnectCount(FlatBufferBuilder builder, int DeviceReconnectCount) { builder.AddInt(101, DeviceReconnectCount, 0); }
  public static void AddCharacterBodyFormValue(FlatBufferBuilder builder, int CharacterBodyFormValue) { builder.AddInt(102, CharacterBodyFormValue, 0); }
  public static void AddCharacterTailFormValue(FlatBufferBuilder builder, int CharacterTailFormValue) { builder.AddInt(103, CharacterTailFormValue, 0); }
  public static void AddCharacterPatternValue(FlatBufferBuilder builder, int CharacterPatternValue) { builder.AddInt(104, CharacterPatternValue, 0); }
  public static void AddCharacterJumpPowerValue(FlatBufferBuilder builder, float CharacterJumpPowerValue) { builder.AddFloat(105, CharacterJumpPowerValue, 0.0f); }
  public static void AddCharacterGravityValue(FlatBufferBuilder builder, float CharacterGravityValue) { builder.AddFloat(106, CharacterGravityValue, 0.0f); }
  public static void AddChannelTryAccessTime(FlatBufferBuilder builder, int ChannelTryAccessTime) { builder.AddInt(107, ChannelTryAccessTime, 0); }
  public static void AddChannelRefreshTime(FlatBufferBuilder builder, int ChannelRefreshTime) { builder.AddInt(108, ChannelRefreshTime, 0); }
  public static void AddChannelStateColor01(FlatBufferBuilder builder, StringOffset ChannelStateColor01Offset) { builder.AddOffset(109, ChannelStateColor01Offset.Value, 0); }
  public static void AddChannelStateColor02(FlatBufferBuilder builder, StringOffset ChannelStateColor02Offset) { builder.AddOffset(110, ChannelStateColor02Offset.Value, 0); }
  public static void AddChannelStateColor03(FlatBufferBuilder builder, StringOffset ChannelStateColor03Offset) { builder.AddOffset(111, ChannelStateColor03Offset.Value, 0); }
  public static void AddChannelStateColor04(FlatBufferBuilder builder, StringOffset ChannelStateColor04Offset) { builder.AddOffset(112, ChannelStateColor04Offset.Value, 0); }
  public static void AddChannelRecommendCount(FlatBufferBuilder builder, int ChannelRecommendCount) { builder.AddInt(113, ChannelRecommendCount, 0); }
  public static void AddPlatformGameStartCountDown5SFX(FlatBufferBuilder builder, int PlatformGameStartCountDown5SFX) { builder.AddInt(114, PlatformGameStartCountDown5SFX, 0); }
  public static void AddPlatformGameStartCountDown4SFX(FlatBufferBuilder builder, int PlatformGameStartCountDown4SFX) { builder.AddInt(115, PlatformGameStartCountDown4SFX, 0); }
  public static void AddPlatformGameStartCountDown3SFX(FlatBufferBuilder builder, int PlatformGameStartCountDown3SFX) { builder.AddInt(116, PlatformGameStartCountDown3SFX, 0); }
  public static void AddPlatformGameStartCountDown2SFX(FlatBufferBuilder builder, int PlatformGameStartCountDown2SFX) { builder.AddInt(117, PlatformGameStartCountDown2SFX, 0); }
  public static void AddPlatformGameStartCountDown1SFX(FlatBufferBuilder builder, int PlatformGameStartCountDown1SFX) { builder.AddInt(118, PlatformGameStartCountDown1SFX, 0); }
  public static void AddPlatformGameStartCountDownGoSFX(FlatBufferBuilder builder, int PlatformGameStartCountDownGoSFX) { builder.AddInt(119, PlatformGameStartCountDownGoSFX, 0); }
  public static void AddCharacterUIShowMaxCount(FlatBufferBuilder builder, int CharacterUIShowMaxCount) { builder.AddInt(120, CharacterUIShowMaxCount, 0); }
  public static void AddWithdrawLimeTimeStart(FlatBufferBuilder builder, Offset<GDT.time> WithdrawLimeTimeStartOffset) { builder.AddStruct(121, WithdrawLimeTimeStartOffset.Value, 0); }
  public static void AddWithdrawLimeTimeEnd(FlatBufferBuilder builder, Offset<GDT.time> WithdrawLimeTimeEndOffset) { builder.AddStruct(122, WithdrawLimeTimeEndOffset.Value, 0); }
  public static void AddCoinWithdrawLimit(FlatBufferBuilder builder, int CoinWithdrawLimit) { builder.AddInt(123, CoinWithdrawLimit, 0); }
  public static void AddNFTWithdrawLimit(FlatBufferBuilder builder, int NFTWithdrawLimit) { builder.AddInt(124, NFTWithdrawLimit, 0); }
  public static void AddNFTTransferWaitingTime(FlatBufferBuilder builder, int NFTTransferWaitingTime) { builder.AddInt(125, NFTTransferWaitingTime, 0); }
  public static void AddNFTTransmitFee(FlatBufferBuilder builder, int NFTTransmitFee) { builder.AddInt(126, NFTTransmitFee, 0); }
  public static void AddNFTOpenseaAddressKei(FlatBufferBuilder builder, StringOffset NFTOpenseaAddressKeiOffset) { builder.AddOffset(127, NFTOpenseaAddressKeiOffset.Value, 0); }
  public static void AddEmoticonTime(FlatBufferBuilder builder, float EmoticonTime) { builder.AddFloat(128, EmoticonTime, 0.0f); }
  public static void AddEmoticonCoolTime(FlatBufferBuilder builder, int EmoticonCoolTime) { builder.AddInt(129, EmoticonCoolTime, 0); }
  public static void AddEmoticonRepeatLimit(FlatBufferBuilder builder, int EmoticonRepeatLimit) { builder.AddInt(130, EmoticonRepeatLimit, 0); }
  public static void AddTierExchangeEXP(FlatBufferBuilder builder, float TierExchangeEXP) { builder.AddFloat(131, TierExchangeEXP, 0.0f); }
  public static void AddExchangeRefreshCoolTime(FlatBufferBuilder builder, int ExchangeRefreshCoolTime) { builder.AddInt(132, ExchangeRefreshCoolTime, 0); }
  public static void AddExchangeDepositCoolTime(FlatBufferBuilder builder, int ExchangeDepositCoolTime) { builder.AddInt(133, ExchangeDepositCoolTime, 0); }
  public static void AddExpConstantValue(FlatBufferBuilder builder, int ExpConstantValue) { builder.AddInt(134, ExpConstantValue, 0); }
  public static void AddItemEquipColor(FlatBufferBuilder builder, StringOffset ItemEquipColorOffset) { builder.AddOffset(135, ItemEquipColorOffset.Value, 0); }
  public static void AddItemEquipPossibleColor(FlatBufferBuilder builder, StringOffset ItemEquipPossibleColorOffset) { builder.AddOffset(136, ItemEquipPossibleColorOffset.Value, 0); }
  public static void AddItemEquipImpossibleColor(FlatBufferBuilder builder, StringOffset ItemEquipImpossibleColorOffset) { builder.AddOffset(137, ItemEquipImpossibleColorOffset.Value, 0); }
  public static void AddItemEquipTierImpossibleColor(FlatBufferBuilder builder, StringOffset ItemEquipTierImpossibleColorOffset) { builder.AddOffset(138, ItemEquipTierImpossibleColorOffset.Value, 0); }
  public static void AddAutoMoveDistanceTextColor(FlatBufferBuilder builder, StringOffset AutoMoveDistanceTextColorOffset) { builder.AddOffset(139, AutoMoveDistanceTextColorOffset.Value, 0); }
  public static void AddAutoMoveCameraTime(FlatBufferBuilder builder, float AutoMoveCameraTime) { builder.AddFloat(140, AutoMoveCameraTime, 0.0f); }
  public static void AddAutoMoveCameraViewX(FlatBufferBuilder builder, float AutoMoveCameraViewX) { builder.AddFloat(141, AutoMoveCameraViewX, 0.0f); }
  public static void AddAutoMoveCameraViewY(FlatBufferBuilder builder, float AutoMoveCameraViewY) { builder.AddFloat(142, AutoMoveCameraViewY, 0.0f); }
  public static void AddAutoMoveCameraViewZ(FlatBufferBuilder builder, float AutoMoveCameraViewZ) { builder.AddFloat(143, AutoMoveCameraViewZ, 0.0f); }
  public static void AddAutoMoveCameraDistance(FlatBufferBuilder builder, float AutoMoveCameraDistance) { builder.AddFloat(144, AutoMoveCameraDistance, 0.0f); }
  public static void AddHoldemFreeCashRefill(FlatBufferBuilder builder, int HoldemFreeCashRefill) { builder.AddInt(145, HoldemFreeCashRefill, 0); }
  public static void AddHoldemFreeRefill(FlatBufferBuilder builder, int HoldemFreeRefill) { builder.AddInt(146, HoldemFreeRefill, 0); }
  public static void AddHoldemCurrencyFree(FlatBufferBuilder builder, GDT.CurrencySubType HoldemCurrencyFree) { builder.AddByte(147, (byte)HoldemCurrencyFree, 0); }
  public static void AddHoldemCurrencyPay(FlatBufferBuilder builder, GDT.CurrencySubType HoldemCurrencyPay) { builder.AddByte(148, (byte)HoldemCurrencyPay, 0); }
  public static void AddHoldemGameStartMin(FlatBufferBuilder builder, int HoldemGameStartMin) { builder.AddInt(149, HoldemGameStartMin, 0); }
  public static void AddHoldemJackpotBaseAmount(FlatBufferBuilder builder, int HoldemJackpotBaseAmount) { builder.AddInt(150, HoldemJackpotBaseAmount, 0); }
  public static void AddHoldemNextGameWaitTime(FlatBufferBuilder builder, int HoldemNextGameWaitTime) { builder.AddInt(151, HoldemNextGameWaitTime, 0); }
  public static void AddPopupChatColor(FlatBufferBuilder builder, StringOffset PopupChatColorOffset) { builder.AddOffset(152, PopupChatColorOffset.Value, 0); }
  public static void AddTreasureLotteryAccrueRate(FlatBufferBuilder builder, float TreasureLotteryAccrueRate) { builder.AddFloat(153, TreasureLotteryAccrueRate, 0.0f); }
  public static void AddTreasureLotteryJackpotRenewalTime(FlatBufferBuilder builder, int TreasureLotteryJackpotRenewalTime) { builder.AddInt(154, TreasureLotteryJackpotRenewalTime, 0); }
  public static void AddTreasureLotteryJackpotSound(FlatBufferBuilder builder, int TreasureLotteryJackpotSound) { builder.AddInt(155, TreasureLotteryJackpotSound, 0); }
  public static void AddTreasureLotteryProgressPopupResetTime(FlatBufferBuilder builder, int TreasureLotteryProgressPopupResetTime) { builder.AddInt(156, TreasureLotteryProgressPopupResetTime, 0); }
  public static void AddTreasureLotteryButtonDelayTime(FlatBufferBuilder builder, int TreasureLotteryButtonDelayTime) { builder.AddInt(157, TreasureLotteryButtonDelayTime, 0); }
  public static void AddHeadsAndTailsNextGameWaitTime(FlatBufferBuilder builder, int HeadsAndTailsNextGameWaitTime) { builder.AddInt(158, HeadsAndTailsNextGameWaitTime, 0); }
  public static void AddHeadsAndTailsRemainedTimeRed(FlatBufferBuilder builder, int HeadsAndTailsRemainedTimeRed) { builder.AddInt(159, HeadsAndTailsRemainedTimeRed, 0); }
  public static void AddShopCostRefreshTime(FlatBufferBuilder builder, int ShopCostRefreshTime) { builder.AddInt(160, ShopCostRefreshTime, 0); }
  public static void AddFruitCalculationValue(FlatBufferBuilder builder, int FruitCalculationValue) { builder.AddInt(161, FruitCalculationValue, 0); }
  public static void AddFastRunSkillID(FlatBufferBuilder builder, int FastRunSkillID) { builder.AddInt(162, FastRunSkillID, 0); }
  public static void AddFastRunBuffID(FlatBufferBuilder builder, int FastRunBuffID) { builder.AddInt(163, FastRunBuffID, 0); }
  public static void AddAirDropReStartTime(FlatBufferBuilder builder, int AirDropReStartTime) { builder.AddInt(164, AirDropReStartTime, 0); }
  public static void AddCameraRotationValueMinX(FlatBufferBuilder builder, float CameraRotationValueMinX) { builder.AddFloat(165, CameraRotationValueMinX, 0.0f); }
  public static void AddCameraRotationValueMinY(FlatBufferBuilder builder, float CameraRotationValueMinY) { builder.AddFloat(166, CameraRotationValueMinY, 0.0f); }
  public static void AddCameraRotationValueBasicX(FlatBufferBuilder builder, float CameraRotationValueBasicX) { builder.AddFloat(167, CameraRotationValueBasicX, 0.0f); }
  public static void AddCameraRotationValueBasicY(FlatBufferBuilder builder, float CameraRotationValueBasicY) { builder.AddFloat(168, CameraRotationValueBasicY, 0.0f); }
  public static void AddCameraRotationValueMaxX(FlatBufferBuilder builder, float CameraRotationValueMaxX) { builder.AddFloat(169, CameraRotationValueMaxX, 0.0f); }
  public static void AddCameraRotationValueMaxY(FlatBufferBuilder builder, float CameraRotationValueMaxY) { builder.AddFloat(170, CameraRotationValueMaxY, 0.0f); }
  public static void AddTREASURELOTTERYRewardMessageKey(FlatBufferBuilder builder, StringOffset TREASURELOTTERYRewardMessageKeyOffset) { builder.AddOffset(171, TREASURELOTTERYRewardMessageKeyOffset.Value, 0); }
  public static void AddTREASURELOTTERYRewardMessageGet(FlatBufferBuilder builder, int TREASURELOTTERYRewardMessageGet) { builder.AddInt(172, TREASURELOTTERYRewardMessageGet, 0); }
  public static void AddHoldemRewardMessageKey(FlatBufferBuilder builder, StringOffset HoldemRewardMessageKeyOffset) { builder.AddOffset(173, HoldemRewardMessageKeyOffset.Value, 0); }
  public static void AddHoldemRewardMessageGet(FlatBufferBuilder builder, int HoldemRewardMessageGet) { builder.AddInt(174, HoldemRewardMessageGet, 0); }
  public static void AddUINamePlateZoomRatio(FlatBufferBuilder builder, float UINamePlateZoomRatio) { builder.AddFloat(175, UINamePlateZoomRatio, 0.0f); }
  public static void AddRenderCharMaxCount(FlatBufferBuilder builder, int RenderCharMaxCount) { builder.AddInt(176, RenderCharMaxCount, 0); }
  public static void AddRenderCharMinDistance(FlatBufferBuilder builder, float RenderCharMinDistance) { builder.AddFloat(177, RenderCharMinDistance, 0.0f); }
  public static void AddRenderShadowMaxDistance(FlatBufferBuilder builder, float RenderShadowMaxDistance) { builder.AddFloat(178, RenderShadowMaxDistance, 0.0f); }
  public static void AddCommonRewardMail(FlatBufferBuilder builder, int CommonRewardMail) { builder.AddInt(179, CommonRewardMail, 0); }
  public static void AddQuestRewardMail(FlatBufferBuilder builder, int QuestRewardMail) { builder.AddInt(180, QuestRewardMail, 0); }
  public static void AddMissionRewardMail(FlatBufferBuilder builder, int MissionRewardMail) { builder.AddInt(181, MissionRewardMail, 0); }
  public static Offset<GDT.Common> EndCommon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Common>(o);
  }
  public CommonT UnPack() {
    var _o = new CommonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CommonT _o) {
    _o.StaminaRecoveryCycle = this.StaminaRecoveryCycle;
    _o.StaminaRecoveryAmount = this.StaminaRecoveryAmount;
    _o.NOABRecoveryCycle = this.NOABRecoveryCycle;
    _o.NOABRecoveryAmount = this.NOABRecoveryAmount;
    _o.NOCSSlotNumberOpen = new List<int>();
    for (var _j = 0; _j < this.NOCSSlotNumberOpenLength; ++_j) {_o.NOCSSlotNumberOpen.Add(this.NOCSSlotNumberOpen(_j));}
    _o.NOCSSlotNumber = new List<int>();
    for (var _j = 0; _j < this.NOCSSlotNumberLength; ++_j) {_o.NOCSSlotNumber.Add(this.NOCSSlotNumber(_j));}
    _o.TIREDIncreasingStatus = this.TIREDIncreasingStatus;
    _o.TIREDRecoveryCycle = this.TIREDRecoveryCycle;
    _o.TIREDRecoveryAmount = this.TIREDRecoveryAmount;
    _o.SLEEPSwitchStatus = this.SLEEPSwitchStatus;
    _o.SLEEPEndStatus = this.SLEEPEndStatus;
    _o.HudConditionIconMax = this.HudConditionIconMax;
    _o.ContentsResetTimeDay = this.ContentsResetTimeDay.HasValue ? this.ContentsResetTimeDay.Value.UnPack() : null;
    _o.ContentsResetTimeWeek = this.ContentsResetTimeWeek.HasValue ? this.ContentsResetTimeWeek.Value.UnPack() : null;
    _o.ContentsResetTimeMonthly = this.ContentsResetTimeMonthly.HasValue ? this.ContentsResetTimeMonthly.Value.UnPack() : null;
    _o.CharacterDeleteTime = this.CharacterDeleteTime;
    _o.CharacterCreateMapID = this.CharacterCreateMapID;
    _o.CharacterNickNameMin = this.CharacterNickNameMin;
    _o.CharacterNickNameMax = this.CharacterNickNameMax;
    _o.CharacterCreateSpawnGroup = this.CharacterCreateSpawnGroup;
    _o.EventCoinAirDropStartTime = this.EventCoinAirDropStartTime.HasValue ? this.EventCoinAirDropStartTime.Value.UnPack() : null;
    _o.EventCoinAirDrop10Min = this.EventCoinAirDrop10Min;
    _o.EventCoinAirDrop5Min = this.EventCoinAirDrop5Min;
    _o.EventCoinAirDrop1Min = this.EventCoinAirDrop1Min;
    _o.EventCoinAirDropEnd = this.EventCoinAirDropEnd;
    _o.EventCoinAirDropCount = this.EventCoinAirDropCount;
    _o.MailNormalMaxCount = this.MailNormalMaxCount;
    _o.MailSystemMaxCount = this.MailSystemMaxCount;
    _o.FriendRequestListMaxCount = this.FriendRequestListMaxCount;
    _o.FriendFriendListMaxCount = this.FriendFriendListMaxCount;
    _o.FriendReceptionListMaxCount = this.FriendReceptionListMaxCount;
    _o.FriendBlockListMaxCount = this.FriendBlockListMaxCount;
    _o.FriendRecommendListMaxCount = this.FriendRecommendListMaxCount;
    _o.FriendAcceptanceTime = this.FriendAcceptanceTime;
    _o.FriendFriendShipPointSendNum = this.FriendFriendShipPointSendNum;
    _o.FriendFriendShipPointSendMax = this.FriendFriendShipPointSendMax;
    _o.FriendLikabilityMax = this.FriendLikabilityMax;
    _o.FriendRefreshCoolTime = this.FriendRefreshCoolTime;
    _o.FriendRecommendTier = this.FriendRecommendTier;
    _o.FriendRecommendLevel = this.FriendRecommendLevel;
    _o.ChattingRepeatPenaltyTime = this.ChattingRepeatPenaltyTime;
    _o.ChattingSlangPenaltyTime = this.ChattingSlangPenaltyTime;
    _o.ChattingWorldOutputRadius = this.ChattingWorldOutputRadius;
    _o.ChattingMaxWord = this.ChattingMaxWord;
    _o.ChattingPopupMaxList = this.ChattingPopupMaxList;
    _o.ChattingMainHudMaxList = this.ChattingMainHudMaxList;
    _o.SpeechBalloonLineChange = this.SpeechBalloonLineChange;
    _o.SpeechBalloonTime = this.SpeechBalloonTime;
    _o.CharacterPrimaryCapabilityMAXSTR = this.CharacterPrimaryCapabilityMAXSTR;
    _o.CharacterPrimaryCapabilityMAXDEX = this.CharacterPrimaryCapabilityMAXDEX;
    _o.CharacterPrimaryCapabilityMAXCON = this.CharacterPrimaryCapabilityMAXCON;
    _o.CharacterPrimaryCapabilityMAXWIS = this.CharacterPrimaryCapabilityMAXWIS;
    _o.CharacterPrimaryCapabilityMAXINT = this.CharacterPrimaryCapabilityMAXINT;
    _o.CharacterPrimaryCapabilityMAXSEN = this.CharacterPrimaryCapabilityMAXSEN;
    _o.USINGITEMGLOBALCOOLTIME = this.USINGITEMGLOBALCOOLTIME;
    _o.MainQuestMaxCount = this.MainQuestMaxCount;
    _o.SubQuestMaxCount = this.SubQuestMaxCount;
    _o.ScriptSpeed01 = this.ScriptSpeed01;
    _o.ScriptSpeed02 = this.ScriptSpeed02;
    _o.ScriptSpeed03 = this.ScriptSpeed03;
    _o.ScriptAutoTime = this.ScriptAutoTime;
    _o.QuestHudInfoCheckCount = this.QuestHudInfoCheckCount;
    _o.VehicleRideEffect = this.VehicleRideEffect;
    _o.VehicleUnloadEffect = this.VehicleUnloadEffect;
    _o.MailRefreshCoolTime = this.MailRefreshCoolTime;
    _o.SkillGLOBALCOOLTIME = this.SkillGLOBALCOOLTIME;
    _o.SkillTargetPullSpeed = this.SkillTargetPullSpeed;
    _o.PlatformGameEnterCount = this.PlatformGameEnterCount;
    _o.AWMTierExp = this.AWMTierExp;
    _o.PlatformGameMatchingCount = this.PlatformGameMatchingCount;
    _o.PlatformGameEndCount = this.PlatformGameEndCount;
    _o.PlatformGameRank1Animation = this.PlatformGameRank1Animation;
    _o.PlatformGameRank2Animation = this.PlatformGameRank2Animation;
    _o.PlatformGameRank3Animation = this.PlatformGameRank3Animation;
    _o.PlatformGameRank1Position = this.PlatformGameRank1Position.HasValue ? this.PlatformGameRank1Position.Value.UnPack() : null;
    _o.PlatformGameRank2Position = this.PlatformGameRank2Position.HasValue ? this.PlatformGameRank2Position.Value.UnPack() : null;
    _o.PlatformGameRank3Position = this.PlatformGameRank3Position.HasValue ? this.PlatformGameRank3Position.Value.UnPack() : null;
    _o.PlatformGameResultCameraPosition = this.PlatformGameResultCameraPosition.HasValue ? this.PlatformGameResultCameraPosition.Value.UnPack() : null;
    _o.PlatformGameSinglePosition = this.PlatformGameSinglePosition.HasValue ? this.PlatformGameSinglePosition.Value.UnPack() : null;
    _o.PlatformGameResultCameraPositionSingle = this.PlatformGameResultCameraPositionSingle.HasValue ? this.PlatformGameResultCameraPositionSingle.Value.UnPack() : null;
    _o.PlatformGameReverseDirectionTime = this.PlatformGameReverseDirectionTime;
    _o.PlatformGameRespawnTime = this.PlatformGameRespawnTime;
    _o.PlatformGameReversePlayAngle = this.PlatformGameReversePlayAngle;
    _o.PlatformGameTargetingEffect = this.PlatformGameTargetingEffect;
    _o.PlatformGameGetItemEffect = this.PlatformGameGetItemEffect;
    _o.PlatformGameStartCoolTime = this.PlatformGameStartCoolTime;
    _o.PlatformGameTimeOut = this.PlatformGameTimeOut;
    _o.PlatformGameTimeOutMailID = this.PlatformGameTimeOutMailID;
    _o.SceneTypeIntroBGM = this.SceneTypeIntroBGM;
    _o.SceneTypeBootstrapBGM = this.SceneTypeBootstrapBGM;
    _o.SceneTypeLoginBGM = this.SceneTypeLoginBGM;
    _o.SceneTypeLobbyBGM = this.SceneTypeLobbyBGM;
    _o.SceneTypeSceneLoadBGM = this.SceneTypeSceneLoadBGM;
    _o.LoginWordMaxCount = this.LoginWordMaxCount;
    _o.LoginWordMinCount = this.LoginWordMinCount;
    _o.CharacterPlayIdleTime = this.CharacterPlayIdleTime;
    _o.CharacterPlayIdleRate = this.CharacterPlayIdleRate;
    _o.CharacterPlayIdleId = this.CharacterPlayIdleId;
    _o.DeviceDisconnectCheckTime = this.DeviceDisconnectCheckTime;
    _o.DeviceReconnectTime = this.DeviceReconnectTime;
    _o.DeviceSuspendingCheckTime = this.DeviceSuspendingCheckTime;
    _o.DeviceReconnectCount = this.DeviceReconnectCount;
    _o.CharacterBodyFormValue = this.CharacterBodyFormValue;
    _o.CharacterTailFormValue = this.CharacterTailFormValue;
    _o.CharacterPatternValue = this.CharacterPatternValue;
    _o.CharacterJumpPowerValue = this.CharacterJumpPowerValue;
    _o.CharacterGravityValue = this.CharacterGravityValue;
    _o.ChannelTryAccessTime = this.ChannelTryAccessTime;
    _o.ChannelRefreshTime = this.ChannelRefreshTime;
    _o.ChannelStateColor01 = this.ChannelStateColor01;
    _o.ChannelStateColor02 = this.ChannelStateColor02;
    _o.ChannelStateColor03 = this.ChannelStateColor03;
    _o.ChannelStateColor04 = this.ChannelStateColor04;
    _o.ChannelRecommendCount = this.ChannelRecommendCount;
    _o.PlatformGameStartCountDown5SFX = this.PlatformGameStartCountDown5SFX;
    _o.PlatformGameStartCountDown4SFX = this.PlatformGameStartCountDown4SFX;
    _o.PlatformGameStartCountDown3SFX = this.PlatformGameStartCountDown3SFX;
    _o.PlatformGameStartCountDown2SFX = this.PlatformGameStartCountDown2SFX;
    _o.PlatformGameStartCountDown1SFX = this.PlatformGameStartCountDown1SFX;
    _o.PlatformGameStartCountDownGoSFX = this.PlatformGameStartCountDownGoSFX;
    _o.CharacterUIShowMaxCount = this.CharacterUIShowMaxCount;
    _o.WithdrawLimeTimeStart = this.WithdrawLimeTimeStart.HasValue ? this.WithdrawLimeTimeStart.Value.UnPack() : null;
    _o.WithdrawLimeTimeEnd = this.WithdrawLimeTimeEnd.HasValue ? this.WithdrawLimeTimeEnd.Value.UnPack() : null;
    _o.CoinWithdrawLimit = this.CoinWithdrawLimit;
    _o.NFTWithdrawLimit = this.NFTWithdrawLimit;
    _o.NFTTransferWaitingTime = this.NFTTransferWaitingTime;
    _o.NFTTransmitFee = this.NFTTransmitFee;
    _o.NFTOpenseaAddressKei = this.NFTOpenseaAddressKei;
    _o.EmoticonTime = this.EmoticonTime;
    _o.EmoticonCoolTime = this.EmoticonCoolTime;
    _o.EmoticonRepeatLimit = this.EmoticonRepeatLimit;
    _o.TierExchangeEXP = this.TierExchangeEXP;
    _o.ExchangeRefreshCoolTime = this.ExchangeRefreshCoolTime;
    _o.ExchangeDepositCoolTime = this.ExchangeDepositCoolTime;
    _o.ExpConstantValue = this.ExpConstantValue;
    _o.ItemEquipColor = this.ItemEquipColor;
    _o.ItemEquipPossibleColor = this.ItemEquipPossibleColor;
    _o.ItemEquipImpossibleColor = this.ItemEquipImpossibleColor;
    _o.ItemEquipTierImpossibleColor = this.ItemEquipTierImpossibleColor;
    _o.AutoMoveDistanceTextColor = this.AutoMoveDistanceTextColor;
    _o.AutoMoveCameraTime = this.AutoMoveCameraTime;
    _o.AutoMoveCameraViewX = this.AutoMoveCameraViewX;
    _o.AutoMoveCameraViewY = this.AutoMoveCameraViewY;
    _o.AutoMoveCameraViewZ = this.AutoMoveCameraViewZ;
    _o.AutoMoveCameraDistance = this.AutoMoveCameraDistance;
    _o.HoldemFreeCashRefill = this.HoldemFreeCashRefill;
    _o.HoldemFreeRefill = this.HoldemFreeRefill;
    _o.HoldemCurrencyFree = this.HoldemCurrencyFree;
    _o.HoldemCurrencyPay = this.HoldemCurrencyPay;
    _o.HoldemGameStartMin = this.HoldemGameStartMin;
    _o.HoldemJackpotBaseAmount = this.HoldemJackpotBaseAmount;
    _o.HoldemNextGameWaitTime = this.HoldemNextGameWaitTime;
    _o.PopupChatColor = this.PopupChatColor;
    _o.TreasureLotteryAccrueRate = this.TreasureLotteryAccrueRate;
    _o.TreasureLotteryJackpotRenewalTime = this.TreasureLotteryJackpotRenewalTime;
    _o.TreasureLotteryJackpotSound = this.TreasureLotteryJackpotSound;
    _o.TreasureLotteryProgressPopupResetTime = this.TreasureLotteryProgressPopupResetTime;
    _o.TreasureLotteryButtonDelayTime = this.TreasureLotteryButtonDelayTime;
    _o.HeadsAndTailsNextGameWaitTime = this.HeadsAndTailsNextGameWaitTime;
    _o.HeadsAndTailsRemainedTimeRed = this.HeadsAndTailsRemainedTimeRed;
    _o.ShopCostRefreshTime = this.ShopCostRefreshTime;
    _o.FruitCalculationValue = this.FruitCalculationValue;
    _o.FastRunSkillID = this.FastRunSkillID;
    _o.FastRunBuffID = this.FastRunBuffID;
    _o.AirDropReStartTime = this.AirDropReStartTime;
    _o.CameraRotationValueMinX = this.CameraRotationValueMinX;
    _o.CameraRotationValueMinY = this.CameraRotationValueMinY;
    _o.CameraRotationValueBasicX = this.CameraRotationValueBasicX;
    _o.CameraRotationValueBasicY = this.CameraRotationValueBasicY;
    _o.CameraRotationValueMaxX = this.CameraRotationValueMaxX;
    _o.CameraRotationValueMaxY = this.CameraRotationValueMaxY;
    _o.TREASURELOTTERYRewardMessageKey = this.TREASURELOTTERYRewardMessageKey;
    _o.TREASURELOTTERYRewardMessageGet = this.TREASURELOTTERYRewardMessageGet;
    _o.HoldemRewardMessageKey = this.HoldemRewardMessageKey;
    _o.HoldemRewardMessageGet = this.HoldemRewardMessageGet;
    _o.UINamePlateZoomRatio = this.UINamePlateZoomRatio;
    _o.RenderCharMaxCount = this.RenderCharMaxCount;
    _o.RenderCharMinDistance = this.RenderCharMinDistance;
    _o.RenderShadowMaxDistance = this.RenderShadowMaxDistance;
    _o.CommonRewardMail = this.CommonRewardMail;
    _o.QuestRewardMail = this.QuestRewardMail;
    _o.MissionRewardMail = this.MissionRewardMail;
  }
  public static Offset<GDT.Common> Pack(FlatBufferBuilder builder, CommonT _o) {
    if (_o == null) return default(Offset<GDT.Common>);
    var _NOCS_SlotNumber_Open = default(VectorOffset);
    if (_o.NOCSSlotNumberOpen != null) {
      var __NOCS_SlotNumber_Open = _o.NOCSSlotNumberOpen.ToArray();
      _NOCS_SlotNumber_Open = CreateNOCSSlotNumberOpenVector(builder, __NOCS_SlotNumber_Open);
    }
    var _NOCS_SlotNumber = default(VectorOffset);
    if (_o.NOCSSlotNumber != null) {
      var __NOCS_SlotNumber = _o.NOCSSlotNumber.ToArray();
      _NOCS_SlotNumber = CreateNOCSSlotNumberVector(builder, __NOCS_SlotNumber);
    }
    var _Channel_State_Color_01 = _o.ChannelStateColor01 == null ? default(StringOffset) : builder.CreateString(_o.ChannelStateColor01);
    var _Channel_State_Color_02 = _o.ChannelStateColor02 == null ? default(StringOffset) : builder.CreateString(_o.ChannelStateColor02);
    var _Channel_State_Color_03 = _o.ChannelStateColor03 == null ? default(StringOffset) : builder.CreateString(_o.ChannelStateColor03);
    var _Channel_State_Color_04 = _o.ChannelStateColor04 == null ? default(StringOffset) : builder.CreateString(_o.ChannelStateColor04);
    var _NFT_Opensea_Address_Kei = _o.NFTOpenseaAddressKei == null ? default(StringOffset) : builder.CreateString(_o.NFTOpenseaAddressKei);
    var _Item_Equip_Color = _o.ItemEquipColor == null ? default(StringOffset) : builder.CreateString(_o.ItemEquipColor);
    var _Item_Equip_Possible_Color = _o.ItemEquipPossibleColor == null ? default(StringOffset) : builder.CreateString(_o.ItemEquipPossibleColor);
    var _Item_Equip_Impossible_Color = _o.ItemEquipImpossibleColor == null ? default(StringOffset) : builder.CreateString(_o.ItemEquipImpossibleColor);
    var _Item_Equip_Tier_Impossible_Color = _o.ItemEquipTierImpossibleColor == null ? default(StringOffset) : builder.CreateString(_o.ItemEquipTierImpossibleColor);
    var _AutoMove_Distance_Text_Color = _o.AutoMoveDistanceTextColor == null ? default(StringOffset) : builder.CreateString(_o.AutoMoveDistanceTextColor);
    var _Popup_ChatColor = _o.PopupChatColor == null ? default(StringOffset) : builder.CreateString(_o.PopupChatColor);
    var _TREASURELOTTERY_Reward_Message_Key = _o.TREASURELOTTERYRewardMessageKey == null ? default(StringOffset) : builder.CreateString(_o.TREASURELOTTERYRewardMessageKey);
    var _Holdem_Reward_Message_Key = _o.HoldemRewardMessageKey == null ? default(StringOffset) : builder.CreateString(_o.HoldemRewardMessageKey);
    StartCommon(builder);
    AddStaminaRecoveryCycle(builder, _o.StaminaRecoveryCycle);
    AddStaminaRecoveryAmount(builder, _o.StaminaRecoveryAmount);
    AddNOABRecoveryCycle(builder, _o.NOABRecoveryCycle);
    AddNOABRecoveryAmount(builder, _o.NOABRecoveryAmount);
    AddNOCSSlotNumberOpen(builder, _NOCS_SlotNumber_Open);
    AddNOCSSlotNumber(builder, _NOCS_SlotNumber);
    AddTIREDIncreasingStatus(builder, _o.TIREDIncreasingStatus);
    AddTIREDRecoveryCycle(builder, _o.TIREDRecoveryCycle);
    AddTIREDRecoveryAmount(builder, _o.TIREDRecoveryAmount);
    AddSLEEPSwitchStatus(builder, _o.SLEEPSwitchStatus);
    AddSLEEPEndStatus(builder, _o.SLEEPEndStatus);
    AddHudConditionIconMax(builder, _o.HudConditionIconMax);
    AddContentsResetTimeDay(builder, GDT.time.Pack(builder, _o.ContentsResetTimeDay));
    AddContentsResetTimeWeek(builder, GDT.time.Pack(builder, _o.ContentsResetTimeWeek));
    AddContentsResetTimeMonthly(builder, GDT.time.Pack(builder, _o.ContentsResetTimeMonthly));
    AddCharacterDeleteTime(builder, _o.CharacterDeleteTime);
    AddCharacterCreateMapID(builder, _o.CharacterCreateMapID);
    AddCharacterNickNameMin(builder, _o.CharacterNickNameMin);
    AddCharacterNickNameMax(builder, _o.CharacterNickNameMax);
    AddCharacterCreateSpawnGroup(builder, _o.CharacterCreateSpawnGroup);
    AddEventCoinAirDropStartTime(builder, GDT.time.Pack(builder, _o.EventCoinAirDropStartTime));
    AddEventCoinAirDrop10Min(builder, _o.EventCoinAirDrop10Min);
    AddEventCoinAirDrop5Min(builder, _o.EventCoinAirDrop5Min);
    AddEventCoinAirDrop1Min(builder, _o.EventCoinAirDrop1Min);
    AddEventCoinAirDropEnd(builder, _o.EventCoinAirDropEnd);
    AddEventCoinAirDropCount(builder, _o.EventCoinAirDropCount);
    AddMailNormalMaxCount(builder, _o.MailNormalMaxCount);
    AddMailSystemMaxCount(builder, _o.MailSystemMaxCount);
    AddFriendRequestListMaxCount(builder, _o.FriendRequestListMaxCount);
    AddFriendFriendListMaxCount(builder, _o.FriendFriendListMaxCount);
    AddFriendReceptionListMaxCount(builder, _o.FriendReceptionListMaxCount);
    AddFriendBlockListMaxCount(builder, _o.FriendBlockListMaxCount);
    AddFriendRecommendListMaxCount(builder, _o.FriendRecommendListMaxCount);
    AddFriendAcceptanceTime(builder, _o.FriendAcceptanceTime);
    AddFriendFriendShipPointSendNum(builder, _o.FriendFriendShipPointSendNum);
    AddFriendFriendShipPointSendMax(builder, _o.FriendFriendShipPointSendMax);
    AddFriendLikabilityMax(builder, _o.FriendLikabilityMax);
    AddFriendRefreshCoolTime(builder, _o.FriendRefreshCoolTime);
    AddFriendRecommendTier(builder, _o.FriendRecommendTier);
    AddFriendRecommendLevel(builder, _o.FriendRecommendLevel);
    AddChattingRepeatPenaltyTime(builder, _o.ChattingRepeatPenaltyTime);
    AddChattingSlangPenaltyTime(builder, _o.ChattingSlangPenaltyTime);
    AddChattingWorldOutputRadius(builder, _o.ChattingWorldOutputRadius);
    AddChattingMaxWord(builder, _o.ChattingMaxWord);
    AddChattingPopupMaxList(builder, _o.ChattingPopupMaxList);
    AddChattingMainHudMaxList(builder, _o.ChattingMainHudMaxList);
    AddSpeechBalloonLineChange(builder, _o.SpeechBalloonLineChange);
    AddSpeechBalloonTime(builder, _o.SpeechBalloonTime);
    AddCharacterPrimaryCapabilityMAXSTR(builder, _o.CharacterPrimaryCapabilityMAXSTR);
    AddCharacterPrimaryCapabilityMAXDEX(builder, _o.CharacterPrimaryCapabilityMAXDEX);
    AddCharacterPrimaryCapabilityMAXCON(builder, _o.CharacterPrimaryCapabilityMAXCON);
    AddCharacterPrimaryCapabilityMAXWIS(builder, _o.CharacterPrimaryCapabilityMAXWIS);
    AddCharacterPrimaryCapabilityMAXINT(builder, _o.CharacterPrimaryCapabilityMAXINT);
    AddCharacterPrimaryCapabilityMAXSEN(builder, _o.CharacterPrimaryCapabilityMAXSEN);
    AddUSINGITEMGLOBALCOOLTIME(builder, _o.USINGITEMGLOBALCOOLTIME);
    AddMainQuestMaxCount(builder, _o.MainQuestMaxCount);
    AddSubQuestMaxCount(builder, _o.SubQuestMaxCount);
    AddScriptSpeed01(builder, _o.ScriptSpeed01);
    AddScriptSpeed02(builder, _o.ScriptSpeed02);
    AddScriptSpeed03(builder, _o.ScriptSpeed03);
    AddScriptAutoTime(builder, _o.ScriptAutoTime);
    AddQuestHudInfoCheckCount(builder, _o.QuestHudInfoCheckCount);
    AddVehicleRideEffect(builder, _o.VehicleRideEffect);
    AddVehicleUnloadEffect(builder, _o.VehicleUnloadEffect);
    AddMailRefreshCoolTime(builder, _o.MailRefreshCoolTime);
    AddSkillGLOBALCOOLTIME(builder, _o.SkillGLOBALCOOLTIME);
    AddSkillTargetPullSpeed(builder, _o.SkillTargetPullSpeed);
    AddPlatformGameEnterCount(builder, _o.PlatformGameEnterCount);
    AddAWMTierExp(builder, _o.AWMTierExp);
    AddPlatformGameMatchingCount(builder, _o.PlatformGameMatchingCount);
    AddPlatformGameEndCount(builder, _o.PlatformGameEndCount);
    AddPlatformGameRank1Animation(builder, _o.PlatformGameRank1Animation);
    AddPlatformGameRank2Animation(builder, _o.PlatformGameRank2Animation);
    AddPlatformGameRank3Animation(builder, _o.PlatformGameRank3Animation);
    AddPlatformGameRank1Position(builder, GDT.vector3.Pack(builder, _o.PlatformGameRank1Position));
    AddPlatformGameRank2Position(builder, GDT.vector3.Pack(builder, _o.PlatformGameRank2Position));
    AddPlatformGameRank3Position(builder, GDT.vector3.Pack(builder, _o.PlatformGameRank3Position));
    AddPlatformGameResultCameraPosition(builder, GDT.vector3.Pack(builder, _o.PlatformGameResultCameraPosition));
    AddPlatformGameSinglePosition(builder, GDT.vector3.Pack(builder, _o.PlatformGameSinglePosition));
    AddPlatformGameResultCameraPositionSingle(builder, GDT.vector3.Pack(builder, _o.PlatformGameResultCameraPositionSingle));
    AddPlatformGameReverseDirectionTime(builder, _o.PlatformGameReverseDirectionTime);
    AddPlatformGameRespawnTime(builder, _o.PlatformGameRespawnTime);
    AddPlatformGameReversePlayAngle(builder, _o.PlatformGameReversePlayAngle);
    AddPlatformGameTargetingEffect(builder, _o.PlatformGameTargetingEffect);
    AddPlatformGameGetItemEffect(builder, _o.PlatformGameGetItemEffect);
    AddPlatformGameStartCoolTime(builder, _o.PlatformGameStartCoolTime);
    AddPlatformGameTimeOut(builder, _o.PlatformGameTimeOut);
    AddPlatformGameTimeOutMailID(builder, _o.PlatformGameTimeOutMailID);
    AddSceneTypeIntroBGM(builder, _o.SceneTypeIntroBGM);
    AddSceneTypeBootstrapBGM(builder, _o.SceneTypeBootstrapBGM);
    AddSceneTypeLoginBGM(builder, _o.SceneTypeLoginBGM);
    AddSceneTypeLobbyBGM(builder, _o.SceneTypeLobbyBGM);
    AddSceneTypeSceneLoadBGM(builder, _o.SceneTypeSceneLoadBGM);
    AddLoginWordMaxCount(builder, _o.LoginWordMaxCount);
    AddLoginWordMinCount(builder, _o.LoginWordMinCount);
    AddCharacterPlayIdleTime(builder, _o.CharacterPlayIdleTime);
    AddCharacterPlayIdleRate(builder, _o.CharacterPlayIdleRate);
    AddCharacterPlayIdleId(builder, _o.CharacterPlayIdleId);
    AddDeviceDisconnectCheckTime(builder, _o.DeviceDisconnectCheckTime);
    AddDeviceReconnectTime(builder, _o.DeviceReconnectTime);
    AddDeviceSuspendingCheckTime(builder, _o.DeviceSuspendingCheckTime);
    AddDeviceReconnectCount(builder, _o.DeviceReconnectCount);
    AddCharacterBodyFormValue(builder, _o.CharacterBodyFormValue);
    AddCharacterTailFormValue(builder, _o.CharacterTailFormValue);
    AddCharacterPatternValue(builder, _o.CharacterPatternValue);
    AddCharacterJumpPowerValue(builder, _o.CharacterJumpPowerValue);
    AddCharacterGravityValue(builder, _o.CharacterGravityValue);
    AddChannelTryAccessTime(builder, _o.ChannelTryAccessTime);
    AddChannelRefreshTime(builder, _o.ChannelRefreshTime);
    AddChannelStateColor01(builder, _Channel_State_Color_01);
    AddChannelStateColor02(builder, _Channel_State_Color_02);
    AddChannelStateColor03(builder, _Channel_State_Color_03);
    AddChannelStateColor04(builder, _Channel_State_Color_04);
    AddChannelRecommendCount(builder, _o.ChannelRecommendCount);
    AddPlatformGameStartCountDown5SFX(builder, _o.PlatformGameStartCountDown5SFX);
    AddPlatformGameStartCountDown4SFX(builder, _o.PlatformGameStartCountDown4SFX);
    AddPlatformGameStartCountDown3SFX(builder, _o.PlatformGameStartCountDown3SFX);
    AddPlatformGameStartCountDown2SFX(builder, _o.PlatformGameStartCountDown2SFX);
    AddPlatformGameStartCountDown1SFX(builder, _o.PlatformGameStartCountDown1SFX);
    AddPlatformGameStartCountDownGoSFX(builder, _o.PlatformGameStartCountDownGoSFX);
    AddCharacterUIShowMaxCount(builder, _o.CharacterUIShowMaxCount);
    AddWithdrawLimeTimeStart(builder, GDT.time.Pack(builder, _o.WithdrawLimeTimeStart));
    AddWithdrawLimeTimeEnd(builder, GDT.time.Pack(builder, _o.WithdrawLimeTimeEnd));
    AddCoinWithdrawLimit(builder, _o.CoinWithdrawLimit);
    AddNFTWithdrawLimit(builder, _o.NFTWithdrawLimit);
    AddNFTTransferWaitingTime(builder, _o.NFTTransferWaitingTime);
    AddNFTTransmitFee(builder, _o.NFTTransmitFee);
    AddNFTOpenseaAddressKei(builder, _NFT_Opensea_Address_Kei);
    AddEmoticonTime(builder, _o.EmoticonTime);
    AddEmoticonCoolTime(builder, _o.EmoticonCoolTime);
    AddEmoticonRepeatLimit(builder, _o.EmoticonRepeatLimit);
    AddTierExchangeEXP(builder, _o.TierExchangeEXP);
    AddExchangeRefreshCoolTime(builder, _o.ExchangeRefreshCoolTime);
    AddExchangeDepositCoolTime(builder, _o.ExchangeDepositCoolTime);
    AddExpConstantValue(builder, _o.ExpConstantValue);
    AddItemEquipColor(builder, _Item_Equip_Color);
    AddItemEquipPossibleColor(builder, _Item_Equip_Possible_Color);
    AddItemEquipImpossibleColor(builder, _Item_Equip_Impossible_Color);
    AddItemEquipTierImpossibleColor(builder, _Item_Equip_Tier_Impossible_Color);
    AddAutoMoveDistanceTextColor(builder, _AutoMove_Distance_Text_Color);
    AddAutoMoveCameraTime(builder, _o.AutoMoveCameraTime);
    AddAutoMoveCameraViewX(builder, _o.AutoMoveCameraViewX);
    AddAutoMoveCameraViewY(builder, _o.AutoMoveCameraViewY);
    AddAutoMoveCameraViewZ(builder, _o.AutoMoveCameraViewZ);
    AddAutoMoveCameraDistance(builder, _o.AutoMoveCameraDistance);
    AddHoldemFreeCashRefill(builder, _o.HoldemFreeCashRefill);
    AddHoldemFreeRefill(builder, _o.HoldemFreeRefill);
    AddHoldemCurrencyFree(builder, _o.HoldemCurrencyFree);
    AddHoldemCurrencyPay(builder, _o.HoldemCurrencyPay);
    AddHoldemGameStartMin(builder, _o.HoldemGameStartMin);
    AddHoldemJackpotBaseAmount(builder, _o.HoldemJackpotBaseAmount);
    AddHoldemNextGameWaitTime(builder, _o.HoldemNextGameWaitTime);
    AddPopupChatColor(builder, _Popup_ChatColor);
    AddTreasureLotteryAccrueRate(builder, _o.TreasureLotteryAccrueRate);
    AddTreasureLotteryJackpotRenewalTime(builder, _o.TreasureLotteryJackpotRenewalTime);
    AddTreasureLotteryJackpotSound(builder, _o.TreasureLotteryJackpotSound);
    AddTreasureLotteryProgressPopupResetTime(builder, _o.TreasureLotteryProgressPopupResetTime);
    AddTreasureLotteryButtonDelayTime(builder, _o.TreasureLotteryButtonDelayTime);
    AddHeadsAndTailsNextGameWaitTime(builder, _o.HeadsAndTailsNextGameWaitTime);
    AddHeadsAndTailsRemainedTimeRed(builder, _o.HeadsAndTailsRemainedTimeRed);
    AddShopCostRefreshTime(builder, _o.ShopCostRefreshTime);
    AddFruitCalculationValue(builder, _o.FruitCalculationValue);
    AddFastRunSkillID(builder, _o.FastRunSkillID);
    AddFastRunBuffID(builder, _o.FastRunBuffID);
    AddAirDropReStartTime(builder, _o.AirDropReStartTime);
    AddCameraRotationValueMinX(builder, _o.CameraRotationValueMinX);
    AddCameraRotationValueMinY(builder, _o.CameraRotationValueMinY);
    AddCameraRotationValueBasicX(builder, _o.CameraRotationValueBasicX);
    AddCameraRotationValueBasicY(builder, _o.CameraRotationValueBasicY);
    AddCameraRotationValueMaxX(builder, _o.CameraRotationValueMaxX);
    AddCameraRotationValueMaxY(builder, _o.CameraRotationValueMaxY);
    AddTREASURELOTTERYRewardMessageKey(builder, _TREASURELOTTERY_Reward_Message_Key);
    AddTREASURELOTTERYRewardMessageGet(builder, _o.TREASURELOTTERYRewardMessageGet);
    AddHoldemRewardMessageKey(builder, _Holdem_Reward_Message_Key);
    AddHoldemRewardMessageGet(builder, _o.HoldemRewardMessageGet);
    AddUINamePlateZoomRatio(builder, _o.UINamePlateZoomRatio);
    AddRenderCharMaxCount(builder, _o.RenderCharMaxCount);
    AddRenderCharMinDistance(builder, _o.RenderCharMinDistance);
    AddRenderShadowMaxDistance(builder, _o.RenderShadowMaxDistance);
    AddCommonRewardMail(builder, _o.CommonRewardMail);
    AddQuestRewardMail(builder, _o.QuestRewardMail);
    AddMissionRewardMail(builder, _o.MissionRewardMail);
    return EndCommon(builder);
  }
};

public class CommonT
{
  public int StaminaRecoveryCycle { get; set; }
  public int StaminaRecoveryAmount { get; set; }
  public int NOABRecoveryCycle { get; set; }
  public int NOABRecoveryAmount { get; set; }
  public List<int> NOCSSlotNumberOpen { get; set; }
  public List<int> NOCSSlotNumber { get; set; }
  public int TIREDIncreasingStatus { get; set; }
  public int TIREDRecoveryCycle { get; set; }
  public int TIREDRecoveryAmount { get; set; }
  public int SLEEPSwitchStatus { get; set; }
  public int SLEEPEndStatus { get; set; }
  public int HudConditionIconMax { get; set; }
  public GDT.timeT ContentsResetTimeDay { get; set; }
  public GDT.timeT ContentsResetTimeWeek { get; set; }
  public GDT.timeT ContentsResetTimeMonthly { get; set; }
  public int CharacterDeleteTime { get; set; }
  public int CharacterCreateMapID { get; set; }
  public int CharacterNickNameMin { get; set; }
  public int CharacterNickNameMax { get; set; }
  public int CharacterCreateSpawnGroup { get; set; }
  public GDT.timeT EventCoinAirDropStartTime { get; set; }
  public int EventCoinAirDrop10Min { get; set; }
  public int EventCoinAirDrop5Min { get; set; }
  public int EventCoinAirDrop1Min { get; set; }
  public int EventCoinAirDropEnd { get; set; }
  public int EventCoinAirDropCount { get; set; }
  public int MailNormalMaxCount { get; set; }
  public int MailSystemMaxCount { get; set; }
  public int FriendRequestListMaxCount { get; set; }
  public int FriendFriendListMaxCount { get; set; }
  public int FriendReceptionListMaxCount { get; set; }
  public int FriendBlockListMaxCount { get; set; }
  public int FriendRecommendListMaxCount { get; set; }
  public int FriendAcceptanceTime { get; set; }
  public int FriendFriendShipPointSendNum { get; set; }
  public int FriendFriendShipPointSendMax { get; set; }
  public int FriendLikabilityMax { get; set; }
  public int FriendRefreshCoolTime { get; set; }
  public int FriendRecommendTier { get; set; }
  public int FriendRecommendLevel { get; set; }
  public int ChattingRepeatPenaltyTime { get; set; }
  public int ChattingSlangPenaltyTime { get; set; }
  public int ChattingWorldOutputRadius { get; set; }
  public int ChattingMaxWord { get; set; }
  public int ChattingPopupMaxList { get; set; }
  public int ChattingMainHudMaxList { get; set; }
  public int SpeechBalloonLineChange { get; set; }
  public float SpeechBalloonTime { get; set; }
  public int CharacterPrimaryCapabilityMAXSTR { get; set; }
  public int CharacterPrimaryCapabilityMAXDEX { get; set; }
  public int CharacterPrimaryCapabilityMAXCON { get; set; }
  public int CharacterPrimaryCapabilityMAXWIS { get; set; }
  public int CharacterPrimaryCapabilityMAXINT { get; set; }
  public int CharacterPrimaryCapabilityMAXSEN { get; set; }
  public int USINGITEMGLOBALCOOLTIME { get; set; }
  public int MainQuestMaxCount { get; set; }
  public int SubQuestMaxCount { get; set; }
  public float ScriptSpeed01 { get; set; }
  public float ScriptSpeed02 { get; set; }
  public float ScriptSpeed03 { get; set; }
  public int ScriptAutoTime { get; set; }
  public int QuestHudInfoCheckCount { get; set; }
  public int VehicleRideEffect { get; set; }
  public int VehicleUnloadEffect { get; set; }
  public int MailRefreshCoolTime { get; set; }
  public int SkillGLOBALCOOLTIME { get; set; }
  public float SkillTargetPullSpeed { get; set; }
  public int PlatformGameEnterCount { get; set; }
  public float AWMTierExp { get; set; }
  public int PlatformGameMatchingCount { get; set; }
  public int PlatformGameEndCount { get; set; }
  public int PlatformGameRank1Animation { get; set; }
  public int PlatformGameRank2Animation { get; set; }
  public int PlatformGameRank3Animation { get; set; }
  public GDT.vector3T PlatformGameRank1Position { get; set; }
  public GDT.vector3T PlatformGameRank2Position { get; set; }
  public GDT.vector3T PlatformGameRank3Position { get; set; }
  public GDT.vector3T PlatformGameResultCameraPosition { get; set; }
  public GDT.vector3T PlatformGameSinglePosition { get; set; }
  public GDT.vector3T PlatformGameResultCameraPositionSingle { get; set; }
  public int PlatformGameReverseDirectionTime { get; set; }
  public int PlatformGameRespawnTime { get; set; }
  public int PlatformGameReversePlayAngle { get; set; }
  public int PlatformGameTargetingEffect { get; set; }
  public int PlatformGameGetItemEffect { get; set; }
  public int PlatformGameStartCoolTime { get; set; }
  public int PlatformGameTimeOut { get; set; }
  public int PlatformGameTimeOutMailID { get; set; }
  public int SceneTypeIntroBGM { get; set; }
  public int SceneTypeBootstrapBGM { get; set; }
  public int SceneTypeLoginBGM { get; set; }
  public int SceneTypeLobbyBGM { get; set; }
  public int SceneTypeSceneLoadBGM { get; set; }
  public int LoginWordMaxCount { get; set; }
  public int LoginWordMinCount { get; set; }
  public int CharacterPlayIdleTime { get; set; }
  public int CharacterPlayIdleRate { get; set; }
  public int CharacterPlayIdleId { get; set; }
  public int DeviceDisconnectCheckTime { get; set; }
  public int DeviceReconnectTime { get; set; }
  public int DeviceSuspendingCheckTime { get; set; }
  public int DeviceReconnectCount { get; set; }
  public int CharacterBodyFormValue { get; set; }
  public int CharacterTailFormValue { get; set; }
  public int CharacterPatternValue { get; set; }
  public float CharacterJumpPowerValue { get; set; }
  public float CharacterGravityValue { get; set; }
  public int ChannelTryAccessTime { get; set; }
  public int ChannelRefreshTime { get; set; }
  public string ChannelStateColor01 { get; set; }
  public string ChannelStateColor02 { get; set; }
  public string ChannelStateColor03 { get; set; }
  public string ChannelStateColor04 { get; set; }
  public int ChannelRecommendCount { get; set; }
  public int PlatformGameStartCountDown5SFX { get; set; }
  public int PlatformGameStartCountDown4SFX { get; set; }
  public int PlatformGameStartCountDown3SFX { get; set; }
  public int PlatformGameStartCountDown2SFX { get; set; }
  public int PlatformGameStartCountDown1SFX { get; set; }
  public int PlatformGameStartCountDownGoSFX { get; set; }
  public int CharacterUIShowMaxCount { get; set; }
  public GDT.timeT WithdrawLimeTimeStart { get; set; }
  public GDT.timeT WithdrawLimeTimeEnd { get; set; }
  public int CoinWithdrawLimit { get; set; }
  public int NFTWithdrawLimit { get; set; }
  public int NFTTransferWaitingTime { get; set; }
  public int NFTTransmitFee { get; set; }
  public string NFTOpenseaAddressKei { get; set; }
  public float EmoticonTime { get; set; }
  public int EmoticonCoolTime { get; set; }
  public int EmoticonRepeatLimit { get; set; }
  public float TierExchangeEXP { get; set; }
  public int ExchangeRefreshCoolTime { get; set; }
  public int ExchangeDepositCoolTime { get; set; }
  public int ExpConstantValue { get; set; }
  public string ItemEquipColor { get; set; }
  public string ItemEquipPossibleColor { get; set; }
  public string ItemEquipImpossibleColor { get; set; }
  public string ItemEquipTierImpossibleColor { get; set; }
  public string AutoMoveDistanceTextColor { get; set; }
  public float AutoMoveCameraTime { get; set; }
  public float AutoMoveCameraViewX { get; set; }
  public float AutoMoveCameraViewY { get; set; }
  public float AutoMoveCameraViewZ { get; set; }
  public float AutoMoveCameraDistance { get; set; }
  public int HoldemFreeCashRefill { get; set; }
  public int HoldemFreeRefill { get; set; }
  public GDT.CurrencySubType HoldemCurrencyFree { get; set; }
  public GDT.CurrencySubType HoldemCurrencyPay { get; set; }
  public int HoldemGameStartMin { get; set; }
  public int HoldemJackpotBaseAmount { get; set; }
  public int HoldemNextGameWaitTime { get; set; }
  public string PopupChatColor { get; set; }
  public float TreasureLotteryAccrueRate { get; set; }
  public int TreasureLotteryJackpotRenewalTime { get; set; }
  public int TreasureLotteryJackpotSound { get; set; }
  public int TreasureLotteryProgressPopupResetTime { get; set; }
  public int TreasureLotteryButtonDelayTime { get; set; }
  public int HeadsAndTailsNextGameWaitTime { get; set; }
  public int HeadsAndTailsRemainedTimeRed { get; set; }
  public int ShopCostRefreshTime { get; set; }
  public int FruitCalculationValue { get; set; }
  public int FastRunSkillID { get; set; }
  public int FastRunBuffID { get; set; }
  public int AirDropReStartTime { get; set; }
  public float CameraRotationValueMinX { get; set; }
  public float CameraRotationValueMinY { get; set; }
  public float CameraRotationValueBasicX { get; set; }
  public float CameraRotationValueBasicY { get; set; }
  public float CameraRotationValueMaxX { get; set; }
  public float CameraRotationValueMaxY { get; set; }
  public string TREASURELOTTERYRewardMessageKey { get; set; }
  public int TREASURELOTTERYRewardMessageGet { get; set; }
  public string HoldemRewardMessageKey { get; set; }
  public int HoldemRewardMessageGet { get; set; }
  public float UINamePlateZoomRatio { get; set; }
  public int RenderCharMaxCount { get; set; }
  public float RenderCharMinDistance { get; set; }
  public float RenderShadowMaxDistance { get; set; }
  public int CommonRewardMail { get; set; }
  public int QuestRewardMail { get; set; }
  public int MissionRewardMail { get; set; }

  public CommonT() {
    this.StaminaRecoveryCycle = 0;
    this.StaminaRecoveryAmount = 0;
    this.NOABRecoveryCycle = 0;
    this.NOABRecoveryAmount = 0;
    this.NOCSSlotNumberOpen = null;
    this.NOCSSlotNumber = null;
    this.TIREDIncreasingStatus = 0;
    this.TIREDRecoveryCycle = 0;
    this.TIREDRecoveryAmount = 0;
    this.SLEEPSwitchStatus = 0;
    this.SLEEPEndStatus = 0;
    this.HudConditionIconMax = 0;
    this.ContentsResetTimeDay = new GDT.timeT();
    this.ContentsResetTimeWeek = new GDT.timeT();
    this.ContentsResetTimeMonthly = new GDT.timeT();
    this.CharacterDeleteTime = 0;
    this.CharacterCreateMapID = 0;
    this.CharacterNickNameMin = 0;
    this.CharacterNickNameMax = 0;
    this.CharacterCreateSpawnGroup = 0;
    this.EventCoinAirDropStartTime = new GDT.timeT();
    this.EventCoinAirDrop10Min = 0;
    this.EventCoinAirDrop5Min = 0;
    this.EventCoinAirDrop1Min = 0;
    this.EventCoinAirDropEnd = 0;
    this.EventCoinAirDropCount = 0;
    this.MailNormalMaxCount = 0;
    this.MailSystemMaxCount = 0;
    this.FriendRequestListMaxCount = 0;
    this.FriendFriendListMaxCount = 0;
    this.FriendReceptionListMaxCount = 0;
    this.FriendBlockListMaxCount = 0;
    this.FriendRecommendListMaxCount = 0;
    this.FriendAcceptanceTime = 0;
    this.FriendFriendShipPointSendNum = 0;
    this.FriendFriendShipPointSendMax = 0;
    this.FriendLikabilityMax = 0;
    this.FriendRefreshCoolTime = 0;
    this.FriendRecommendTier = 0;
    this.FriendRecommendLevel = 0;
    this.ChattingRepeatPenaltyTime = 0;
    this.ChattingSlangPenaltyTime = 0;
    this.ChattingWorldOutputRadius = 0;
    this.ChattingMaxWord = 0;
    this.ChattingPopupMaxList = 0;
    this.ChattingMainHudMaxList = 0;
    this.SpeechBalloonLineChange = 0;
    this.SpeechBalloonTime = 0.0f;
    this.CharacterPrimaryCapabilityMAXSTR = 0;
    this.CharacterPrimaryCapabilityMAXDEX = 0;
    this.CharacterPrimaryCapabilityMAXCON = 0;
    this.CharacterPrimaryCapabilityMAXWIS = 0;
    this.CharacterPrimaryCapabilityMAXINT = 0;
    this.CharacterPrimaryCapabilityMAXSEN = 0;
    this.USINGITEMGLOBALCOOLTIME = 0;
    this.MainQuestMaxCount = 0;
    this.SubQuestMaxCount = 0;
    this.ScriptSpeed01 = 0.0f;
    this.ScriptSpeed02 = 0.0f;
    this.ScriptSpeed03 = 0.0f;
    this.ScriptAutoTime = 0;
    this.QuestHudInfoCheckCount = 0;
    this.VehicleRideEffect = 0;
    this.VehicleUnloadEffect = 0;
    this.MailRefreshCoolTime = 0;
    this.SkillGLOBALCOOLTIME = 0;
    this.SkillTargetPullSpeed = 0.0f;
    this.PlatformGameEnterCount = 0;
    this.AWMTierExp = 0.0f;
    this.PlatformGameMatchingCount = 0;
    this.PlatformGameEndCount = 0;
    this.PlatformGameRank1Animation = 0;
    this.PlatformGameRank2Animation = 0;
    this.PlatformGameRank3Animation = 0;
    this.PlatformGameRank1Position = new GDT.vector3T();
    this.PlatformGameRank2Position = new GDT.vector3T();
    this.PlatformGameRank3Position = new GDT.vector3T();
    this.PlatformGameResultCameraPosition = new GDT.vector3T();
    this.PlatformGameSinglePosition = new GDT.vector3T();
    this.PlatformGameResultCameraPositionSingle = new GDT.vector3T();
    this.PlatformGameReverseDirectionTime = 0;
    this.PlatformGameRespawnTime = 0;
    this.PlatformGameReversePlayAngle = 0;
    this.PlatformGameTargetingEffect = 0;
    this.PlatformGameGetItemEffect = 0;
    this.PlatformGameStartCoolTime = 0;
    this.PlatformGameTimeOut = 0;
    this.PlatformGameTimeOutMailID = 0;
    this.SceneTypeIntroBGM = 0;
    this.SceneTypeBootstrapBGM = 0;
    this.SceneTypeLoginBGM = 0;
    this.SceneTypeLobbyBGM = 0;
    this.SceneTypeSceneLoadBGM = 0;
    this.LoginWordMaxCount = 0;
    this.LoginWordMinCount = 0;
    this.CharacterPlayIdleTime = 0;
    this.CharacterPlayIdleRate = 0;
    this.CharacterPlayIdleId = 0;
    this.DeviceDisconnectCheckTime = 0;
    this.DeviceReconnectTime = 0;
    this.DeviceSuspendingCheckTime = 0;
    this.DeviceReconnectCount = 0;
    this.CharacterBodyFormValue = 0;
    this.CharacterTailFormValue = 0;
    this.CharacterPatternValue = 0;
    this.CharacterJumpPowerValue = 0.0f;
    this.CharacterGravityValue = 0.0f;
    this.ChannelTryAccessTime = 0;
    this.ChannelRefreshTime = 0;
    this.ChannelStateColor01 = null;
    this.ChannelStateColor02 = null;
    this.ChannelStateColor03 = null;
    this.ChannelStateColor04 = null;
    this.ChannelRecommendCount = 0;
    this.PlatformGameStartCountDown5SFX = 0;
    this.PlatformGameStartCountDown4SFX = 0;
    this.PlatformGameStartCountDown3SFX = 0;
    this.PlatformGameStartCountDown2SFX = 0;
    this.PlatformGameStartCountDown1SFX = 0;
    this.PlatformGameStartCountDownGoSFX = 0;
    this.CharacterUIShowMaxCount = 0;
    this.WithdrawLimeTimeStart = new GDT.timeT();
    this.WithdrawLimeTimeEnd = new GDT.timeT();
    this.CoinWithdrawLimit = 0;
    this.NFTWithdrawLimit = 0;
    this.NFTTransferWaitingTime = 0;
    this.NFTTransmitFee = 0;
    this.NFTOpenseaAddressKei = null;
    this.EmoticonTime = 0.0f;
    this.EmoticonCoolTime = 0;
    this.EmoticonRepeatLimit = 0;
    this.TierExchangeEXP = 0.0f;
    this.ExchangeRefreshCoolTime = 0;
    this.ExchangeDepositCoolTime = 0;
    this.ExpConstantValue = 0;
    this.ItemEquipColor = null;
    this.ItemEquipPossibleColor = null;
    this.ItemEquipImpossibleColor = null;
    this.ItemEquipTierImpossibleColor = null;
    this.AutoMoveDistanceTextColor = null;
    this.AutoMoveCameraTime = 0.0f;
    this.AutoMoveCameraViewX = 0.0f;
    this.AutoMoveCameraViewY = 0.0f;
    this.AutoMoveCameraViewZ = 0.0f;
    this.AutoMoveCameraDistance = 0.0f;
    this.HoldemFreeCashRefill = 0;
    this.HoldemFreeRefill = 0;
    this.HoldemCurrencyFree = GDT.CurrencySubType.CST_None;
    this.HoldemCurrencyPay = GDT.CurrencySubType.CST_None;
    this.HoldemGameStartMin = 0;
    this.HoldemJackpotBaseAmount = 0;
    this.HoldemNextGameWaitTime = 0;
    this.PopupChatColor = null;
    this.TreasureLotteryAccrueRate = 0.0f;
    this.TreasureLotteryJackpotRenewalTime = 0;
    this.TreasureLotteryJackpotSound = 0;
    this.TreasureLotteryProgressPopupResetTime = 0;
    this.TreasureLotteryButtonDelayTime = 0;
    this.HeadsAndTailsNextGameWaitTime = 0;
    this.HeadsAndTailsRemainedTimeRed = 0;
    this.ShopCostRefreshTime = 0;
    this.FruitCalculationValue = 0;
    this.FastRunSkillID = 0;
    this.FastRunBuffID = 0;
    this.AirDropReStartTime = 0;
    this.CameraRotationValueMinX = 0.0f;
    this.CameraRotationValueMinY = 0.0f;
    this.CameraRotationValueBasicX = 0.0f;
    this.CameraRotationValueBasicY = 0.0f;
    this.CameraRotationValueMaxX = 0.0f;
    this.CameraRotationValueMaxY = 0.0f;
    this.TREASURELOTTERYRewardMessageKey = null;
    this.TREASURELOTTERYRewardMessageGet = 0;
    this.HoldemRewardMessageKey = null;
    this.HoldemRewardMessageGet = 0;
    this.UINamePlateZoomRatio = 0.0f;
    this.RenderCharMaxCount = 0;
    this.RenderCharMinDistance = 0.0f;
    this.RenderShadowMaxDistance = 0.0f;
    this.CommonRewardMail = 0;
    this.QuestRewardMail = 0;
    this.MissionRewardMail = 0;
  }
}

/// Defined by EntertainProductionTime.xlsx
public struct EntertainProductionTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainProductionTime GetRootAsEntertainProductionTime(ByteBuffer _bb) { return GetRootAsEntertainProductionTime(_bb, new EntertainProductionTime()); }
  public static EntertainProductionTime GetRootAsEntertainProductionTime(ByteBuffer _bb, EntertainProductionTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainProductionTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// 결과 스크린 연출에서 스크린을 줌업하는데 걸리는 시간
  public int HeadsAndTailsScreenZoomupTime { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 결과 스크린 연출에서 스크린 줌업이 끝난 후, 줌업 상태에서 유지하는 시간
  public int HeadsAndTailsScreenViewTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 결과 스크린 연출이 끝난 후, 보상 UI가 표시될 때까지의 시간
  public int HeadsAndTailsResultShowDelay { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 보상 UI 연출에서 한 항목이 보이고, 다음 항목이 보일 때까지의 딜레이 시간
  public int HeadsAndTailsResultUnitShowDelay { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 전광판 연출 딜레이.\n- 실제 베팅액 공개 후, 결과 애니메이션 나오기까지의 대기 시간.\n- 동전 애니메이션 후, Win/Lose 나오기까지 대기 시간.\n- WIN/LOSE 후, 프리 카메라로 돌릴때까지의 대기 시간.
  public int HeadsAndTailsScreenDelay { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EntertainProductionTime> CreateEntertainProductionTime(FlatBufferBuilder builder,
      int HeadsAndTails_Screen_Zoomup_time = 0,
      int HeadsAndTails_Screen_View_Time = 0,
      int HeadsAndTails_Result_Show_Delay = 0,
      int HeadsAndTails_Result_Unit_Show_Delay = 0,
      int HeadsAndTails_ScreenDelay = 0) {
    builder.StartTable(5);
    EntertainProductionTime.AddHeadsAndTailsScreenDelay(builder, HeadsAndTails_ScreenDelay);
    EntertainProductionTime.AddHeadsAndTailsResultUnitShowDelay(builder, HeadsAndTails_Result_Unit_Show_Delay);
    EntertainProductionTime.AddHeadsAndTailsResultShowDelay(builder, HeadsAndTails_Result_Show_Delay);
    EntertainProductionTime.AddHeadsAndTailsScreenViewTime(builder, HeadsAndTails_Screen_View_Time);
    EntertainProductionTime.AddHeadsAndTailsScreenZoomupTime(builder, HeadsAndTails_Screen_Zoomup_time);
    return EntertainProductionTime.EndEntertainProductionTime(builder);
  }

  public static void StartEntertainProductionTime(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddHeadsAndTailsScreenZoomupTime(FlatBufferBuilder builder, int HeadsAndTailsScreenZoomupTime) { builder.AddInt(0, HeadsAndTailsScreenZoomupTime, 0); }
  public static void AddHeadsAndTailsScreenViewTime(FlatBufferBuilder builder, int HeadsAndTailsScreenViewTime) { builder.AddInt(1, HeadsAndTailsScreenViewTime, 0); }
  public static void AddHeadsAndTailsResultShowDelay(FlatBufferBuilder builder, int HeadsAndTailsResultShowDelay) { builder.AddInt(2, HeadsAndTailsResultShowDelay, 0); }
  public static void AddHeadsAndTailsResultUnitShowDelay(FlatBufferBuilder builder, int HeadsAndTailsResultUnitShowDelay) { builder.AddInt(3, HeadsAndTailsResultUnitShowDelay, 0); }
  public static void AddHeadsAndTailsScreenDelay(FlatBufferBuilder builder, int HeadsAndTailsScreenDelay) { builder.AddInt(4, HeadsAndTailsScreenDelay, 0); }
  public static Offset<GDT.EntertainProductionTime> EndEntertainProductionTime(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainProductionTime>(o);
  }
  public EntertainProductionTimeT UnPack() {
    var _o = new EntertainProductionTimeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainProductionTimeT _o) {
    _o.HeadsAndTailsScreenZoomupTime = this.HeadsAndTailsScreenZoomupTime;
    _o.HeadsAndTailsScreenViewTime = this.HeadsAndTailsScreenViewTime;
    _o.HeadsAndTailsResultShowDelay = this.HeadsAndTailsResultShowDelay;
    _o.HeadsAndTailsResultUnitShowDelay = this.HeadsAndTailsResultUnitShowDelay;
    _o.HeadsAndTailsScreenDelay = this.HeadsAndTailsScreenDelay;
  }
  public static Offset<GDT.EntertainProductionTime> Pack(FlatBufferBuilder builder, EntertainProductionTimeT _o) {
    if (_o == null) return default(Offset<GDT.EntertainProductionTime>);
    return CreateEntertainProductionTime(
      builder,
      _o.HeadsAndTailsScreenZoomupTime,
      _o.HeadsAndTailsScreenViewTime,
      _o.HeadsAndTailsResultShowDelay,
      _o.HeadsAndTailsResultUnitShowDelay,
      _o.HeadsAndTailsScreenDelay);
  }
};

public class EntertainProductionTimeT
{
  public int HeadsAndTailsScreenZoomupTime { get; set; }
  public int HeadsAndTailsScreenViewTime { get; set; }
  public int HeadsAndTailsResultShowDelay { get; set; }
  public int HeadsAndTailsResultUnitShowDelay { get; set; }
  public int HeadsAndTailsScreenDelay { get; set; }

  public EntertainProductionTimeT() {
    this.HeadsAndTailsScreenZoomupTime = 0;
    this.HeadsAndTailsScreenViewTime = 0;
    this.HeadsAndTailsResultShowDelay = 0;
    this.HeadsAndTailsResultUnitShowDelay = 0;
    this.HeadsAndTailsScreenDelay = 0;
  }
}

/// Defined by HoldemProductionTime.xlsx
public struct HoldemProductionTime : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HoldemProductionTime GetRootAsHoldemProductionTime(ByteBuffer _bb) { return GetRootAsHoldemProductionTime(_bb, new HoldemProductionTime()); }
  public static HoldemProductionTime GetRootAsHoldemProductionTime(ByteBuffer _bb, HoldemProductionTime obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HoldemProductionTime __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  /// 유저의 베팅을 팟에 모으는 시간
  public int HoldemPotCollect { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 게임 종료 후, 다음 게임까지 대기하는 시간
  public int HoldemNextGameWait { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 프리플랍에서 ANTE를 납부하는 시간.
  public int PreFlopAnte { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 첫 베팅에서 SB와 BB가 각각 베팅하는 시간
  public int BettingSBBB { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 쇼 다운 연출 이펙트 출력시간. 폴드에 의한 승리일 때는 생략
  public int ShowdownEffect { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 유저별) 카드 오픈 시간. 폴드에 의한 승리일 때는 생략
  public int ShowdownCardOpen { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 승리한 유저 연출
  public int ShowdownWinner { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 잭팟 연출 시간. 잭팟이 없을 경우 생략
  public int JackpotEffect { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 프리플랍에 소모하는 전체 시간
  public int PreFlopServerTime { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 플랍, 턴, 리버에 각각 소모하는 시간
  public int FlopTurnRiverServerTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 콜 사운드
  public int HoldemSoundCall { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 폴드 사운드
  public int HoldemSoundFold { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 벳 사운드
  public int HoldemSoundBet { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 체크 사운드
  public int HoldemSoundCheck { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 레이즈 사운드
  public int HoldemSoundRaise { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 올인 사운드
  public int HoldemSoundAllIn { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 베팅할 때 칩이 차르륵 하는 소리. 위의 사운드랑 같이 나오며, Ante, SB, BB 베팅때도 출력.
  public int HoldemSoundBetting { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 다른 유저 입장
  public int HoldemSoundUserIn { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 다른 유저 퇴장
  public int HoldemSoundUserOut { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 카드 전달(프리플랍, 카드 오픈, 플랍/턴/리버의 카드 오픈)
  public int HoldemSoundCardDealing { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 쇼다운 연출
  public int HoldemSoundShowDown { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 잭팟 연출
  public int HoldemSoundJackpot { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 승리 사운드
  public int HoldemSoundWin { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 패배 사운드(폴드 상태에서 결과 나올때도 사용)
  public int HoldemSoundLose { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  /// 트리플 이상(이펙트 표시될 때의)의 승리 사운드
  public int HoldemSoundGreatWin { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.HoldemProductionTime> CreateHoldemProductionTime(FlatBufferBuilder builder,
      int Holdem_Pot_Collect = 0,
      int Holdem_NextGame_Wait = 0,
      int PreFlop_Ante = 0,
      int Betting_SB_BB = 0,
      int Showdown_Effect = 0,
      int Showdown_CardOpen = 0,
      int Showdown_Winner = 0,
      int Jackpot_Effect = 0,
      int PreFlop_Server_Time = 0,
      int Flop_Turn_River_Server_Time = 0,
      int Holdem_Sound_Call = 0,
      int Holdem_Sound_Fold = 0,
      int Holdem_Sound_Bet = 0,
      int Holdem_Sound_Check = 0,
      int Holdem_Sound_Raise = 0,
      int Holdem_Sound_All_in = 0,
      int Holdem_Sound_Betting = 0,
      int Holdem_Sound_User_In = 0,
      int Holdem_Sound_User_Out = 0,
      int Holdem_Sound_CardDealing = 0,
      int Holdem_Sound_ShowDown = 0,
      int Holdem_Sound_Jackpot = 0,
      int Holdem_Sound_Win = 0,
      int Holdem_Sound_Lose = 0,
      int Holdem_Sound_GreatWin = 0) {
    builder.StartTable(25);
    HoldemProductionTime.AddHoldemSoundGreatWin(builder, Holdem_Sound_GreatWin);
    HoldemProductionTime.AddHoldemSoundLose(builder, Holdem_Sound_Lose);
    HoldemProductionTime.AddHoldemSoundWin(builder, Holdem_Sound_Win);
    HoldemProductionTime.AddHoldemSoundJackpot(builder, Holdem_Sound_Jackpot);
    HoldemProductionTime.AddHoldemSoundShowDown(builder, Holdem_Sound_ShowDown);
    HoldemProductionTime.AddHoldemSoundCardDealing(builder, Holdem_Sound_CardDealing);
    HoldemProductionTime.AddHoldemSoundUserOut(builder, Holdem_Sound_User_Out);
    HoldemProductionTime.AddHoldemSoundUserIn(builder, Holdem_Sound_User_In);
    HoldemProductionTime.AddHoldemSoundBetting(builder, Holdem_Sound_Betting);
    HoldemProductionTime.AddHoldemSoundAllIn(builder, Holdem_Sound_All_in);
    HoldemProductionTime.AddHoldemSoundRaise(builder, Holdem_Sound_Raise);
    HoldemProductionTime.AddHoldemSoundCheck(builder, Holdem_Sound_Check);
    HoldemProductionTime.AddHoldemSoundBet(builder, Holdem_Sound_Bet);
    HoldemProductionTime.AddHoldemSoundFold(builder, Holdem_Sound_Fold);
    HoldemProductionTime.AddHoldemSoundCall(builder, Holdem_Sound_Call);
    HoldemProductionTime.AddFlopTurnRiverServerTime(builder, Flop_Turn_River_Server_Time);
    HoldemProductionTime.AddPreFlopServerTime(builder, PreFlop_Server_Time);
    HoldemProductionTime.AddJackpotEffect(builder, Jackpot_Effect);
    HoldemProductionTime.AddShowdownWinner(builder, Showdown_Winner);
    HoldemProductionTime.AddShowdownCardOpen(builder, Showdown_CardOpen);
    HoldemProductionTime.AddShowdownEffect(builder, Showdown_Effect);
    HoldemProductionTime.AddBettingSBBB(builder, Betting_SB_BB);
    HoldemProductionTime.AddPreFlopAnte(builder, PreFlop_Ante);
    HoldemProductionTime.AddHoldemNextGameWait(builder, Holdem_NextGame_Wait);
    HoldemProductionTime.AddHoldemPotCollect(builder, Holdem_Pot_Collect);
    return HoldemProductionTime.EndHoldemProductionTime(builder);
  }

  public static void StartHoldemProductionTime(FlatBufferBuilder builder) { builder.StartTable(25); }
  public static void AddHoldemPotCollect(FlatBufferBuilder builder, int HoldemPotCollect) { builder.AddInt(0, HoldemPotCollect, 0); }
  public static void AddHoldemNextGameWait(FlatBufferBuilder builder, int HoldemNextGameWait) { builder.AddInt(1, HoldemNextGameWait, 0); }
  public static void AddPreFlopAnte(FlatBufferBuilder builder, int PreFlopAnte) { builder.AddInt(2, PreFlopAnte, 0); }
  public static void AddBettingSBBB(FlatBufferBuilder builder, int BettingSBBB) { builder.AddInt(3, BettingSBBB, 0); }
  public static void AddShowdownEffect(FlatBufferBuilder builder, int ShowdownEffect) { builder.AddInt(4, ShowdownEffect, 0); }
  public static void AddShowdownCardOpen(FlatBufferBuilder builder, int ShowdownCardOpen) { builder.AddInt(5, ShowdownCardOpen, 0); }
  public static void AddShowdownWinner(FlatBufferBuilder builder, int ShowdownWinner) { builder.AddInt(6, ShowdownWinner, 0); }
  public static void AddJackpotEffect(FlatBufferBuilder builder, int JackpotEffect) { builder.AddInt(7, JackpotEffect, 0); }
  public static void AddPreFlopServerTime(FlatBufferBuilder builder, int PreFlopServerTime) { builder.AddInt(8, PreFlopServerTime, 0); }
  public static void AddFlopTurnRiverServerTime(FlatBufferBuilder builder, int FlopTurnRiverServerTime) { builder.AddInt(9, FlopTurnRiverServerTime, 0); }
  public static void AddHoldemSoundCall(FlatBufferBuilder builder, int HoldemSoundCall) { builder.AddInt(10, HoldemSoundCall, 0); }
  public static void AddHoldemSoundFold(FlatBufferBuilder builder, int HoldemSoundFold) { builder.AddInt(11, HoldemSoundFold, 0); }
  public static void AddHoldemSoundBet(FlatBufferBuilder builder, int HoldemSoundBet) { builder.AddInt(12, HoldemSoundBet, 0); }
  public static void AddHoldemSoundCheck(FlatBufferBuilder builder, int HoldemSoundCheck) { builder.AddInt(13, HoldemSoundCheck, 0); }
  public static void AddHoldemSoundRaise(FlatBufferBuilder builder, int HoldemSoundRaise) { builder.AddInt(14, HoldemSoundRaise, 0); }
  public static void AddHoldemSoundAllIn(FlatBufferBuilder builder, int HoldemSoundAllIn) { builder.AddInt(15, HoldemSoundAllIn, 0); }
  public static void AddHoldemSoundBetting(FlatBufferBuilder builder, int HoldemSoundBetting) { builder.AddInt(16, HoldemSoundBetting, 0); }
  public static void AddHoldemSoundUserIn(FlatBufferBuilder builder, int HoldemSoundUserIn) { builder.AddInt(17, HoldemSoundUserIn, 0); }
  public static void AddHoldemSoundUserOut(FlatBufferBuilder builder, int HoldemSoundUserOut) { builder.AddInt(18, HoldemSoundUserOut, 0); }
  public static void AddHoldemSoundCardDealing(FlatBufferBuilder builder, int HoldemSoundCardDealing) { builder.AddInt(19, HoldemSoundCardDealing, 0); }
  public static void AddHoldemSoundShowDown(FlatBufferBuilder builder, int HoldemSoundShowDown) { builder.AddInt(20, HoldemSoundShowDown, 0); }
  public static void AddHoldemSoundJackpot(FlatBufferBuilder builder, int HoldemSoundJackpot) { builder.AddInt(21, HoldemSoundJackpot, 0); }
  public static void AddHoldemSoundWin(FlatBufferBuilder builder, int HoldemSoundWin) { builder.AddInt(22, HoldemSoundWin, 0); }
  public static void AddHoldemSoundLose(FlatBufferBuilder builder, int HoldemSoundLose) { builder.AddInt(23, HoldemSoundLose, 0); }
  public static void AddHoldemSoundGreatWin(FlatBufferBuilder builder, int HoldemSoundGreatWin) { builder.AddInt(24, HoldemSoundGreatWin, 0); }
  public static Offset<GDT.HoldemProductionTime> EndHoldemProductionTime(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.HoldemProductionTime>(o);
  }
  public HoldemProductionTimeT UnPack() {
    var _o = new HoldemProductionTimeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HoldemProductionTimeT _o) {
    _o.HoldemPotCollect = this.HoldemPotCollect;
    _o.HoldemNextGameWait = this.HoldemNextGameWait;
    _o.PreFlopAnte = this.PreFlopAnte;
    _o.BettingSBBB = this.BettingSBBB;
    _o.ShowdownEffect = this.ShowdownEffect;
    _o.ShowdownCardOpen = this.ShowdownCardOpen;
    _o.ShowdownWinner = this.ShowdownWinner;
    _o.JackpotEffect = this.JackpotEffect;
    _o.PreFlopServerTime = this.PreFlopServerTime;
    _o.FlopTurnRiverServerTime = this.FlopTurnRiverServerTime;
    _o.HoldemSoundCall = this.HoldemSoundCall;
    _o.HoldemSoundFold = this.HoldemSoundFold;
    _o.HoldemSoundBet = this.HoldemSoundBet;
    _o.HoldemSoundCheck = this.HoldemSoundCheck;
    _o.HoldemSoundRaise = this.HoldemSoundRaise;
    _o.HoldemSoundAllIn = this.HoldemSoundAllIn;
    _o.HoldemSoundBetting = this.HoldemSoundBetting;
    _o.HoldemSoundUserIn = this.HoldemSoundUserIn;
    _o.HoldemSoundUserOut = this.HoldemSoundUserOut;
    _o.HoldemSoundCardDealing = this.HoldemSoundCardDealing;
    _o.HoldemSoundShowDown = this.HoldemSoundShowDown;
    _o.HoldemSoundJackpot = this.HoldemSoundJackpot;
    _o.HoldemSoundWin = this.HoldemSoundWin;
    _o.HoldemSoundLose = this.HoldemSoundLose;
    _o.HoldemSoundGreatWin = this.HoldemSoundGreatWin;
  }
  public static Offset<GDT.HoldemProductionTime> Pack(FlatBufferBuilder builder, HoldemProductionTimeT _o) {
    if (_o == null) return default(Offset<GDT.HoldemProductionTime>);
    return CreateHoldemProductionTime(
      builder,
      _o.HoldemPotCollect,
      _o.HoldemNextGameWait,
      _o.PreFlopAnte,
      _o.BettingSBBB,
      _o.ShowdownEffect,
      _o.ShowdownCardOpen,
      _o.ShowdownWinner,
      _o.JackpotEffect,
      _o.PreFlopServerTime,
      _o.FlopTurnRiverServerTime,
      _o.HoldemSoundCall,
      _o.HoldemSoundFold,
      _o.HoldemSoundBet,
      _o.HoldemSoundCheck,
      _o.HoldemSoundRaise,
      _o.HoldemSoundAllIn,
      _o.HoldemSoundBetting,
      _o.HoldemSoundUserIn,
      _o.HoldemSoundUserOut,
      _o.HoldemSoundCardDealing,
      _o.HoldemSoundShowDown,
      _o.HoldemSoundJackpot,
      _o.HoldemSoundWin,
      _o.HoldemSoundLose,
      _o.HoldemSoundGreatWin);
  }
};

public class HoldemProductionTimeT
{
  public int HoldemPotCollect { get; set; }
  public int HoldemNextGameWait { get; set; }
  public int PreFlopAnte { get; set; }
  public int BettingSBBB { get; set; }
  public int ShowdownEffect { get; set; }
  public int ShowdownCardOpen { get; set; }
  public int ShowdownWinner { get; set; }
  public int JackpotEffect { get; set; }
  public int PreFlopServerTime { get; set; }
  public int FlopTurnRiverServerTime { get; set; }
  public int HoldemSoundCall { get; set; }
  public int HoldemSoundFold { get; set; }
  public int HoldemSoundBet { get; set; }
  public int HoldemSoundCheck { get; set; }
  public int HoldemSoundRaise { get; set; }
  public int HoldemSoundAllIn { get; set; }
  public int HoldemSoundBetting { get; set; }
  public int HoldemSoundUserIn { get; set; }
  public int HoldemSoundUserOut { get; set; }
  public int HoldemSoundCardDealing { get; set; }
  public int HoldemSoundShowDown { get; set; }
  public int HoldemSoundJackpot { get; set; }
  public int HoldemSoundWin { get; set; }
  public int HoldemSoundLose { get; set; }
  public int HoldemSoundGreatWin { get; set; }

  public HoldemProductionTimeT() {
    this.HoldemPotCollect = 0;
    this.HoldemNextGameWait = 0;
    this.PreFlopAnte = 0;
    this.BettingSBBB = 0;
    this.ShowdownEffect = 0;
    this.ShowdownCardOpen = 0;
    this.ShowdownWinner = 0;
    this.JackpotEffect = 0;
    this.PreFlopServerTime = 0;
    this.FlopTurnRiverServerTime = 0;
    this.HoldemSoundCall = 0;
    this.HoldemSoundFold = 0;
    this.HoldemSoundBet = 0;
    this.HoldemSoundCheck = 0;
    this.HoldemSoundRaise = 0;
    this.HoldemSoundAllIn = 0;
    this.HoldemSoundBetting = 0;
    this.HoldemSoundUserIn = 0;
    this.HoldemSoundUserOut = 0;
    this.HoldemSoundCardDealing = 0;
    this.HoldemSoundShowDown = 0;
    this.HoldemSoundJackpot = 0;
    this.HoldemSoundWin = 0;
    this.HoldemSoundLose = 0;
    this.HoldemSoundGreatWin = 0;
  }
}

/// Defined by Animation.xlsx
public struct AnimationInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationInfo GetRootAsAnimationInfo(ByteBuffer _bb) { return GetRootAsAnimationInfo(_bb, new AnimationInfo()); }
  public static AnimationInfo GetRootAsAnimationInfo(ByteBuffer _bb, AnimationInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int AnimationID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CharacterType CharacterTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterType.CT_None; } }
  public string MotionName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMotionNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMotionNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMotionNameArray() { return __p.__vector_as_array<byte>(8); }
  public string ANINAME { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetANINAMEBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetANINAMEBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetANINAMEArray() { return __p.__vector_as_array<byte>(10); }
  public bool Loop { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.ActionAnimationType ActionAnimationType { get { int o = __p.__offset(14); return o != 0 ? (GDT.ActionAnimationType)__p.bb.Get(o + __p.bb_pos) : GDT.ActionAnimationType.AAT_None; } }

  public static Offset<GDT.AnimationInfo> CreateAnimationInfo(FlatBufferBuilder builder,
      int AnimationID = 0,
      GDT.CharacterType CharacterTypeID = GDT.CharacterType.CT_None,
      StringOffset MotionNameOffset = default(StringOffset),
      StringOffset ANINAMEOffset = default(StringOffset),
      bool loop = false,
      GDT.ActionAnimationType ActionAnimationType = GDT.ActionAnimationType.AAT_None) {
    builder.StartTable(6);
    AnimationInfo.AddANINAME(builder, ANINAMEOffset);
    AnimationInfo.AddMotionName(builder, MotionNameOffset);
    AnimationInfo.AddAnimationID(builder, AnimationID);
    AnimationInfo.AddActionAnimationType(builder, ActionAnimationType);
    AnimationInfo.AddLoop(builder, loop);
    AnimationInfo.AddCharacterTypeID(builder, CharacterTypeID);
    return AnimationInfo.EndAnimationInfo(builder);
  }

  public static void StartAnimationInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddAnimationID(FlatBufferBuilder builder, int AnimationID) { builder.AddInt(0, AnimationID, 0); }
  public static void AddCharacterTypeID(FlatBufferBuilder builder, GDT.CharacterType CharacterTypeID) { builder.AddByte(1, (byte)CharacterTypeID, 0); }
  public static void AddMotionName(FlatBufferBuilder builder, StringOffset MotionNameOffset) { builder.AddOffset(2, MotionNameOffset.Value, 0); }
  public static void AddANINAME(FlatBufferBuilder builder, StringOffset ANINAMEOffset) { builder.AddOffset(3, ANINAMEOffset.Value, 0); }
  public static void AddLoop(FlatBufferBuilder builder, bool loop) { builder.AddBool(4, loop, false); }
  public static void AddActionAnimationType(FlatBufferBuilder builder, GDT.ActionAnimationType ActionAnimationType) { builder.AddByte(5, (byte)ActionAnimationType, 0); }
  public static Offset<GDT.AnimationInfo> EndAnimationInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.AnimationInfo>(o);
  }
  public AnimationInfoT UnPack() {
    var _o = new AnimationInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationInfoT _o) {
    _o.AnimationID = this.AnimationID;
    _o.CharacterTypeID = this.CharacterTypeID;
    _o.MotionName = this.MotionName;
    _o.ANINAME = this.ANINAME;
    _o.Loop = this.Loop;
    _o.ActionAnimationType = this.ActionAnimationType;
  }
  public static Offset<GDT.AnimationInfo> Pack(FlatBufferBuilder builder, AnimationInfoT _o) {
    if (_o == null) return default(Offset<GDT.AnimationInfo>);
    var _MotionName = _o.MotionName == null ? default(StringOffset) : builder.CreateString(_o.MotionName);
    var _ANINAME = _o.ANINAME == null ? default(StringOffset) : builder.CreateString(_o.ANINAME);
    return CreateAnimationInfo(
      builder,
      _o.AnimationID,
      _o.CharacterTypeID,
      _MotionName,
      _ANINAME,
      _o.Loop,
      _o.ActionAnimationType);
  }
};

public class AnimationInfoT
{
  public int AnimationID { get; set; }
  public GDT.CharacterType CharacterTypeID { get; set; }
  public string MotionName { get; set; }
  public string ANINAME { get; set; }
  public bool Loop { get; set; }
  public GDT.ActionAnimationType ActionAnimationType { get; set; }

  public AnimationInfoT() {
    this.AnimationID = 0;
    this.CharacterTypeID = GDT.CharacterType.CT_None;
    this.MotionName = null;
    this.ANINAME = null;
    this.Loop = false;
    this.ActionAnimationType = GDT.ActionAnimationType.AAT_None;
  }
}

public struct AnimationInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationInfoTable GetRootAsAnimationInfoTable(ByteBuffer _bb) { return GetRootAsAnimationInfoTable(_bb, new AnimationInfoTable()); }
  public static AnimationInfoTable GetRootAsAnimationInfoTable(ByteBuffer _bb, AnimationInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.AnimationInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.AnimationInfo?)(new GDT.AnimationInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.AnimationInfoTable> CreateAnimationInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AnimationInfoTable.AddRows(builder, RowsOffset);
    return AnimationInfoTable.EndAnimationInfoTable(builder);
  }

  public static void StartAnimationInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.AnimationInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.AnimationInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.AnimationInfoTable> EndAnimationInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.AnimationInfoTable>(o);
  }
  public AnimationInfoTableT UnPack() {
    var _o = new AnimationInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationInfoTableT _o) {
    _o.Rows = new List<GDT.AnimationInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.AnimationInfoTable> Pack(FlatBufferBuilder builder, AnimationInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.AnimationInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.AnimationInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.AnimationInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateAnimationInfoTable(
      builder,
      _Rows);
  }
};

public class AnimationInfoTableT
{
  public List<GDT.AnimationInfoT> Rows { get; set; }

  public AnimationInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by CameraSetting.xlsx
public struct CameraSetting : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CameraSetting GetRootAsCameraSetting(ByteBuffer _bb) { return GetRootAsCameraSetting(_bb, new CameraSetting()); }
  public static CameraSetting GetRootAsCameraSetting(ByteBuffer _bb, CameraSetting obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraSetting __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CameraMainType CameraMainTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CameraMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CameraMainType.CMT_None; } }
  public GDT.CameraSubType CameraSubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CameraSubType)__p.bb.Get(o + __p.bb_pos) : GDT.CameraSubType.CST_Free; } }
  public bool IsPreset { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CameraName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCameraNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCameraNameArray() { return __p.__vector_as_array<byte>(10); }
  public string CameraIconName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCameraIconNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCameraIconNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCameraIconNameArray() { return __p.__vector_as_array<byte>(12); }
  public float StartHorizontalDefault { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float StartVerticalDefault { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMinX { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomBasicX { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMaxX { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMinY { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomBasicY { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CameraZoomMaxY { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DistanceDefault { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DistanceMin { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float DistanceMax { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float YMin { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float YMax { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FOV { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ClippingNear { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ClippingFar { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SpeedX { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SpeedY { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OffsetX { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OffsetY { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float OffsetZ { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.vector3? MinRadius { get { int o = __p.__offset(56); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? MaxRadius { get { int o = __p.__offset(58); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? BaseRadius { get { int o = __p.__offset(60); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? BaseHeight { get { int o = __p.__offset(62); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartCameraSetting(FlatBufferBuilder builder) { builder.StartTable(30); }
  public static void AddCameraMainTypeID(FlatBufferBuilder builder, GDT.CameraMainType CameraMainTypeID) { builder.AddByte(0, (byte)CameraMainTypeID, 0); }
  public static void AddCameraSubTypeID(FlatBufferBuilder builder, GDT.CameraSubType CameraSubTypeID) { builder.AddByte(1, (byte)CameraSubTypeID, 0); }
  public static void AddIsPreset(FlatBufferBuilder builder, bool isPreset) { builder.AddBool(2, isPreset, false); }
  public static void AddCameraName(FlatBufferBuilder builder, StringOffset cameraNameOffset) { builder.AddOffset(3, cameraNameOffset.Value, 0); }
  public static void AddCameraIconName(FlatBufferBuilder builder, StringOffset cameraIconNameOffset) { builder.AddOffset(4, cameraIconNameOffset.Value, 0); }
  public static void AddStartHorizontalDefault(FlatBufferBuilder builder, float StartHorizontalDefault) { builder.AddFloat(5, StartHorizontalDefault, 0.0f); }
  public static void AddStartVerticalDefault(FlatBufferBuilder builder, float StartVerticalDefault) { builder.AddFloat(6, StartVerticalDefault, 0.0f); }
  public static void AddCameraZoomMinX(FlatBufferBuilder builder, float CameraZoomMinX) { builder.AddFloat(7, CameraZoomMinX, 0.0f); }
  public static void AddCameraZoomBasicX(FlatBufferBuilder builder, float CameraZoomBasicX) { builder.AddFloat(8, CameraZoomBasicX, 0.0f); }
  public static void AddCameraZoomMaxX(FlatBufferBuilder builder, float CameraZoomMaxX) { builder.AddFloat(9, CameraZoomMaxX, 0.0f); }
  public static void AddCameraZoomMinY(FlatBufferBuilder builder, float CameraZoomMinY) { builder.AddFloat(10, CameraZoomMinY, 0.0f); }
  public static void AddCameraZoomBasicY(FlatBufferBuilder builder, float CameraZoomBasicY) { builder.AddFloat(11, CameraZoomBasicY, 0.0f); }
  public static void AddCameraZoomMaxY(FlatBufferBuilder builder, float CameraZoomMaxY) { builder.AddFloat(12, CameraZoomMaxY, 0.0f); }
  public static void AddDistanceDefault(FlatBufferBuilder builder, float distanceDefault) { builder.AddFloat(13, distanceDefault, 0.0f); }
  public static void AddDistanceMin(FlatBufferBuilder builder, float distanceMin) { builder.AddFloat(14, distanceMin, 0.0f); }
  public static void AddDistanceMax(FlatBufferBuilder builder, float distanceMax) { builder.AddFloat(15, distanceMax, 0.0f); }
  public static void AddYMin(FlatBufferBuilder builder, float yMin) { builder.AddFloat(16, yMin, 0.0f); }
  public static void AddYMax(FlatBufferBuilder builder, float yMax) { builder.AddFloat(17, yMax, 0.0f); }
  public static void AddFOV(FlatBufferBuilder builder, float FOV) { builder.AddFloat(18, FOV, 0.0f); }
  public static void AddClippingNear(FlatBufferBuilder builder, float clippingNear) { builder.AddFloat(19, clippingNear, 0.0f); }
  public static void AddClippingFar(FlatBufferBuilder builder, float clippingFar) { builder.AddFloat(20, clippingFar, 0.0f); }
  public static void AddSpeedX(FlatBufferBuilder builder, float speedX) { builder.AddFloat(21, speedX, 0.0f); }
  public static void AddSpeedY(FlatBufferBuilder builder, float speedY) { builder.AddFloat(22, speedY, 0.0f); }
  public static void AddOffsetX(FlatBufferBuilder builder, float offsetX) { builder.AddFloat(23, offsetX, 0.0f); }
  public static void AddOffsetY(FlatBufferBuilder builder, float offsetY) { builder.AddFloat(24, offsetY, 0.0f); }
  public static void AddOffsetZ(FlatBufferBuilder builder, float offsetZ) { builder.AddFloat(25, offsetZ, 0.0f); }
  public static void AddMinRadius(FlatBufferBuilder builder, Offset<GDT.vector3> MinRadiusOffset) { builder.AddStruct(26, MinRadiusOffset.Value, 0); }
  public static void AddMaxRadius(FlatBufferBuilder builder, Offset<GDT.vector3> MaxRadiusOffset) { builder.AddStruct(27, MaxRadiusOffset.Value, 0); }
  public static void AddBaseRadius(FlatBufferBuilder builder, Offset<GDT.vector3> BaseRadiusOffset) { builder.AddStruct(28, BaseRadiusOffset.Value, 0); }
  public static void AddBaseHeight(FlatBufferBuilder builder, Offset<GDT.vector3> BaseHeightOffset) { builder.AddStruct(29, BaseHeightOffset.Value, 0); }
  public static Offset<GDT.CameraSetting> EndCameraSetting(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CameraSetting>(o);
  }
  public CameraSettingT UnPack() {
    var _o = new CameraSettingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraSettingT _o) {
    _o.CameraMainTypeID = this.CameraMainTypeID;
    _o.CameraSubTypeID = this.CameraSubTypeID;
    _o.IsPreset = this.IsPreset;
    _o.CameraName = this.CameraName;
    _o.CameraIconName = this.CameraIconName;
    _o.StartHorizontalDefault = this.StartHorizontalDefault;
    _o.StartVerticalDefault = this.StartVerticalDefault;
    _o.CameraZoomMinX = this.CameraZoomMinX;
    _o.CameraZoomBasicX = this.CameraZoomBasicX;
    _o.CameraZoomMaxX = this.CameraZoomMaxX;
    _o.CameraZoomMinY = this.CameraZoomMinY;
    _o.CameraZoomBasicY = this.CameraZoomBasicY;
    _o.CameraZoomMaxY = this.CameraZoomMaxY;
    _o.DistanceDefault = this.DistanceDefault;
    _o.DistanceMin = this.DistanceMin;
    _o.DistanceMax = this.DistanceMax;
    _o.YMin = this.YMin;
    _o.YMax = this.YMax;
    _o.FOV = this.FOV;
    _o.ClippingNear = this.ClippingNear;
    _o.ClippingFar = this.ClippingFar;
    _o.SpeedX = this.SpeedX;
    _o.SpeedY = this.SpeedY;
    _o.OffsetX = this.OffsetX;
    _o.OffsetY = this.OffsetY;
    _o.OffsetZ = this.OffsetZ;
    _o.MinRadius = this.MinRadius.HasValue ? this.MinRadius.Value.UnPack() : null;
    _o.MaxRadius = this.MaxRadius.HasValue ? this.MaxRadius.Value.UnPack() : null;
    _o.BaseRadius = this.BaseRadius.HasValue ? this.BaseRadius.Value.UnPack() : null;
    _o.BaseHeight = this.BaseHeight.HasValue ? this.BaseHeight.Value.UnPack() : null;
  }
  public static Offset<GDT.CameraSetting> Pack(FlatBufferBuilder builder, CameraSettingT _o) {
    if (_o == null) return default(Offset<GDT.CameraSetting>);
    var _cameraName = _o.CameraName == null ? default(StringOffset) : builder.CreateString(_o.CameraName);
    var _cameraIconName = _o.CameraIconName == null ? default(StringOffset) : builder.CreateString(_o.CameraIconName);
    StartCameraSetting(builder);
    AddCameraMainTypeID(builder, _o.CameraMainTypeID);
    AddCameraSubTypeID(builder, _o.CameraSubTypeID);
    AddIsPreset(builder, _o.IsPreset);
    AddCameraName(builder, _cameraName);
    AddCameraIconName(builder, _cameraIconName);
    AddStartHorizontalDefault(builder, _o.StartHorizontalDefault);
    AddStartVerticalDefault(builder, _o.StartVerticalDefault);
    AddCameraZoomMinX(builder, _o.CameraZoomMinX);
    AddCameraZoomBasicX(builder, _o.CameraZoomBasicX);
    AddCameraZoomMaxX(builder, _o.CameraZoomMaxX);
    AddCameraZoomMinY(builder, _o.CameraZoomMinY);
    AddCameraZoomBasicY(builder, _o.CameraZoomBasicY);
    AddCameraZoomMaxY(builder, _o.CameraZoomMaxY);
    AddDistanceDefault(builder, _o.DistanceDefault);
    AddDistanceMin(builder, _o.DistanceMin);
    AddDistanceMax(builder, _o.DistanceMax);
    AddYMin(builder, _o.YMin);
    AddYMax(builder, _o.YMax);
    AddFOV(builder, _o.FOV);
    AddClippingNear(builder, _o.ClippingNear);
    AddClippingFar(builder, _o.ClippingFar);
    AddSpeedX(builder, _o.SpeedX);
    AddSpeedY(builder, _o.SpeedY);
    AddOffsetX(builder, _o.OffsetX);
    AddOffsetY(builder, _o.OffsetY);
    AddOffsetZ(builder, _o.OffsetZ);
    AddMinRadius(builder, GDT.vector3.Pack(builder, _o.MinRadius));
    AddMaxRadius(builder, GDT.vector3.Pack(builder, _o.MaxRadius));
    AddBaseRadius(builder, GDT.vector3.Pack(builder, _o.BaseRadius));
    AddBaseHeight(builder, GDT.vector3.Pack(builder, _o.BaseHeight));
    return EndCameraSetting(builder);
  }
};

public class CameraSettingT
{
  public GDT.CameraMainType CameraMainTypeID { get; set; }
  public GDT.CameraSubType CameraSubTypeID { get; set; }
  public bool IsPreset { get; set; }
  public string CameraName { get; set; }
  public string CameraIconName { get; set; }
  public float StartHorizontalDefault { get; set; }
  public float StartVerticalDefault { get; set; }
  public float CameraZoomMinX { get; set; }
  public float CameraZoomBasicX { get; set; }
  public float CameraZoomMaxX { get; set; }
  public float CameraZoomMinY { get; set; }
  public float CameraZoomBasicY { get; set; }
  public float CameraZoomMaxY { get; set; }
  public float DistanceDefault { get; set; }
  public float DistanceMin { get; set; }
  public float DistanceMax { get; set; }
  public float YMin { get; set; }
  public float YMax { get; set; }
  public float FOV { get; set; }
  public float ClippingNear { get; set; }
  public float ClippingFar { get; set; }
  public float SpeedX { get; set; }
  public float SpeedY { get; set; }
  public float OffsetX { get; set; }
  public float OffsetY { get; set; }
  public float OffsetZ { get; set; }
  public GDT.vector3T MinRadius { get; set; }
  public GDT.vector3T MaxRadius { get; set; }
  public GDT.vector3T BaseRadius { get; set; }
  public GDT.vector3T BaseHeight { get; set; }

  public CameraSettingT() {
    this.CameraMainTypeID = GDT.CameraMainType.CMT_None;
    this.CameraSubTypeID = GDT.CameraSubType.CST_Free;
    this.IsPreset = false;
    this.CameraName = null;
    this.CameraIconName = null;
    this.StartHorizontalDefault = 0.0f;
    this.StartVerticalDefault = 0.0f;
    this.CameraZoomMinX = 0.0f;
    this.CameraZoomBasicX = 0.0f;
    this.CameraZoomMaxX = 0.0f;
    this.CameraZoomMinY = 0.0f;
    this.CameraZoomBasicY = 0.0f;
    this.CameraZoomMaxY = 0.0f;
    this.DistanceDefault = 0.0f;
    this.DistanceMin = 0.0f;
    this.DistanceMax = 0.0f;
    this.YMin = 0.0f;
    this.YMax = 0.0f;
    this.FOV = 0.0f;
    this.ClippingNear = 0.0f;
    this.ClippingFar = 0.0f;
    this.SpeedX = 0.0f;
    this.SpeedY = 0.0f;
    this.OffsetX = 0.0f;
    this.OffsetY = 0.0f;
    this.OffsetZ = 0.0f;
    this.MinRadius = new GDT.vector3T();
    this.MaxRadius = new GDT.vector3T();
    this.BaseRadius = new GDT.vector3T();
    this.BaseHeight = new GDT.vector3T();
  }
}

public struct CameraSettingTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CameraSettingTable GetRootAsCameraSettingTable(ByteBuffer _bb) { return GetRootAsCameraSettingTable(_bb, new CameraSettingTable()); }
  public static CameraSettingTable GetRootAsCameraSettingTable(ByteBuffer _bb, CameraSettingTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CameraSettingTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CameraSetting? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CameraSetting?)(new GDT.CameraSetting()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CameraSettingTable> CreateCameraSettingTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CameraSettingTable.AddRows(builder, RowsOffset);
    return CameraSettingTable.EndCameraSettingTable(builder);
  }

  public static void StartCameraSettingTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CameraSetting>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CameraSetting>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CameraSettingTable> EndCameraSettingTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CameraSettingTable>(o);
  }
  public CameraSettingTableT UnPack() {
    var _o = new CameraSettingTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CameraSettingTableT _o) {
    _o.Rows = new List<GDT.CameraSettingT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CameraSettingTable> Pack(FlatBufferBuilder builder, CameraSettingTableT _o) {
    if (_o == null) return default(Offset<GDT.CameraSettingTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CameraSetting>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CameraSetting.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCameraSettingTable(
      builder,
      _Rows);
  }
};

public class CameraSettingTableT
{
  public List<GDT.CameraSettingT> Rows { get; set; }

  public CameraSettingTableT() {
    this.Rows = null;
  }
}

/// Defined by CashShop.xlsx
public struct CashShopInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CashShopInfo GetRootAsCashShopInfo(ByteBuffer _bb) { return GetRootAsCashShopInfo(_bb, new CashShopInfo()); }
  public static CashShopInfo GetRootAsCashShopInfo(ByteBuffer _bb, CashShopInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CashShopInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CashShopMainType CashShopMainType { get { int o = __p.__offset(6); return o != 0 ? (GDT.CashShopMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CashShopMainType.CSMT_None; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ResourcesName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourcesNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourcesNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourcesNameArray() { return __p.__vector_as_array<byte>(10); }
  public string ResourcesText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourcesTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetResourcesTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetResourcesTextArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.CashShopInfo> CreateCashShopInfo(FlatBufferBuilder builder,
      int Index = 0,
      GDT.CashShopMainType CashShopMainType = GDT.CashShopMainType.CSMT_None,
      int Sort = 0,
      StringOffset ResourcesNameOffset = default(StringOffset),
      StringOffset ResourcesTextOffset = default(StringOffset)) {
    builder.StartTable(5);
    CashShopInfo.AddResourcesText(builder, ResourcesTextOffset);
    CashShopInfo.AddResourcesName(builder, ResourcesNameOffset);
    CashShopInfo.AddSort(builder, Sort);
    CashShopInfo.AddIndex(builder, Index);
    CashShopInfo.AddCashShopMainType(builder, CashShopMainType);
    return CashShopInfo.EndCashShopInfo(builder);
  }

  public static void StartCashShopInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddCashShopMainType(FlatBufferBuilder builder, GDT.CashShopMainType CashShopMainType) { builder.AddByte(1, (byte)CashShopMainType, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(2, Sort, 0); }
  public static void AddResourcesName(FlatBufferBuilder builder, StringOffset ResourcesNameOffset) { builder.AddOffset(3, ResourcesNameOffset.Value, 0); }
  public static void AddResourcesText(FlatBufferBuilder builder, StringOffset ResourcesTextOffset) { builder.AddOffset(4, ResourcesTextOffset.Value, 0); }
  public static Offset<GDT.CashShopInfo> EndCashShopInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CashShopInfo>(o);
  }
  public CashShopInfoT UnPack() {
    var _o = new CashShopInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CashShopInfoT _o) {
    _o.Index = this.Index;
    _o.CashShopMainType = this.CashShopMainType;
    _o.Sort = this.Sort;
    _o.ResourcesName = this.ResourcesName;
    _o.ResourcesText = this.ResourcesText;
  }
  public static Offset<GDT.CashShopInfo> Pack(FlatBufferBuilder builder, CashShopInfoT _o) {
    if (_o == null) return default(Offset<GDT.CashShopInfo>);
    var _ResourcesName = _o.ResourcesName == null ? default(StringOffset) : builder.CreateString(_o.ResourcesName);
    var _ResourcesText = _o.ResourcesText == null ? default(StringOffset) : builder.CreateString(_o.ResourcesText);
    return CreateCashShopInfo(
      builder,
      _o.Index,
      _o.CashShopMainType,
      _o.Sort,
      _ResourcesName,
      _ResourcesText);
  }
};

public class CashShopInfoT
{
  public int Index { get; set; }
  public GDT.CashShopMainType CashShopMainType { get; set; }
  public int Sort { get; set; }
  public string ResourcesName { get; set; }
  public string ResourcesText { get; set; }

  public CashShopInfoT() {
    this.Index = 0;
    this.CashShopMainType = GDT.CashShopMainType.CSMT_None;
    this.Sort = 0;
    this.ResourcesName = null;
    this.ResourcesText = null;
  }
}

public struct CashShopInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CashShopInfoTable GetRootAsCashShopInfoTable(ByteBuffer _bb) { return GetRootAsCashShopInfoTable(_bb, new CashShopInfoTable()); }
  public static CashShopInfoTable GetRootAsCashShopInfoTable(ByteBuffer _bb, CashShopInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CashShopInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CashShopInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CashShopInfo?)(new GDT.CashShopInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CashShopInfoTable> CreateCashShopInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CashShopInfoTable.AddRows(builder, RowsOffset);
    return CashShopInfoTable.EndCashShopInfoTable(builder);
  }

  public static void StartCashShopInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CashShopInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CashShopInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CashShopInfoTable> EndCashShopInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CashShopInfoTable>(o);
  }
  public CashShopInfoTableT UnPack() {
    var _o = new CashShopInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CashShopInfoTableT _o) {
    _o.Rows = new List<GDT.CashShopInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CashShopInfoTable> Pack(FlatBufferBuilder builder, CashShopInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.CashShopInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CashShopInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CashShopInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCashShopInfoTable(
      builder,
      _Rows);
  }
};

public class CashShopInfoTableT
{
  public List<GDT.CashShopInfoT> Rows { get; set; }

  public CashShopInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by CashShop.xlsx
public struct CashShopBase : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CashShopBase GetRootAsCashShopBase(ByteBuffer _bb) { return GetRootAsCashShopBase(_bb, new CashShopBase()); }
  public static CashShopBase GetRootAsCashShopBase(ByteBuffer _bb, CashShopBase obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CashShopBase __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CashShopInfoID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ButtonText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetButtonTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetButtonTextArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.ContentMainType ContentMainTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.ContentMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentMainType.CT_None; } }
  public string ButtonResourcesName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetButtonResourcesNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetButtonResourcesNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetButtonResourcesNameArray() { return __p.__vector_as_array<byte>(12); }
  public int ButtonSort { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.datetime? StartDisplayingTime { get { int o = __p.__offset(16); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? EndDisplayingTime { get { int o = __p.__offset(18); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartCashShopBase(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddCashShopInfoID(FlatBufferBuilder builder, int CashShopInfoID) { builder.AddInt(1, CashShopInfoID, 0); }
  public static void AddButtonText(FlatBufferBuilder builder, StringOffset ButtonTextOffset) { builder.AddOffset(2, ButtonTextOffset.Value, 0); }
  public static void AddContentMainTypeID(FlatBufferBuilder builder, GDT.ContentMainType ContentMainTypeID) { builder.AddByte(3, (byte)ContentMainTypeID, 0); }
  public static void AddButtonResourcesName(FlatBufferBuilder builder, StringOffset ButtonResourcesNameOffset) { builder.AddOffset(4, ButtonResourcesNameOffset.Value, 0); }
  public static void AddButtonSort(FlatBufferBuilder builder, int ButtonSort) { builder.AddInt(5, ButtonSort, 0); }
  public static void AddStartDisplayingTime(FlatBufferBuilder builder, Offset<GDT.datetime> StartDisplayingTimeOffset) { builder.AddStruct(6, StartDisplayingTimeOffset.Value, 0); }
  public static void AddEndDisplayingTime(FlatBufferBuilder builder, Offset<GDT.datetime> EndDisplayingTimeOffset) { builder.AddStruct(7, EndDisplayingTimeOffset.Value, 0); }
  public static Offset<GDT.CashShopBase> EndCashShopBase(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CashShopBase>(o);
  }
  public CashShopBaseT UnPack() {
    var _o = new CashShopBaseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CashShopBaseT _o) {
    _o.Index = this.Index;
    _o.CashShopInfoID = this.CashShopInfoID;
    _o.ButtonText = this.ButtonText;
    _o.ContentMainTypeID = this.ContentMainTypeID;
    _o.ButtonResourcesName = this.ButtonResourcesName;
    _o.ButtonSort = this.ButtonSort;
    _o.StartDisplayingTime = this.StartDisplayingTime.HasValue ? this.StartDisplayingTime.Value.UnPack() : null;
    _o.EndDisplayingTime = this.EndDisplayingTime.HasValue ? this.EndDisplayingTime.Value.UnPack() : null;
  }
  public static Offset<GDT.CashShopBase> Pack(FlatBufferBuilder builder, CashShopBaseT _o) {
    if (_o == null) return default(Offset<GDT.CashShopBase>);
    var _ButtonText = _o.ButtonText == null ? default(StringOffset) : builder.CreateString(_o.ButtonText);
    var _ButtonResourcesName = _o.ButtonResourcesName == null ? default(StringOffset) : builder.CreateString(_o.ButtonResourcesName);
    StartCashShopBase(builder);
    AddIndex(builder, _o.Index);
    AddCashShopInfoID(builder, _o.CashShopInfoID);
    AddButtonText(builder, _ButtonText);
    AddContentMainTypeID(builder, _o.ContentMainTypeID);
    AddButtonResourcesName(builder, _ButtonResourcesName);
    AddButtonSort(builder, _o.ButtonSort);
    AddStartDisplayingTime(builder, GDT.datetime.Pack(builder, _o.StartDisplayingTime));
    AddEndDisplayingTime(builder, GDT.datetime.Pack(builder, _o.EndDisplayingTime));
    return EndCashShopBase(builder);
  }
};

public class CashShopBaseT
{
  public int Index { get; set; }
  public int CashShopInfoID { get; set; }
  public string ButtonText { get; set; }
  public GDT.ContentMainType ContentMainTypeID { get; set; }
  public string ButtonResourcesName { get; set; }
  public int ButtonSort { get; set; }
  public GDT.datetimeT StartDisplayingTime { get; set; }
  public GDT.datetimeT EndDisplayingTime { get; set; }

  public CashShopBaseT() {
    this.Index = 0;
    this.CashShopInfoID = 0;
    this.ButtonText = null;
    this.ContentMainTypeID = GDT.ContentMainType.CT_None;
    this.ButtonResourcesName = null;
    this.ButtonSort = 0;
    this.StartDisplayingTime = new GDT.datetimeT();
    this.EndDisplayingTime = new GDT.datetimeT();
  }
}

public struct CashShopBaseTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CashShopBaseTable GetRootAsCashShopBaseTable(ByteBuffer _bb) { return GetRootAsCashShopBaseTable(_bb, new CashShopBaseTable()); }
  public static CashShopBaseTable GetRootAsCashShopBaseTable(ByteBuffer _bb, CashShopBaseTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CashShopBaseTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CashShopBase? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CashShopBase?)(new GDT.CashShopBase()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CashShopBaseTable> CreateCashShopBaseTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CashShopBaseTable.AddRows(builder, RowsOffset);
    return CashShopBaseTable.EndCashShopBaseTable(builder);
  }

  public static void StartCashShopBaseTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CashShopBase>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CashShopBase>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CashShopBaseTable> EndCashShopBaseTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CashShopBaseTable>(o);
  }
  public CashShopBaseTableT UnPack() {
    var _o = new CashShopBaseTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CashShopBaseTableT _o) {
    _o.Rows = new List<GDT.CashShopBaseT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CashShopBaseTable> Pack(FlatBufferBuilder builder, CashShopBaseTableT _o) {
    if (_o == null) return default(Offset<GDT.CashShopBaseTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CashShopBase>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CashShopBase.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCashShopBaseTable(
      builder,
      _Rows);
  }
};

public class CashShopBaseTableT
{
  public List<GDT.CashShopBaseT> Rows { get; set; }

  public CashShopBaseTableT() {
    this.Rows = null;
  }
}

/// Defined by CashShop.xlsx
public struct CashShopProduct : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CashShopProduct GetRootAsCashShopProduct(ByteBuffer _bb) { return GetRootAsCashShopProduct(_bb, new CashShopProduct()); }
  public static CashShopProduct GetRootAsCashShopProduct(ByteBuffer _bb, CashShopProduct obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CashShopProduct __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ProductID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CashShopBaseID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ProductExposureType ProductExposureTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.ProductExposureType)__p.bb.Get(o + __p.bb_pos) : GDT.ProductExposureType.PET_None; } }
  public int ContinuousSort { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TitleText { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleTextBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetTitleTextBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetTitleTextArray() { return __p.__vector_as_array<byte>(16); }
  public string DescText { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescTextBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetDescTextBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetDescTextArray() { return __p.__vector_as_array<byte>(18); }
  public bool ImmediatePayment { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.SaleTagType SaleTagType01 { get { int o = __p.__offset(22); return o != 0 ? (GDT.SaleTagType)__p.bb.Get(o + __p.bb_pos) : GDT.SaleTagType.STT_None; } }
  public string SaleTagText01 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSaleTagText01Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSaleTagText01Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSaleTagText01Array() { return __p.__vector_as_array<byte>(24); }
  public int EfficiencyValue01 { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ExpTagResourceName { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetExpTagResourceNameBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetExpTagResourceNameBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetExpTagResourceNameArray() { return __p.__vector_as_array<byte>(28); }
  public int TierExp { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType CostMainTypeID { get { int o = __p.__offset(32); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public int CostSubTypeID { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ShopCalculationType ShopCalculationTypeID { get { int o = __p.__offset(36); return o != 0 ? (GDT.ShopCalculationType)__p.bb.Get(o + __p.bb_pos) : GDT.ShopCalculationType.SCT_None; } }
  public int CostValue { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.PurchaseCycleType PurchaseCycleTypeID { get { int o = __p.__offset(40); return o != 0 ? (GDT.PurchaseCycleType)__p.bb.Get(o + __p.bb_pos) : GDT.PurchaseCycleType.PCT_None; } }
  public int PurchaseMaxCount { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PurchaseMaxOnce { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.MovingPurchasesType MovingPurchasesTypeID { get { int o = __p.__offset(46); return o != 0 ? (GDT.MovingPurchasesType)__p.bb.Get(o + __p.bb_pos) : GDT.MovingPurchasesType.MPT_None; } }
  public string ResourcesName01 { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourcesName01Bytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetResourcesName01Bytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetResourcesName01Array() { return __p.__vector_as_array<byte>(48); }
  public string ResourcesName02 { get { int o = __p.__offset(50); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourcesName02Bytes() { return __p.__vector_as_span<byte>(50, 1); }
#else
  public ArraySegment<byte>? GetResourcesName02Bytes() { return __p.__vector_as_arraysegment(50); }
#endif
  public byte[] GetResourcesName02Array() { return __p.__vector_as_array<byte>(50); }
  public bool SalesPeriodDisplay { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.datetime? SalesStartTime { get { int o = __p.__offset(54); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? SalesEndTime { get { int o = __p.__offset(56); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartCashShopProduct(FlatBufferBuilder builder) { builder.StartTable(27); }
  public static void AddProductID(FlatBufferBuilder builder, int ProductID) { builder.AddInt(0, ProductID, 0); }
  public static void AddCashShopBaseID(FlatBufferBuilder builder, int CashShopBaseID) { builder.AddInt(1, CashShopBaseID, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(2, Sort, 0); }
  public static void AddRewardID(FlatBufferBuilder builder, int RewardID) { builder.AddInt(3, RewardID, 0); }
  public static void AddProductExposureTypeID(FlatBufferBuilder builder, GDT.ProductExposureType ProductExposureTypeID) { builder.AddByte(4, (byte)ProductExposureTypeID, 0); }
  public static void AddContinuousSort(FlatBufferBuilder builder, int ContinuousSort) { builder.AddInt(5, ContinuousSort, 0); }
  public static void AddTitleText(FlatBufferBuilder builder, StringOffset TitleTextOffset) { builder.AddOffset(6, TitleTextOffset.Value, 0); }
  public static void AddDescText(FlatBufferBuilder builder, StringOffset DescTextOffset) { builder.AddOffset(7, DescTextOffset.Value, 0); }
  public static void AddImmediatePayment(FlatBufferBuilder builder, bool ImmediatePayment) { builder.AddBool(8, ImmediatePayment, false); }
  public static void AddSaleTagType01(FlatBufferBuilder builder, GDT.SaleTagType SaleTagType01) { builder.AddByte(9, (byte)SaleTagType01, 0); }
  public static void AddSaleTagText01(FlatBufferBuilder builder, StringOffset SaleTagText01Offset) { builder.AddOffset(10, SaleTagText01Offset.Value, 0); }
  public static void AddEfficiencyValue01(FlatBufferBuilder builder, int EfficiencyValue01) { builder.AddInt(11, EfficiencyValue01, 0); }
  public static void AddExpTagResourceName(FlatBufferBuilder builder, StringOffset ExpTagResourceNameOffset) { builder.AddOffset(12, ExpTagResourceNameOffset.Value, 0); }
  public static void AddTierExp(FlatBufferBuilder builder, int TierExp) { builder.AddInt(13, TierExp, 0); }
  public static void AddCostMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CostMainTypeID) { builder.AddByte(14, (byte)CostMainTypeID, 0); }
  public static void AddCostSubTypeID(FlatBufferBuilder builder, int CostSubTypeID) { builder.AddInt(15, CostSubTypeID, 0); }
  public static void AddShopCalculationTypeID(FlatBufferBuilder builder, GDT.ShopCalculationType ShopCalculationTypeID) { builder.AddByte(16, (byte)ShopCalculationTypeID, 0); }
  public static void AddCostValue(FlatBufferBuilder builder, int CostValue) { builder.AddInt(17, CostValue, 0); }
  public static void AddPurchaseCycleTypeID(FlatBufferBuilder builder, GDT.PurchaseCycleType PurchaseCycleTypeID) { builder.AddByte(18, (byte)PurchaseCycleTypeID, 0); }
  public static void AddPurchaseMaxCount(FlatBufferBuilder builder, int PurchaseMaxCount) { builder.AddInt(19, PurchaseMaxCount, 0); }
  public static void AddPurchaseMaxOnce(FlatBufferBuilder builder, int PurchaseMaxOnce) { builder.AddInt(20, PurchaseMaxOnce, 0); }
  public static void AddMovingPurchasesTypeID(FlatBufferBuilder builder, GDT.MovingPurchasesType MovingPurchasesTypeID) { builder.AddByte(21, (byte)MovingPurchasesTypeID, 0); }
  public static void AddResourcesName01(FlatBufferBuilder builder, StringOffset ResourcesName01Offset) { builder.AddOffset(22, ResourcesName01Offset.Value, 0); }
  public static void AddResourcesName02(FlatBufferBuilder builder, StringOffset ResourcesName02Offset) { builder.AddOffset(23, ResourcesName02Offset.Value, 0); }
  public static void AddSalesPeriodDisplay(FlatBufferBuilder builder, bool SalesPeriodDisplay) { builder.AddBool(24, SalesPeriodDisplay, false); }
  public static void AddSalesStartTime(FlatBufferBuilder builder, Offset<GDT.datetime> SalesStartTimeOffset) { builder.AddStruct(25, SalesStartTimeOffset.Value, 0); }
  public static void AddSalesEndTime(FlatBufferBuilder builder, Offset<GDT.datetime> SalesEndTimeOffset) { builder.AddStruct(26, SalesEndTimeOffset.Value, 0); }
  public static Offset<GDT.CashShopProduct> EndCashShopProduct(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CashShopProduct>(o);
  }
  public CashShopProductT UnPack() {
    var _o = new CashShopProductT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CashShopProductT _o) {
    _o.ProductID = this.ProductID;
    _o.CashShopBaseID = this.CashShopBaseID;
    _o.Sort = this.Sort;
    _o.RewardID = this.RewardID;
    _o.ProductExposureTypeID = this.ProductExposureTypeID;
    _o.ContinuousSort = this.ContinuousSort;
    _o.TitleText = this.TitleText;
    _o.DescText = this.DescText;
    _o.ImmediatePayment = this.ImmediatePayment;
    _o.SaleTagType01 = this.SaleTagType01;
    _o.SaleTagText01 = this.SaleTagText01;
    _o.EfficiencyValue01 = this.EfficiencyValue01;
    _o.ExpTagResourceName = this.ExpTagResourceName;
    _o.TierExp = this.TierExp;
    _o.CostMainTypeID = this.CostMainTypeID;
    _o.CostSubTypeID = this.CostSubTypeID;
    _o.ShopCalculationTypeID = this.ShopCalculationTypeID;
    _o.CostValue = this.CostValue;
    _o.PurchaseCycleTypeID = this.PurchaseCycleTypeID;
    _o.PurchaseMaxCount = this.PurchaseMaxCount;
    _o.PurchaseMaxOnce = this.PurchaseMaxOnce;
    _o.MovingPurchasesTypeID = this.MovingPurchasesTypeID;
    _o.ResourcesName01 = this.ResourcesName01;
    _o.ResourcesName02 = this.ResourcesName02;
    _o.SalesPeriodDisplay = this.SalesPeriodDisplay;
    _o.SalesStartTime = this.SalesStartTime.HasValue ? this.SalesStartTime.Value.UnPack() : null;
    _o.SalesEndTime = this.SalesEndTime.HasValue ? this.SalesEndTime.Value.UnPack() : null;
  }
  public static Offset<GDT.CashShopProduct> Pack(FlatBufferBuilder builder, CashShopProductT _o) {
    if (_o == null) return default(Offset<GDT.CashShopProduct>);
    var _TitleText = _o.TitleText == null ? default(StringOffset) : builder.CreateString(_o.TitleText);
    var _DescText = _o.DescText == null ? default(StringOffset) : builder.CreateString(_o.DescText);
    var _SaleTagText01 = _o.SaleTagText01 == null ? default(StringOffset) : builder.CreateString(_o.SaleTagText01);
    var _ExpTagResourceName = _o.ExpTagResourceName == null ? default(StringOffset) : builder.CreateString(_o.ExpTagResourceName);
    var _ResourcesName01 = _o.ResourcesName01 == null ? default(StringOffset) : builder.CreateString(_o.ResourcesName01);
    var _ResourcesName02 = _o.ResourcesName02 == null ? default(StringOffset) : builder.CreateString(_o.ResourcesName02);
    StartCashShopProduct(builder);
    AddProductID(builder, _o.ProductID);
    AddCashShopBaseID(builder, _o.CashShopBaseID);
    AddSort(builder, _o.Sort);
    AddRewardID(builder, _o.RewardID);
    AddProductExposureTypeID(builder, _o.ProductExposureTypeID);
    AddContinuousSort(builder, _o.ContinuousSort);
    AddTitleText(builder, _TitleText);
    AddDescText(builder, _DescText);
    AddImmediatePayment(builder, _o.ImmediatePayment);
    AddSaleTagType01(builder, _o.SaleTagType01);
    AddSaleTagText01(builder, _SaleTagText01);
    AddEfficiencyValue01(builder, _o.EfficiencyValue01);
    AddExpTagResourceName(builder, _ExpTagResourceName);
    AddTierExp(builder, _o.TierExp);
    AddCostMainTypeID(builder, _o.CostMainTypeID);
    AddCostSubTypeID(builder, _o.CostSubTypeID);
    AddShopCalculationTypeID(builder, _o.ShopCalculationTypeID);
    AddCostValue(builder, _o.CostValue);
    AddPurchaseCycleTypeID(builder, _o.PurchaseCycleTypeID);
    AddPurchaseMaxCount(builder, _o.PurchaseMaxCount);
    AddPurchaseMaxOnce(builder, _o.PurchaseMaxOnce);
    AddMovingPurchasesTypeID(builder, _o.MovingPurchasesTypeID);
    AddResourcesName01(builder, _ResourcesName01);
    AddResourcesName02(builder, _ResourcesName02);
    AddSalesPeriodDisplay(builder, _o.SalesPeriodDisplay);
    AddSalesStartTime(builder, GDT.datetime.Pack(builder, _o.SalesStartTime));
    AddSalesEndTime(builder, GDT.datetime.Pack(builder, _o.SalesEndTime));
    return EndCashShopProduct(builder);
  }
};

public class CashShopProductT
{
  public int ProductID { get; set; }
  public int CashShopBaseID { get; set; }
  public int Sort { get; set; }
  public int RewardID { get; set; }
  public GDT.ProductExposureType ProductExposureTypeID { get; set; }
  public int ContinuousSort { get; set; }
  public string TitleText { get; set; }
  public string DescText { get; set; }
  public bool ImmediatePayment { get; set; }
  public GDT.SaleTagType SaleTagType01 { get; set; }
  public string SaleTagText01 { get; set; }
  public int EfficiencyValue01 { get; set; }
  public string ExpTagResourceName { get; set; }
  public int TierExp { get; set; }
  public GDT.CurrencyMainType CostMainTypeID { get; set; }
  public int CostSubTypeID { get; set; }
  public GDT.ShopCalculationType ShopCalculationTypeID { get; set; }
  public int CostValue { get; set; }
  public GDT.PurchaseCycleType PurchaseCycleTypeID { get; set; }
  public int PurchaseMaxCount { get; set; }
  public int PurchaseMaxOnce { get; set; }
  public GDT.MovingPurchasesType MovingPurchasesTypeID { get; set; }
  public string ResourcesName01 { get; set; }
  public string ResourcesName02 { get; set; }
  public bool SalesPeriodDisplay { get; set; }
  public GDT.datetimeT SalesStartTime { get; set; }
  public GDT.datetimeT SalesEndTime { get; set; }

  public CashShopProductT() {
    this.ProductID = 0;
    this.CashShopBaseID = 0;
    this.Sort = 0;
    this.RewardID = 0;
    this.ProductExposureTypeID = GDT.ProductExposureType.PET_None;
    this.ContinuousSort = 0;
    this.TitleText = null;
    this.DescText = null;
    this.ImmediatePayment = false;
    this.SaleTagType01 = GDT.SaleTagType.STT_None;
    this.SaleTagText01 = null;
    this.EfficiencyValue01 = 0;
    this.ExpTagResourceName = null;
    this.TierExp = 0;
    this.CostMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CostSubTypeID = 0;
    this.ShopCalculationTypeID = GDT.ShopCalculationType.SCT_None;
    this.CostValue = 0;
    this.PurchaseCycleTypeID = GDT.PurchaseCycleType.PCT_None;
    this.PurchaseMaxCount = 0;
    this.PurchaseMaxOnce = 0;
    this.MovingPurchasesTypeID = GDT.MovingPurchasesType.MPT_None;
    this.ResourcesName01 = null;
    this.ResourcesName02 = null;
    this.SalesPeriodDisplay = false;
    this.SalesStartTime = new GDT.datetimeT();
    this.SalesEndTime = new GDT.datetimeT();
  }
}

public struct CashShopProductTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CashShopProductTable GetRootAsCashShopProductTable(ByteBuffer _bb) { return GetRootAsCashShopProductTable(_bb, new CashShopProductTable()); }
  public static CashShopProductTable GetRootAsCashShopProductTable(ByteBuffer _bb, CashShopProductTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CashShopProductTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CashShopProduct? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CashShopProduct?)(new GDT.CashShopProduct()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CashShopProductTable> CreateCashShopProductTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CashShopProductTable.AddRows(builder, RowsOffset);
    return CashShopProductTable.EndCashShopProductTable(builder);
  }

  public static void StartCashShopProductTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CashShopProduct>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CashShopProduct>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CashShopProductTable> EndCashShopProductTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CashShopProductTable>(o);
  }
  public CashShopProductTableT UnPack() {
    var _o = new CashShopProductTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CashShopProductTableT _o) {
    _o.Rows = new List<GDT.CashShopProductT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CashShopProductTable> Pack(FlatBufferBuilder builder, CashShopProductTableT _o) {
    if (_o == null) return default(Offset<GDT.CashShopProductTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CashShopProduct>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CashShopProduct.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCashShopProductTable(
      builder,
      _Rows);
  }
};

public class CashShopProductTableT
{
  public List<GDT.CashShopProductT> Rows { get; set; }

  public CashShopProductTableT() {
    this.Rows = null;
  }
}

/// Defined by CashShop.xlsx
public struct PeriodPaymentData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PeriodPaymentData GetRootAsPeriodPaymentData(ByteBuffer _bb) { return GetRootAsPeriodPaymentData(_bb, new PeriodPaymentData()); }
  public static PeriodPaymentData GetRootAsPeriodPaymentData(ByteBuffer _bb, PeriodPaymentData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PeriodPaymentData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ApplicationType ApplicationTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ApplicationType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplicationType.AT_Account; } }
  public int Day { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int CurrencyValue { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PeriodPaymentData> CreatePeriodPaymentData(FlatBufferBuilder builder,
      int GroupID = 0,
      GDT.ApplicationType ApplicationTypeID = GDT.ApplicationType.AT_Account,
      int Day = 0,
      int ItemID = 0,
      int ItemCount = 0,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      int CurrencyValue = 0) {
    builder.StartTable(7);
    PeriodPaymentData.AddCurrencyValue(builder, CurrencyValue);
    PeriodPaymentData.AddItemCount(builder, ItemCount);
    PeriodPaymentData.AddItemID(builder, ItemID);
    PeriodPaymentData.AddDay(builder, Day);
    PeriodPaymentData.AddGroupID(builder, GroupID);
    PeriodPaymentData.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    PeriodPaymentData.AddApplicationTypeID(builder, ApplicationTypeID);
    return PeriodPaymentData.EndPeriodPaymentData(builder);
  }

  public static void StartPeriodPaymentData(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddGroupID(FlatBufferBuilder builder, int GroupID) { builder.AddInt(0, GroupID, 0); }
  public static void AddApplicationTypeID(FlatBufferBuilder builder, GDT.ApplicationType ApplicationTypeID) { builder.AddByte(1, (byte)ApplicationTypeID, 0); }
  public static void AddDay(FlatBufferBuilder builder, int Day) { builder.AddInt(2, Day, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(3, ItemID, 0); }
  public static void AddItemCount(FlatBufferBuilder builder, int ItemCount) { builder.AddInt(4, ItemCount, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(5, (byte)CurrencySubTypeID, 0); }
  public static void AddCurrencyValue(FlatBufferBuilder builder, int CurrencyValue) { builder.AddInt(6, CurrencyValue, 0); }
  public static Offset<GDT.PeriodPaymentData> EndPeriodPaymentData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PeriodPaymentData>(o);
  }
  public PeriodPaymentDataT UnPack() {
    var _o = new PeriodPaymentDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PeriodPaymentDataT _o) {
    _o.GroupID = this.GroupID;
    _o.ApplicationTypeID = this.ApplicationTypeID;
    _o.Day = this.Day;
    _o.ItemID = this.ItemID;
    _o.ItemCount = this.ItemCount;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.CurrencyValue = this.CurrencyValue;
  }
  public static Offset<GDT.PeriodPaymentData> Pack(FlatBufferBuilder builder, PeriodPaymentDataT _o) {
    if (_o == null) return default(Offset<GDT.PeriodPaymentData>);
    return CreatePeriodPaymentData(
      builder,
      _o.GroupID,
      _o.ApplicationTypeID,
      _o.Day,
      _o.ItemID,
      _o.ItemCount,
      _o.CurrencySubTypeID,
      _o.CurrencyValue);
  }
};

public class PeriodPaymentDataT
{
  public int GroupID { get; set; }
  public GDT.ApplicationType ApplicationTypeID { get; set; }
  public int Day { get; set; }
  public int ItemID { get; set; }
  public int ItemCount { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public int CurrencyValue { get; set; }

  public PeriodPaymentDataT() {
    this.GroupID = 0;
    this.ApplicationTypeID = GDT.ApplicationType.AT_Account;
    this.Day = 0;
    this.ItemID = 0;
    this.ItemCount = 0;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.CurrencyValue = 0;
  }
}

public struct PeriodPaymentDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PeriodPaymentDataTable GetRootAsPeriodPaymentDataTable(ByteBuffer _bb) { return GetRootAsPeriodPaymentDataTable(_bb, new PeriodPaymentDataTable()); }
  public static PeriodPaymentDataTable GetRootAsPeriodPaymentDataTable(ByteBuffer _bb, PeriodPaymentDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PeriodPaymentDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PeriodPaymentData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PeriodPaymentData?)(new GDT.PeriodPaymentData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PeriodPaymentDataTable> CreatePeriodPaymentDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PeriodPaymentDataTable.AddRows(builder, RowsOffset);
    return PeriodPaymentDataTable.EndPeriodPaymentDataTable(builder);
  }

  public static void StartPeriodPaymentDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PeriodPaymentData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PeriodPaymentData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PeriodPaymentDataTable> EndPeriodPaymentDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PeriodPaymentDataTable>(o);
  }
  public PeriodPaymentDataTableT UnPack() {
    var _o = new PeriodPaymentDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PeriodPaymentDataTableT _o) {
    _o.Rows = new List<GDT.PeriodPaymentDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PeriodPaymentDataTable> Pack(FlatBufferBuilder builder, PeriodPaymentDataTableT _o) {
    if (_o == null) return default(Offset<GDT.PeriodPaymentDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PeriodPaymentData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PeriodPaymentData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePeriodPaymentDataTable(
      builder,
      _Rows);
  }
};

public class PeriodPaymentDataTableT
{
  public List<GDT.PeriodPaymentDataT> Rows { get; set; }

  public PeriodPaymentDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Character.xlsx
public struct CharacterInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterInfo GetRootAsCharacterInfo(ByteBuffer _bb) { return GetRootAsCharacterInfo(_bb, new CharacterInfo()); }
  public static CharacterInfo GetRootAsCharacterInfo(ByteBuffer _bb, CharacterInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CharacterID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CharacterType CharacterType { get { int o = __p.__offset(6); return o != 0 ? (GDT.CharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterType.CT_None; } }
  public GDT.CharacterUsedType CharacterUsedType { get { int o = __p.__offset(8); return o != 0 ? (GDT.CharacterUsedType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterUsedType.CUT_Player; } }
  public string CharacterIcon { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterIconBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCharacterIconBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCharacterIconArray() { return __p.__vector_as_array<byte>(10); }
  public string CharacterName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCharacterNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCharacterNameArray() { return __p.__vector_as_array<byte>(12); }
  public string CharacterDesc { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterDescBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCharacterDescBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCharacterDescArray() { return __p.__vector_as_array<byte>(14); }
  public float CharRadius { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CharHeight { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ShadowRadius { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CharScale { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool Visible { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float CharMoveSpeed { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CharRunSpeed { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int InitialReward { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.NpcType NpcType { get { int o = __p.__offset(32); return o != 0 ? (GDT.NpcType)__p.bb.Get(o + __p.bb_pos) : GDT.NpcType.NT_None; } }
  public string NPCCustomizeJsonFileName { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNPCCustomizeJsonFileNameBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetNPCCustomizeJsonFileNameBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetNPCCustomizeJsonFileNameArray() { return __p.__vector_as_array<byte>(34); }
  public string CharacterResourceName { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterResourceNameBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetCharacterResourceNameBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetCharacterResourceNameArray() { return __p.__vector_as_array<byte>(36); }
  public int ScenarioSceneID { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool TalkRotation { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.InteractionType InteractionTypeEnum { get { int o = __p.__offset(42); return o != 0 ? (GDT.InteractionType)__p.bb.Get(o + __p.bb_pos) : GDT.InteractionType.INTER_None; } }
  public float InteractionRadius { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int NPCAnimationID { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.CharacterInfo> CreateCharacterInfo(FlatBufferBuilder builder,
      int CharacterID = 0,
      GDT.CharacterType CharacterType = GDT.CharacterType.CT_None,
      GDT.CharacterUsedType CharacterUsedType = GDT.CharacterUsedType.CUT_Player,
      StringOffset CharacterIconOffset = default(StringOffset),
      StringOffset CharacterNameOffset = default(StringOffset),
      StringOffset CharacterDescOffset = default(StringOffset),
      float CharRadius = 0.0f,
      float CharHeight = 0.0f,
      float ShadowRadius = 0.0f,
      float CharScale = 0.0f,
      bool Visible = false,
      float CharMoveSpeed = 0.0f,
      float CharRunSpeed = 0.0f,
      int InitialReward = 0,
      GDT.NpcType NpcType = GDT.NpcType.NT_None,
      StringOffset NPCCustomizeJsonFileNameOffset = default(StringOffset),
      StringOffset CharacterResourceNameOffset = default(StringOffset),
      int ScenarioSceneID = 0,
      bool TalkRotation = false,
      GDT.InteractionType InteractionTypeEnum = GDT.InteractionType.INTER_None,
      float InteractionRadius = 0.0f,
      int NPCAnimationID = 0) {
    builder.StartTable(22);
    CharacterInfo.AddNPCAnimationID(builder, NPCAnimationID);
    CharacterInfo.AddInteractionRadius(builder, InteractionRadius);
    CharacterInfo.AddScenarioSceneID(builder, ScenarioSceneID);
    CharacterInfo.AddCharacterResourceName(builder, CharacterResourceNameOffset);
    CharacterInfo.AddNPCCustomizeJsonFileName(builder, NPCCustomizeJsonFileNameOffset);
    CharacterInfo.AddInitialReward(builder, InitialReward);
    CharacterInfo.AddCharRunSpeed(builder, CharRunSpeed);
    CharacterInfo.AddCharMoveSpeed(builder, CharMoveSpeed);
    CharacterInfo.AddCharScale(builder, CharScale);
    CharacterInfo.AddShadowRadius(builder, ShadowRadius);
    CharacterInfo.AddCharHeight(builder, CharHeight);
    CharacterInfo.AddCharRadius(builder, CharRadius);
    CharacterInfo.AddCharacterDesc(builder, CharacterDescOffset);
    CharacterInfo.AddCharacterName(builder, CharacterNameOffset);
    CharacterInfo.AddCharacterIcon(builder, CharacterIconOffset);
    CharacterInfo.AddCharacterID(builder, CharacterID);
    CharacterInfo.AddInteractionTypeEnum(builder, InteractionTypeEnum);
    CharacterInfo.AddTalkRotation(builder, TalkRotation);
    CharacterInfo.AddNpcType(builder, NpcType);
    CharacterInfo.AddVisible(builder, Visible);
    CharacterInfo.AddCharacterUsedType(builder, CharacterUsedType);
    CharacterInfo.AddCharacterType(builder, CharacterType);
    return CharacterInfo.EndCharacterInfo(builder);
  }

  public static void StartCharacterInfo(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddCharacterID(FlatBufferBuilder builder, int CharacterID) { builder.AddInt(0, CharacterID, 0); }
  public static void AddCharacterType(FlatBufferBuilder builder, GDT.CharacterType CharacterType) { builder.AddByte(1, (byte)CharacterType, 0); }
  public static void AddCharacterUsedType(FlatBufferBuilder builder, GDT.CharacterUsedType CharacterUsedType) { builder.AddByte(2, (byte)CharacterUsedType, 0); }
  public static void AddCharacterIcon(FlatBufferBuilder builder, StringOffset CharacterIconOffset) { builder.AddOffset(3, CharacterIconOffset.Value, 0); }
  public static void AddCharacterName(FlatBufferBuilder builder, StringOffset CharacterNameOffset) { builder.AddOffset(4, CharacterNameOffset.Value, 0); }
  public static void AddCharacterDesc(FlatBufferBuilder builder, StringOffset CharacterDescOffset) { builder.AddOffset(5, CharacterDescOffset.Value, 0); }
  public static void AddCharRadius(FlatBufferBuilder builder, float CharRadius) { builder.AddFloat(6, CharRadius, 0.0f); }
  public static void AddCharHeight(FlatBufferBuilder builder, float CharHeight) { builder.AddFloat(7, CharHeight, 0.0f); }
  public static void AddShadowRadius(FlatBufferBuilder builder, float ShadowRadius) { builder.AddFloat(8, ShadowRadius, 0.0f); }
  public static void AddCharScale(FlatBufferBuilder builder, float CharScale) { builder.AddFloat(9, CharScale, 0.0f); }
  public static void AddVisible(FlatBufferBuilder builder, bool Visible) { builder.AddBool(10, Visible, false); }
  public static void AddCharMoveSpeed(FlatBufferBuilder builder, float CharMoveSpeed) { builder.AddFloat(11, CharMoveSpeed, 0.0f); }
  public static void AddCharRunSpeed(FlatBufferBuilder builder, float CharRunSpeed) { builder.AddFloat(12, CharRunSpeed, 0.0f); }
  public static void AddInitialReward(FlatBufferBuilder builder, int InitialReward) { builder.AddInt(13, InitialReward, 0); }
  public static void AddNpcType(FlatBufferBuilder builder, GDT.NpcType NpcType) { builder.AddByte(14, (byte)NpcType, 0); }
  public static void AddNPCCustomizeJsonFileName(FlatBufferBuilder builder, StringOffset NPCCustomizeJsonFileNameOffset) { builder.AddOffset(15, NPCCustomizeJsonFileNameOffset.Value, 0); }
  public static void AddCharacterResourceName(FlatBufferBuilder builder, StringOffset CharacterResourceNameOffset) { builder.AddOffset(16, CharacterResourceNameOffset.Value, 0); }
  public static void AddScenarioSceneID(FlatBufferBuilder builder, int ScenarioSceneID) { builder.AddInt(17, ScenarioSceneID, 0); }
  public static void AddTalkRotation(FlatBufferBuilder builder, bool TalkRotation) { builder.AddBool(18, TalkRotation, false); }
  public static void AddInteractionTypeEnum(FlatBufferBuilder builder, GDT.InteractionType InteractionTypeEnum) { builder.AddByte(19, (byte)InteractionTypeEnum, 0); }
  public static void AddInteractionRadius(FlatBufferBuilder builder, float InteractionRadius) { builder.AddFloat(20, InteractionRadius, 0.0f); }
  public static void AddNPCAnimationID(FlatBufferBuilder builder, int NPCAnimationID) { builder.AddInt(21, NPCAnimationID, 0); }
  public static Offset<GDT.CharacterInfo> EndCharacterInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterInfo>(o);
  }
  public CharacterInfoT UnPack() {
    var _o = new CharacterInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterInfoT _o) {
    _o.CharacterID = this.CharacterID;
    _o.CharacterType = this.CharacterType;
    _o.CharacterUsedType = this.CharacterUsedType;
    _o.CharacterIcon = this.CharacterIcon;
    _o.CharacterName = this.CharacterName;
    _o.CharacterDesc = this.CharacterDesc;
    _o.CharRadius = this.CharRadius;
    _o.CharHeight = this.CharHeight;
    _o.ShadowRadius = this.ShadowRadius;
    _o.CharScale = this.CharScale;
    _o.Visible = this.Visible;
    _o.CharMoveSpeed = this.CharMoveSpeed;
    _o.CharRunSpeed = this.CharRunSpeed;
    _o.InitialReward = this.InitialReward;
    _o.NpcType = this.NpcType;
    _o.NPCCustomizeJsonFileName = this.NPCCustomizeJsonFileName;
    _o.CharacterResourceName = this.CharacterResourceName;
    _o.ScenarioSceneID = this.ScenarioSceneID;
    _o.TalkRotation = this.TalkRotation;
    _o.InteractionTypeEnum = this.InteractionTypeEnum;
    _o.InteractionRadius = this.InteractionRadius;
    _o.NPCAnimationID = this.NPCAnimationID;
  }
  public static Offset<GDT.CharacterInfo> Pack(FlatBufferBuilder builder, CharacterInfoT _o) {
    if (_o == null) return default(Offset<GDT.CharacterInfo>);
    var _CharacterIcon = _o.CharacterIcon == null ? default(StringOffset) : builder.CreateString(_o.CharacterIcon);
    var _CharacterName = _o.CharacterName == null ? default(StringOffset) : builder.CreateString(_o.CharacterName);
    var _CharacterDesc = _o.CharacterDesc == null ? default(StringOffset) : builder.CreateString(_o.CharacterDesc);
    var _NPCCustomizeJsonFileName = _o.NPCCustomizeJsonFileName == null ? default(StringOffset) : builder.CreateString(_o.NPCCustomizeJsonFileName);
    var _CharacterResourceName = _o.CharacterResourceName == null ? default(StringOffset) : builder.CreateString(_o.CharacterResourceName);
    return CreateCharacterInfo(
      builder,
      _o.CharacterID,
      _o.CharacterType,
      _o.CharacterUsedType,
      _CharacterIcon,
      _CharacterName,
      _CharacterDesc,
      _o.CharRadius,
      _o.CharHeight,
      _o.ShadowRadius,
      _o.CharScale,
      _o.Visible,
      _o.CharMoveSpeed,
      _o.CharRunSpeed,
      _o.InitialReward,
      _o.NpcType,
      _NPCCustomizeJsonFileName,
      _CharacterResourceName,
      _o.ScenarioSceneID,
      _o.TalkRotation,
      _o.InteractionTypeEnum,
      _o.InteractionRadius,
      _o.NPCAnimationID);
  }
};

public class CharacterInfoT
{
  public int CharacterID { get; set; }
  public GDT.CharacterType CharacterType { get; set; }
  public GDT.CharacterUsedType CharacterUsedType { get; set; }
  public string CharacterIcon { get; set; }
  public string CharacterName { get; set; }
  public string CharacterDesc { get; set; }
  public float CharRadius { get; set; }
  public float CharHeight { get; set; }
  public float ShadowRadius { get; set; }
  public float CharScale { get; set; }
  public bool Visible { get; set; }
  public float CharMoveSpeed { get; set; }
  public float CharRunSpeed { get; set; }
  public int InitialReward { get; set; }
  public GDT.NpcType NpcType { get; set; }
  public string NPCCustomizeJsonFileName { get; set; }
  public string CharacterResourceName { get; set; }
  public int ScenarioSceneID { get; set; }
  public bool TalkRotation { get; set; }
  public GDT.InteractionType InteractionTypeEnum { get; set; }
  public float InteractionRadius { get; set; }
  public int NPCAnimationID { get; set; }

  public CharacterInfoT() {
    this.CharacterID = 0;
    this.CharacterType = GDT.CharacterType.CT_None;
    this.CharacterUsedType = GDT.CharacterUsedType.CUT_Player;
    this.CharacterIcon = null;
    this.CharacterName = null;
    this.CharacterDesc = null;
    this.CharRadius = 0.0f;
    this.CharHeight = 0.0f;
    this.ShadowRadius = 0.0f;
    this.CharScale = 0.0f;
    this.Visible = false;
    this.CharMoveSpeed = 0.0f;
    this.CharRunSpeed = 0.0f;
    this.InitialReward = 0;
    this.NpcType = GDT.NpcType.NT_None;
    this.NPCCustomizeJsonFileName = null;
    this.CharacterResourceName = null;
    this.ScenarioSceneID = 0;
    this.TalkRotation = false;
    this.InteractionTypeEnum = GDT.InteractionType.INTER_None;
    this.InteractionRadius = 0.0f;
    this.NPCAnimationID = 0;
  }
}

public struct CharacterInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterInfoTable GetRootAsCharacterInfoTable(ByteBuffer _bb) { return GetRootAsCharacterInfoTable(_bb, new CharacterInfoTable()); }
  public static CharacterInfoTable GetRootAsCharacterInfoTable(ByteBuffer _bb, CharacterInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterInfo?)(new GDT.CharacterInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterInfoTable> CreateCharacterInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterInfoTable.AddRows(builder, RowsOffset);
    return CharacterInfoTable.EndCharacterInfoTable(builder);
  }

  public static void StartCharacterInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterInfoTable> EndCharacterInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterInfoTable>(o);
  }
  public CharacterInfoTableT UnPack() {
    var _o = new CharacterInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterInfoTableT _o) {
    _o.Rows = new List<GDT.CharacterInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterInfoTable> Pack(FlatBufferBuilder builder, CharacterInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterInfoTable(
      builder,
      _Rows);
  }
};

public class CharacterInfoTableT
{
  public List<GDT.CharacterInfoT> Rows { get; set; }

  public CharacterInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Character.xlsx
public struct CharacterNpcFunction : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterNpcFunction GetRootAsCharacterNpcFunction(ByteBuffer _bb) { return GetRootAsCharacterNpcFunction(_bb, new CharacterNpcFunction()); }
  public static CharacterNpcFunction GetRootAsCharacterNpcFunction(ByteBuffer _bb, CharacterNpcFunction obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterNpcFunction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CharacterID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.NpcFunction NpcFunctionEnum { get { int o = __p.__offset(6); return o != 0 ? (GDT.NpcFunction)__p.bb.Get(o + __p.bb_pos) : GDT.NpcFunction.NP_None; } }
  public int NpcFunctionParam1 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NpcFunctionParam2 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LanguageID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLanguageIDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLanguageIDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLanguageIDArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.CharacterNpcFunction> CreateCharacterNpcFunction(FlatBufferBuilder builder,
      int CharacterID = 0,
      GDT.NpcFunction NpcFunctionEnum = GDT.NpcFunction.NP_None,
      int NpcFunctionParam1 = 0,
      int NpcFunctionParam2 = 0,
      StringOffset LanguageIDOffset = default(StringOffset)) {
    builder.StartTable(5);
    CharacterNpcFunction.AddLanguageID(builder, LanguageIDOffset);
    CharacterNpcFunction.AddNpcFunctionParam2(builder, NpcFunctionParam2);
    CharacterNpcFunction.AddNpcFunctionParam1(builder, NpcFunctionParam1);
    CharacterNpcFunction.AddCharacterID(builder, CharacterID);
    CharacterNpcFunction.AddNpcFunctionEnum(builder, NpcFunctionEnum);
    return CharacterNpcFunction.EndCharacterNpcFunction(builder);
  }

  public static void StartCharacterNpcFunction(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddCharacterID(FlatBufferBuilder builder, int CharacterID) { builder.AddInt(0, CharacterID, 0); }
  public static void AddNpcFunctionEnum(FlatBufferBuilder builder, GDT.NpcFunction NpcFunctionEnum) { builder.AddByte(1, (byte)NpcFunctionEnum, 0); }
  public static void AddNpcFunctionParam1(FlatBufferBuilder builder, int NpcFunctionParam1) { builder.AddInt(2, NpcFunctionParam1, 0); }
  public static void AddNpcFunctionParam2(FlatBufferBuilder builder, int NpcFunctionParam2) { builder.AddInt(3, NpcFunctionParam2, 0); }
  public static void AddLanguageID(FlatBufferBuilder builder, StringOffset LanguageIDOffset) { builder.AddOffset(4, LanguageIDOffset.Value, 0); }
  public static Offset<GDT.CharacterNpcFunction> EndCharacterNpcFunction(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterNpcFunction>(o);
  }
  public CharacterNpcFunctionT UnPack() {
    var _o = new CharacterNpcFunctionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterNpcFunctionT _o) {
    _o.CharacterID = this.CharacterID;
    _o.NpcFunctionEnum = this.NpcFunctionEnum;
    _o.NpcFunctionParam1 = this.NpcFunctionParam1;
    _o.NpcFunctionParam2 = this.NpcFunctionParam2;
    _o.LanguageID = this.LanguageID;
  }
  public static Offset<GDT.CharacterNpcFunction> Pack(FlatBufferBuilder builder, CharacterNpcFunctionT _o) {
    if (_o == null) return default(Offset<GDT.CharacterNpcFunction>);
    var _LanguageID = _o.LanguageID == null ? default(StringOffset) : builder.CreateString(_o.LanguageID);
    return CreateCharacterNpcFunction(
      builder,
      _o.CharacterID,
      _o.NpcFunctionEnum,
      _o.NpcFunctionParam1,
      _o.NpcFunctionParam2,
      _LanguageID);
  }
};

public class CharacterNpcFunctionT
{
  public int CharacterID { get; set; }
  public GDT.NpcFunction NpcFunctionEnum { get; set; }
  public int NpcFunctionParam1 { get; set; }
  public int NpcFunctionParam2 { get; set; }
  public string LanguageID { get; set; }

  public CharacterNpcFunctionT() {
    this.CharacterID = 0;
    this.NpcFunctionEnum = GDT.NpcFunction.NP_None;
    this.NpcFunctionParam1 = 0;
    this.NpcFunctionParam2 = 0;
    this.LanguageID = null;
  }
}

public struct CharacterNpcFunctionTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterNpcFunctionTable GetRootAsCharacterNpcFunctionTable(ByteBuffer _bb) { return GetRootAsCharacterNpcFunctionTable(_bb, new CharacterNpcFunctionTable()); }
  public static CharacterNpcFunctionTable GetRootAsCharacterNpcFunctionTable(ByteBuffer _bb, CharacterNpcFunctionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterNpcFunctionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterNpcFunction? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterNpcFunction?)(new GDT.CharacterNpcFunction()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterNpcFunctionTable> CreateCharacterNpcFunctionTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterNpcFunctionTable.AddRows(builder, RowsOffset);
    return CharacterNpcFunctionTable.EndCharacterNpcFunctionTable(builder);
  }

  public static void StartCharacterNpcFunctionTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterNpcFunction>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterNpcFunction>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterNpcFunctionTable> EndCharacterNpcFunctionTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterNpcFunctionTable>(o);
  }
  public CharacterNpcFunctionTableT UnPack() {
    var _o = new CharacterNpcFunctionTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterNpcFunctionTableT _o) {
    _o.Rows = new List<GDT.CharacterNpcFunctionT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterNpcFunctionTable> Pack(FlatBufferBuilder builder, CharacterNpcFunctionTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterNpcFunctionTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterNpcFunction>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterNpcFunction.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterNpcFunctionTable(
      builder,
      _Rows);
  }
};

public class CharacterNpcFunctionTableT
{
  public List<GDT.CharacterNpcFunctionT> Rows { get; set; }

  public CharacterNpcFunctionTableT() {
    this.Rows = null;
  }
}

/// Defined by CharacterCountenanceInfo.xlsx
public struct CharacterCountenance : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCountenance GetRootAsCharacterCountenance(ByteBuffer _bb) { return GetRootAsCharacterCountenance(_bb, new CharacterCountenance()); }
  public static CharacterCountenance GetRootAsCharacterCountenance(ByteBuffer _bb, CharacterCountenance obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCountenance __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CountenanceID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CharacterName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCharacterNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCharacterNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCharacterNameArray() { return __p.__vector_as_array<byte>(8); }
  public string CountenanceValue01 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCountenanceValue01Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCountenanceValue01Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCountenanceValue01Array() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GDT.CharacterCountenance> CreateCharacterCountenance(FlatBufferBuilder builder,
      int CountenanceID = 0,
      int CharacterID = 0,
      StringOffset CharacterNameOffset = default(StringOffset),
      StringOffset CountenanceValue01Offset = default(StringOffset)) {
    builder.StartTable(4);
    CharacterCountenance.AddCountenanceValue01(builder, CountenanceValue01Offset);
    CharacterCountenance.AddCharacterName(builder, CharacterNameOffset);
    CharacterCountenance.AddCharacterID(builder, CharacterID);
    CharacterCountenance.AddCountenanceID(builder, CountenanceID);
    return CharacterCountenance.EndCharacterCountenance(builder);
  }

  public static void StartCharacterCountenance(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCountenanceID(FlatBufferBuilder builder, int CountenanceID) { builder.AddInt(0, CountenanceID, 0); }
  public static void AddCharacterID(FlatBufferBuilder builder, int CharacterID) { builder.AddInt(1, CharacterID, 0); }
  public static void AddCharacterName(FlatBufferBuilder builder, StringOffset CharacterNameOffset) { builder.AddOffset(2, CharacterNameOffset.Value, 0); }
  public static void AddCountenanceValue01(FlatBufferBuilder builder, StringOffset CountenanceValue01Offset) { builder.AddOffset(3, CountenanceValue01Offset.Value, 0); }
  public static Offset<GDT.CharacterCountenance> EndCharacterCountenance(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCountenance>(o);
  }
  public CharacterCountenanceT UnPack() {
    var _o = new CharacterCountenanceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCountenanceT _o) {
    _o.CountenanceID = this.CountenanceID;
    _o.CharacterID = this.CharacterID;
    _o.CharacterName = this.CharacterName;
    _o.CountenanceValue01 = this.CountenanceValue01;
  }
  public static Offset<GDT.CharacterCountenance> Pack(FlatBufferBuilder builder, CharacterCountenanceT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCountenance>);
    var _CharacterName = _o.CharacterName == null ? default(StringOffset) : builder.CreateString(_o.CharacterName);
    var _CountenanceValue01 = _o.CountenanceValue01 == null ? default(StringOffset) : builder.CreateString(_o.CountenanceValue01);
    return CreateCharacterCountenance(
      builder,
      _o.CountenanceID,
      _o.CharacterID,
      _CharacterName,
      _CountenanceValue01);
  }
};

public class CharacterCountenanceT
{
  public int CountenanceID { get; set; }
  public int CharacterID { get; set; }
  public string CharacterName { get; set; }
  public string CountenanceValue01 { get; set; }

  public CharacterCountenanceT() {
    this.CountenanceID = 0;
    this.CharacterID = 0;
    this.CharacterName = null;
    this.CountenanceValue01 = null;
  }
}

public struct CharacterCountenanceTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCountenanceTable GetRootAsCharacterCountenanceTable(ByteBuffer _bb) { return GetRootAsCharacterCountenanceTable(_bb, new CharacterCountenanceTable()); }
  public static CharacterCountenanceTable GetRootAsCharacterCountenanceTable(ByteBuffer _bb, CharacterCountenanceTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCountenanceTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCountenance? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCountenance?)(new GDT.CharacterCountenance()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCountenanceTable> CreateCharacterCountenanceTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCountenanceTable.AddRows(builder, RowsOffset);
    return CharacterCountenanceTable.EndCharacterCountenanceTable(builder);
  }

  public static void StartCharacterCountenanceTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCountenance>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCountenance>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCountenanceTable> EndCharacterCountenanceTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCountenanceTable>(o);
  }
  public CharacterCountenanceTableT UnPack() {
    var _o = new CharacterCountenanceTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCountenanceTableT _o) {
    _o.Rows = new List<GDT.CharacterCountenanceT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCountenanceTable> Pack(FlatBufferBuilder builder, CharacterCountenanceTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCountenanceTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCountenance>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCountenance.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCountenanceTable(
      builder,
      _Rows);
  }
};

public class CharacterCountenanceTableT
{
  public List<GDT.CharacterCountenanceT> Rows { get; set; }

  public CharacterCountenanceTableT() {
    this.Rows = null;
  }
}

/// Defined by Cheat.xlsx
public struct CheatCommand : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CheatCommand GetRootAsCheatCommand(ByteBuffer _bb) { return GetRootAsCheatCommand(_bb, new CheatCommand()); }
  public static CheatCommand GetRootAsCheatCommand(ByteBuffer _bb, CheatCommand obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CheatCommand __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CheatCommandID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatCommandIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCheatCommandIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCheatCommandIDArray() { return __p.__vector_as_array<byte>(4); }
  public string CheatScene { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatSceneBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCheatSceneBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCheatSceneArray() { return __p.__vector_as_array<byte>(6); }
  public string CheatName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCheatNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCheatNameArray() { return __p.__vector_as_array<byte>(8); }
  public string CheatDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCheatDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCheatDescArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GDT.CheatCommand> CreateCheatCommand(FlatBufferBuilder builder,
      StringOffset CheatCommandIDOffset = default(StringOffset),
      StringOffset CheatSceneOffset = default(StringOffset),
      StringOffset CheatNameOffset = default(StringOffset),
      StringOffset CheatDescOffset = default(StringOffset)) {
    builder.StartTable(4);
    CheatCommand.AddCheatDesc(builder, CheatDescOffset);
    CheatCommand.AddCheatName(builder, CheatNameOffset);
    CheatCommand.AddCheatScene(builder, CheatSceneOffset);
    CheatCommand.AddCheatCommandID(builder, CheatCommandIDOffset);
    return CheatCommand.EndCheatCommand(builder);
  }

  public static void StartCheatCommand(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCheatCommandID(FlatBufferBuilder builder, StringOffset CheatCommandIDOffset) { builder.AddOffset(0, CheatCommandIDOffset.Value, 0); }
  public static void AddCheatScene(FlatBufferBuilder builder, StringOffset CheatSceneOffset) { builder.AddOffset(1, CheatSceneOffset.Value, 0); }
  public static void AddCheatName(FlatBufferBuilder builder, StringOffset CheatNameOffset) { builder.AddOffset(2, CheatNameOffset.Value, 0); }
  public static void AddCheatDesc(FlatBufferBuilder builder, StringOffset CheatDescOffset) { builder.AddOffset(3, CheatDescOffset.Value, 0); }
  public static Offset<GDT.CheatCommand> EndCheatCommand(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CheatCommand>(o);
  }
  public CheatCommandT UnPack() {
    var _o = new CheatCommandT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CheatCommandT _o) {
    _o.CheatCommandID = this.CheatCommandID;
    _o.CheatScene = this.CheatScene;
    _o.CheatName = this.CheatName;
    _o.CheatDesc = this.CheatDesc;
  }
  public static Offset<GDT.CheatCommand> Pack(FlatBufferBuilder builder, CheatCommandT _o) {
    if (_o == null) return default(Offset<GDT.CheatCommand>);
    var _CheatCommandID = _o.CheatCommandID == null ? default(StringOffset) : builder.CreateString(_o.CheatCommandID);
    var _CheatScene = _o.CheatScene == null ? default(StringOffset) : builder.CreateString(_o.CheatScene);
    var _CheatName = _o.CheatName == null ? default(StringOffset) : builder.CreateString(_o.CheatName);
    var _CheatDesc = _o.CheatDesc == null ? default(StringOffset) : builder.CreateString(_o.CheatDesc);
    return CreateCheatCommand(
      builder,
      _CheatCommandID,
      _CheatScene,
      _CheatName,
      _CheatDesc);
  }
};

public class CheatCommandT
{
  public string CheatCommandID { get; set; }
  public string CheatScene { get; set; }
  public string CheatName { get; set; }
  public string CheatDesc { get; set; }

  public CheatCommandT() {
    this.CheatCommandID = null;
    this.CheatScene = null;
    this.CheatName = null;
    this.CheatDesc = null;
  }
}

public struct CheatCommandTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CheatCommandTable GetRootAsCheatCommandTable(ByteBuffer _bb) { return GetRootAsCheatCommandTable(_bb, new CheatCommandTable()); }
  public static CheatCommandTable GetRootAsCheatCommandTable(ByteBuffer _bb, CheatCommandTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CheatCommandTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CheatCommand? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CheatCommand?)(new GDT.CheatCommand()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CheatCommandTable> CreateCheatCommandTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CheatCommandTable.AddRows(builder, RowsOffset);
    return CheatCommandTable.EndCheatCommandTable(builder);
  }

  public static void StartCheatCommandTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CheatCommand>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CheatCommand>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CheatCommandTable> EndCheatCommandTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CheatCommandTable>(o);
  }
  public CheatCommandTableT UnPack() {
    var _o = new CheatCommandTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CheatCommandTableT _o) {
    _o.Rows = new List<GDT.CheatCommandT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CheatCommandTable> Pack(FlatBufferBuilder builder, CheatCommandTableT _o) {
    if (_o == null) return default(Offset<GDT.CheatCommandTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CheatCommand>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CheatCommand.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCheatCommandTable(
      builder,
      _Rows);
  }
};

public class CheatCommandTableT
{
  public List<GDT.CheatCommandT> Rows { get; set; }

  public CheatCommandTableT() {
    this.Rows = null;
  }
}

/// Defined by Cheat.xlsx
public struct CheatGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CheatGroup GetRootAsCheatGroup(ByteBuffer _bb) { return GetRootAsCheatGroup(_bb, new CheatGroup()); }
  public static CheatGroup GetRootAsCheatGroup(ByteBuffer _bb, CheatGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CheatGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CheatGroupID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatGroupIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCheatGroupIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCheatGroupIDArray() { return __p.__vector_as_array<byte>(4); }
  public string CheatKey { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatKeyBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetCheatKeyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCheatKeyArray() { return __p.__vector_as_array<byte>(6); }
  public string CheatParameter1 { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatParameter1Bytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCheatParameter1Bytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCheatParameter1Array() { return __p.__vector_as_array<byte>(8); }
  public string CheatParameter2 { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatParameter2Bytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCheatParameter2Bytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCheatParameter2Array() { return __p.__vector_as_array<byte>(10); }
  public string CheatParameter3 { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatParameter3Bytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCheatParameter3Bytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCheatParameter3Array() { return __p.__vector_as_array<byte>(12); }
  public string CheatParameter4 { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCheatParameter4Bytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetCheatParameter4Bytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCheatParameter4Array() { return __p.__vector_as_array<byte>(14); }

  public static Offset<GDT.CheatGroup> CreateCheatGroup(FlatBufferBuilder builder,
      StringOffset CheatGroupIDOffset = default(StringOffset),
      StringOffset CheatKeyOffset = default(StringOffset),
      StringOffset CheatParameter_1Offset = default(StringOffset),
      StringOffset CheatParameter_2Offset = default(StringOffset),
      StringOffset CheatParameter_3Offset = default(StringOffset),
      StringOffset CheatParameter_4Offset = default(StringOffset)) {
    builder.StartTable(6);
    CheatGroup.AddCheatParameter4(builder, CheatParameter_4Offset);
    CheatGroup.AddCheatParameter3(builder, CheatParameter_3Offset);
    CheatGroup.AddCheatParameter2(builder, CheatParameter_2Offset);
    CheatGroup.AddCheatParameter1(builder, CheatParameter_1Offset);
    CheatGroup.AddCheatKey(builder, CheatKeyOffset);
    CheatGroup.AddCheatGroupID(builder, CheatGroupIDOffset);
    return CheatGroup.EndCheatGroup(builder);
  }

  public static void StartCheatGroup(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddCheatGroupID(FlatBufferBuilder builder, StringOffset CheatGroupIDOffset) { builder.AddOffset(0, CheatGroupIDOffset.Value, 0); }
  public static void AddCheatKey(FlatBufferBuilder builder, StringOffset CheatKeyOffset) { builder.AddOffset(1, CheatKeyOffset.Value, 0); }
  public static void AddCheatParameter1(FlatBufferBuilder builder, StringOffset CheatParameter1Offset) { builder.AddOffset(2, CheatParameter1Offset.Value, 0); }
  public static void AddCheatParameter2(FlatBufferBuilder builder, StringOffset CheatParameter2Offset) { builder.AddOffset(3, CheatParameter2Offset.Value, 0); }
  public static void AddCheatParameter3(FlatBufferBuilder builder, StringOffset CheatParameter3Offset) { builder.AddOffset(4, CheatParameter3Offset.Value, 0); }
  public static void AddCheatParameter4(FlatBufferBuilder builder, StringOffset CheatParameter4Offset) { builder.AddOffset(5, CheatParameter4Offset.Value, 0); }
  public static Offset<GDT.CheatGroup> EndCheatGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CheatGroup>(o);
  }
  public CheatGroupT UnPack() {
    var _o = new CheatGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CheatGroupT _o) {
    _o.CheatGroupID = this.CheatGroupID;
    _o.CheatKey = this.CheatKey;
    _o.CheatParameter1 = this.CheatParameter1;
    _o.CheatParameter2 = this.CheatParameter2;
    _o.CheatParameter3 = this.CheatParameter3;
    _o.CheatParameter4 = this.CheatParameter4;
  }
  public static Offset<GDT.CheatGroup> Pack(FlatBufferBuilder builder, CheatGroupT _o) {
    if (_o == null) return default(Offset<GDT.CheatGroup>);
    var _CheatGroupID = _o.CheatGroupID == null ? default(StringOffset) : builder.CreateString(_o.CheatGroupID);
    var _CheatKey = _o.CheatKey == null ? default(StringOffset) : builder.CreateString(_o.CheatKey);
    var _CheatParameter_1 = _o.CheatParameter1 == null ? default(StringOffset) : builder.CreateString(_o.CheatParameter1);
    var _CheatParameter_2 = _o.CheatParameter2 == null ? default(StringOffset) : builder.CreateString(_o.CheatParameter2);
    var _CheatParameter_3 = _o.CheatParameter3 == null ? default(StringOffset) : builder.CreateString(_o.CheatParameter3);
    var _CheatParameter_4 = _o.CheatParameter4 == null ? default(StringOffset) : builder.CreateString(_o.CheatParameter4);
    return CreateCheatGroup(
      builder,
      _CheatGroupID,
      _CheatKey,
      _CheatParameter_1,
      _CheatParameter_2,
      _CheatParameter_3,
      _CheatParameter_4);
  }
};

public class CheatGroupT
{
  public string CheatGroupID { get; set; }
  public string CheatKey { get; set; }
  public string CheatParameter1 { get; set; }
  public string CheatParameter2 { get; set; }
  public string CheatParameter3 { get; set; }
  public string CheatParameter4 { get; set; }

  public CheatGroupT() {
    this.CheatGroupID = null;
    this.CheatKey = null;
    this.CheatParameter1 = null;
    this.CheatParameter2 = null;
    this.CheatParameter3 = null;
    this.CheatParameter4 = null;
  }
}

public struct CheatGroupTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CheatGroupTable GetRootAsCheatGroupTable(ByteBuffer _bb) { return GetRootAsCheatGroupTable(_bb, new CheatGroupTable()); }
  public static CheatGroupTable GetRootAsCheatGroupTable(ByteBuffer _bb, CheatGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CheatGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CheatGroup? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CheatGroup?)(new GDT.CheatGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CheatGroupTable> CreateCheatGroupTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CheatGroupTable.AddRows(builder, RowsOffset);
    return CheatGroupTable.EndCheatGroupTable(builder);
  }

  public static void StartCheatGroupTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CheatGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CheatGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CheatGroupTable> EndCheatGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CheatGroupTable>(o);
  }
  public CheatGroupTableT UnPack() {
    var _o = new CheatGroupTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CheatGroupTableT _o) {
    _o.Rows = new List<GDT.CheatGroupT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CheatGroupTable> Pack(FlatBufferBuilder builder, CheatGroupTableT _o) {
    if (_o == null) return default(Offset<GDT.CheatGroupTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CheatGroup>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CheatGroup.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCheatGroupTable(
      builder,
      _Rows);
  }
};

public class CheatGroupTableT
{
  public List<GDT.CheatGroupT> Rows { get; set; }

  public CheatGroupTableT() {
    this.Rows = null;
  }
}

/// Defined by ConnectWallet.xlsx
public struct ConnectWallet : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConnectWallet GetRootAsConnectWallet(ByteBuffer _bb) { return GetRootAsConnectWallet(_bb, new ConnectWallet()); }
  public static ConnectWallet GetRootAsConnectWallet(ByteBuffer _bb, ConnectWallet obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConnectWallet __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.WalletType WalletTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.WalletType)__p.bb.Get(o + __p.bb_pos) : GDT.WalletType.WT_None; } }
  public string WalletName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWalletNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetWalletNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetWalletNameArray() { return __p.__vector_as_array<byte>(6); }
  public string WalletIcon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWalletIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetWalletIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetWalletIconArray() { return __p.__vector_as_array<byte>(8); }
  public string SignatureMsg { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSignatureMsgBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSignatureMsgBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSignatureMsgArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GDT.ConnectWallet> CreateConnectWallet(FlatBufferBuilder builder,
      GDT.WalletType WalletTypeID = GDT.WalletType.WT_None,
      StringOffset WalletNameOffset = default(StringOffset),
      StringOffset WalletIconOffset = default(StringOffset),
      StringOffset SignatureMsgOffset = default(StringOffset)) {
    builder.StartTable(4);
    ConnectWallet.AddSignatureMsg(builder, SignatureMsgOffset);
    ConnectWallet.AddWalletIcon(builder, WalletIconOffset);
    ConnectWallet.AddWalletName(builder, WalletNameOffset);
    ConnectWallet.AddWalletTypeID(builder, WalletTypeID);
    return ConnectWallet.EndConnectWallet(builder);
  }

  public static void StartConnectWallet(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddWalletTypeID(FlatBufferBuilder builder, GDT.WalletType WalletTypeID) { builder.AddByte(0, (byte)WalletTypeID, 0); }
  public static void AddWalletName(FlatBufferBuilder builder, StringOffset WalletNameOffset) { builder.AddOffset(1, WalletNameOffset.Value, 0); }
  public static void AddWalletIcon(FlatBufferBuilder builder, StringOffset WalletIconOffset) { builder.AddOffset(2, WalletIconOffset.Value, 0); }
  public static void AddSignatureMsg(FlatBufferBuilder builder, StringOffset SignatureMsgOffset) { builder.AddOffset(3, SignatureMsgOffset.Value, 0); }
  public static Offset<GDT.ConnectWallet> EndConnectWallet(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ConnectWallet>(o);
  }
  public ConnectWalletT UnPack() {
    var _o = new ConnectWalletT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConnectWalletT _o) {
    _o.WalletTypeID = this.WalletTypeID;
    _o.WalletName = this.WalletName;
    _o.WalletIcon = this.WalletIcon;
    _o.SignatureMsg = this.SignatureMsg;
  }
  public static Offset<GDT.ConnectWallet> Pack(FlatBufferBuilder builder, ConnectWalletT _o) {
    if (_o == null) return default(Offset<GDT.ConnectWallet>);
    var _WalletName = _o.WalletName == null ? default(StringOffset) : builder.CreateString(_o.WalletName);
    var _WalletIcon = _o.WalletIcon == null ? default(StringOffset) : builder.CreateString(_o.WalletIcon);
    var _SignatureMsg = _o.SignatureMsg == null ? default(StringOffset) : builder.CreateString(_o.SignatureMsg);
    return CreateConnectWallet(
      builder,
      _o.WalletTypeID,
      _WalletName,
      _WalletIcon,
      _SignatureMsg);
  }
};

public class ConnectWalletT
{
  public GDT.WalletType WalletTypeID { get; set; }
  public string WalletName { get; set; }
  public string WalletIcon { get; set; }
  public string SignatureMsg { get; set; }

  public ConnectWalletT() {
    this.WalletTypeID = GDT.WalletType.WT_None;
    this.WalletName = null;
    this.WalletIcon = null;
    this.SignatureMsg = null;
  }
}

public struct ConnectWalletTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ConnectWalletTable GetRootAsConnectWalletTable(ByteBuffer _bb) { return GetRootAsConnectWalletTable(_bb, new ConnectWalletTable()); }
  public static ConnectWalletTable GetRootAsConnectWalletTable(ByteBuffer _bb, ConnectWalletTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ConnectWalletTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ConnectWallet? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ConnectWallet?)(new GDT.ConnectWallet()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ConnectWalletTable> CreateConnectWalletTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ConnectWalletTable.AddRows(builder, RowsOffset);
    return ConnectWalletTable.EndConnectWalletTable(builder);
  }

  public static void StartConnectWalletTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ConnectWallet>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ConnectWallet>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ConnectWalletTable> EndConnectWalletTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ConnectWalletTable>(o);
  }
  public ConnectWalletTableT UnPack() {
    var _o = new ConnectWalletTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ConnectWalletTableT _o) {
    _o.Rows = new List<GDT.ConnectWalletT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ConnectWalletTable> Pack(FlatBufferBuilder builder, ConnectWalletTableT _o) {
    if (_o == null) return default(Offset<GDT.ConnectWalletTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ConnectWallet>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ConnectWallet.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateConnectWalletTable(
      builder,
      _Rows);
  }
};

public class ConnectWalletTableT
{
  public List<GDT.ConnectWalletT> Rows { get; set; }

  public ConnectWalletTableT() {
    this.Rows = null;
  }
}

/// Defined by ContentGuide.xlsx
public struct ContentGuide : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentGuide GetRootAsContentGuide(ByteBuffer _bb) { return GetRootAsContentGuide(_bb, new ContentGuide()); }
  public static ContentGuide GetRootAsContentGuide(ByteBuffer _bb, ContentGuide obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentGuide __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ContentGuideID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ImageFileNameEng { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageFileNameEngBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetImageFileNameEngBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetImageFileNameEngArray() { return __p.__vector_as_array<byte>(8); }
  public string ImageFileNameCN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetImageFileNameCNBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetImageFileNameCNBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetImageFileNameCNArray() { return __p.__vector_as_array<byte>(10); }
  public string TitleTextID { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTitleTextIDBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetTitleTextIDBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetTitleTextIDArray() { return __p.__vector_as_array<byte>(12); }
  public string ContextTextID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetContextTextIDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetContextTextIDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetContextTextIDArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<GDT.ContentGuide> CreateContentGuide(FlatBufferBuilder builder,
      int ContentGuideID = 0,
      int Sort = 0,
      StringOffset ImageFileNameEngOffset = default(StringOffset),
      StringOffset ImageFileNameCNOffset = default(StringOffset),
      StringOffset TitleTextIDOffset = default(StringOffset),
      StringOffset ContextTextIDOffset = default(StringOffset)) {
    builder.StartTable(6);
    ContentGuide.AddContextTextID(builder, ContextTextIDOffset);
    ContentGuide.AddTitleTextID(builder, TitleTextIDOffset);
    ContentGuide.AddImageFileNameCN(builder, ImageFileNameCNOffset);
    ContentGuide.AddImageFileNameEng(builder, ImageFileNameEngOffset);
    ContentGuide.AddSort(builder, Sort);
    ContentGuide.AddContentGuideID(builder, ContentGuideID);
    return ContentGuide.EndContentGuide(builder);
  }

  public static void StartContentGuide(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddContentGuideID(FlatBufferBuilder builder, int ContentGuideID) { builder.AddInt(0, ContentGuideID, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(1, Sort, 0); }
  public static void AddImageFileNameEng(FlatBufferBuilder builder, StringOffset ImageFileNameEngOffset) { builder.AddOffset(2, ImageFileNameEngOffset.Value, 0); }
  public static void AddImageFileNameCN(FlatBufferBuilder builder, StringOffset ImageFileNameCNOffset) { builder.AddOffset(3, ImageFileNameCNOffset.Value, 0); }
  public static void AddTitleTextID(FlatBufferBuilder builder, StringOffset TitleTextIDOffset) { builder.AddOffset(4, TitleTextIDOffset.Value, 0); }
  public static void AddContextTextID(FlatBufferBuilder builder, StringOffset ContextTextIDOffset) { builder.AddOffset(5, ContextTextIDOffset.Value, 0); }
  public static Offset<GDT.ContentGuide> EndContentGuide(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentGuide>(o);
  }
  public ContentGuideT UnPack() {
    var _o = new ContentGuideT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentGuideT _o) {
    _o.ContentGuideID = this.ContentGuideID;
    _o.Sort = this.Sort;
    _o.ImageFileNameEng = this.ImageFileNameEng;
    _o.ImageFileNameCN = this.ImageFileNameCN;
    _o.TitleTextID = this.TitleTextID;
    _o.ContextTextID = this.ContextTextID;
  }
  public static Offset<GDT.ContentGuide> Pack(FlatBufferBuilder builder, ContentGuideT _o) {
    if (_o == null) return default(Offset<GDT.ContentGuide>);
    var _ImageFileNameEng = _o.ImageFileNameEng == null ? default(StringOffset) : builder.CreateString(_o.ImageFileNameEng);
    var _ImageFileNameCN = _o.ImageFileNameCN == null ? default(StringOffset) : builder.CreateString(_o.ImageFileNameCN);
    var _TitleTextID = _o.TitleTextID == null ? default(StringOffset) : builder.CreateString(_o.TitleTextID);
    var _ContextTextID = _o.ContextTextID == null ? default(StringOffset) : builder.CreateString(_o.ContextTextID);
    return CreateContentGuide(
      builder,
      _o.ContentGuideID,
      _o.Sort,
      _ImageFileNameEng,
      _ImageFileNameCN,
      _TitleTextID,
      _ContextTextID);
  }
};

public class ContentGuideT
{
  public int ContentGuideID { get; set; }
  public int Sort { get; set; }
  public string ImageFileNameEng { get; set; }
  public string ImageFileNameCN { get; set; }
  public string TitleTextID { get; set; }
  public string ContextTextID { get; set; }

  public ContentGuideT() {
    this.ContentGuideID = 0;
    this.Sort = 0;
    this.ImageFileNameEng = null;
    this.ImageFileNameCN = null;
    this.TitleTextID = null;
    this.ContextTextID = null;
  }
}

public struct ContentGuideTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentGuideTable GetRootAsContentGuideTable(ByteBuffer _bb) { return GetRootAsContentGuideTable(_bb, new ContentGuideTable()); }
  public static ContentGuideTable GetRootAsContentGuideTable(ByteBuffer _bb, ContentGuideTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentGuideTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ContentGuide? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ContentGuide?)(new GDT.ContentGuide()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ContentGuideTable> CreateContentGuideTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ContentGuideTable.AddRows(builder, RowsOffset);
    return ContentGuideTable.EndContentGuideTable(builder);
  }

  public static void StartContentGuideTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ContentGuide>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ContentGuide>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ContentGuideTable> EndContentGuideTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentGuideTable>(o);
  }
  public ContentGuideTableT UnPack() {
    var _o = new ContentGuideTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentGuideTableT _o) {
    _o.Rows = new List<GDT.ContentGuideT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ContentGuideTable> Pack(FlatBufferBuilder builder, ContentGuideTableT _o) {
    if (_o == null) return default(Offset<GDT.ContentGuideTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ContentGuide>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ContentGuide.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateContentGuideTable(
      builder,
      _Rows);
  }
};

public class ContentGuideTableT
{
  public List<GDT.ContentGuideT> Rows { get; set; }

  public ContentGuideTableT() {
    this.Rows = null;
  }
}

/// Defined by ContentManager.xlsx
public struct ContentManagerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentManagerInfo GetRootAsContentManagerInfo(ByteBuffer _bb) { return GetRootAsContentManagerInfo(_bb, new ContentManagerInfo()); }
  public static ContentManagerInfo GetRootAsContentManagerInfo(ByteBuffer _bb, ContentManagerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentManagerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ContentDisplayType ContentDisplayTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ContentDisplayType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentDisplayType.CDT_None; } }
  public GDT.ContentMainType ContentMainTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.ContentMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentMainType.CT_None; } }
  public bool DisplayShowButton { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.OpenConditionType ConditionTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.OpenConditionType)__p.bb.Get(o + __p.bb_pos) : GDT.OpenConditionType.OCT_None; } }
  public int ConditionValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int IconSort { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public string IconResourcesName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconResourcesNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconResourcesNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconResourcesNameArray() { return __p.__vector_as_array<byte>(20); }
  public string IconNameText { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconNameTextBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetIconNameTextBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetIconNameTextArray() { return __p.__vector_as_array<byte>(22); }
  public string SceneNameText { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSceneNameTextBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSceneNameTextBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSceneNameTextArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<GDT.ContentManagerInfo> CreateContentManagerInfo(FlatBufferBuilder builder,
      int Index = 0,
      GDT.ContentDisplayType ContentDisplayTypeID = GDT.ContentDisplayType.CDT_None,
      GDT.ContentMainType ContentMainTypeID = GDT.ContentMainType.CT_None,
      bool DisplayShowButton = false,
      GDT.OpenConditionType ConditionTypeID = GDT.OpenConditionType.OCT_None,
      int ConditionValue = 0,
      int IconSort = 0,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      StringOffset IconResourcesNameOffset = default(StringOffset),
      StringOffset IconNameTextOffset = default(StringOffset),
      StringOffset SceneNameTextOffset = default(StringOffset)) {
    builder.StartTable(11);
    ContentManagerInfo.AddSceneNameText(builder, SceneNameTextOffset);
    ContentManagerInfo.AddIconNameText(builder, IconNameTextOffset);
    ContentManagerInfo.AddIconResourcesName(builder, IconResourcesNameOffset);
    ContentManagerInfo.AddIconSort(builder, IconSort);
    ContentManagerInfo.AddConditionValue(builder, ConditionValue);
    ContentManagerInfo.AddIndex(builder, Index);
    ContentManagerInfo.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    ContentManagerInfo.AddConditionTypeID(builder, ConditionTypeID);
    ContentManagerInfo.AddDisplayShowButton(builder, DisplayShowButton);
    ContentManagerInfo.AddContentMainTypeID(builder, ContentMainTypeID);
    ContentManagerInfo.AddContentDisplayTypeID(builder, ContentDisplayTypeID);
    return ContentManagerInfo.EndContentManagerInfo(builder);
  }

  public static void StartContentManagerInfo(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddContentDisplayTypeID(FlatBufferBuilder builder, GDT.ContentDisplayType ContentDisplayTypeID) { builder.AddByte(1, (byte)ContentDisplayTypeID, 0); }
  public static void AddContentMainTypeID(FlatBufferBuilder builder, GDT.ContentMainType ContentMainTypeID) { builder.AddByte(2, (byte)ContentMainTypeID, 0); }
  public static void AddDisplayShowButton(FlatBufferBuilder builder, bool DisplayShowButton) { builder.AddBool(3, DisplayShowButton, false); }
  public static void AddConditionTypeID(FlatBufferBuilder builder, GDT.OpenConditionType ConditionTypeID) { builder.AddByte(4, (byte)ConditionTypeID, 0); }
  public static void AddConditionValue(FlatBufferBuilder builder, int ConditionValue) { builder.AddInt(5, ConditionValue, 0); }
  public static void AddIconSort(FlatBufferBuilder builder, int IconSort) { builder.AddInt(6, IconSort, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(7, (byte)CurrencySubTypeID, 0); }
  public static void AddIconResourcesName(FlatBufferBuilder builder, StringOffset IconResourcesNameOffset) { builder.AddOffset(8, IconResourcesNameOffset.Value, 0); }
  public static void AddIconNameText(FlatBufferBuilder builder, StringOffset IconNameTextOffset) { builder.AddOffset(9, IconNameTextOffset.Value, 0); }
  public static void AddSceneNameText(FlatBufferBuilder builder, StringOffset SceneNameTextOffset) { builder.AddOffset(10, SceneNameTextOffset.Value, 0); }
  public static Offset<GDT.ContentManagerInfo> EndContentManagerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentManagerInfo>(o);
  }
  public ContentManagerInfoT UnPack() {
    var _o = new ContentManagerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentManagerInfoT _o) {
    _o.Index = this.Index;
    _o.ContentDisplayTypeID = this.ContentDisplayTypeID;
    _o.ContentMainTypeID = this.ContentMainTypeID;
    _o.DisplayShowButton = this.DisplayShowButton;
    _o.ConditionTypeID = this.ConditionTypeID;
    _o.ConditionValue = this.ConditionValue;
    _o.IconSort = this.IconSort;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.IconResourcesName = this.IconResourcesName;
    _o.IconNameText = this.IconNameText;
    _o.SceneNameText = this.SceneNameText;
  }
  public static Offset<GDT.ContentManagerInfo> Pack(FlatBufferBuilder builder, ContentManagerInfoT _o) {
    if (_o == null) return default(Offset<GDT.ContentManagerInfo>);
    var _IconResourcesName = _o.IconResourcesName == null ? default(StringOffset) : builder.CreateString(_o.IconResourcesName);
    var _IconNameText = _o.IconNameText == null ? default(StringOffset) : builder.CreateString(_o.IconNameText);
    var _SceneNameText = _o.SceneNameText == null ? default(StringOffset) : builder.CreateString(_o.SceneNameText);
    return CreateContentManagerInfo(
      builder,
      _o.Index,
      _o.ContentDisplayTypeID,
      _o.ContentMainTypeID,
      _o.DisplayShowButton,
      _o.ConditionTypeID,
      _o.ConditionValue,
      _o.IconSort,
      _o.CurrencySubTypeID,
      _IconResourcesName,
      _IconNameText,
      _SceneNameText);
  }
};

public class ContentManagerInfoT
{
  public int Index { get; set; }
  public GDT.ContentDisplayType ContentDisplayTypeID { get; set; }
  public GDT.ContentMainType ContentMainTypeID { get; set; }
  public bool DisplayShowButton { get; set; }
  public GDT.OpenConditionType ConditionTypeID { get; set; }
  public int ConditionValue { get; set; }
  public int IconSort { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public string IconResourcesName { get; set; }
  public string IconNameText { get; set; }
  public string SceneNameText { get; set; }

  public ContentManagerInfoT() {
    this.Index = 0;
    this.ContentDisplayTypeID = GDT.ContentDisplayType.CDT_None;
    this.ContentMainTypeID = GDT.ContentMainType.CT_None;
    this.DisplayShowButton = false;
    this.ConditionTypeID = GDT.OpenConditionType.OCT_None;
    this.ConditionValue = 0;
    this.IconSort = 0;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.IconResourcesName = null;
    this.IconNameText = null;
    this.SceneNameText = null;
  }
}

public struct ContentManagerInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentManagerInfoTable GetRootAsContentManagerInfoTable(ByteBuffer _bb) { return GetRootAsContentManagerInfoTable(_bb, new ContentManagerInfoTable()); }
  public static ContentManagerInfoTable GetRootAsContentManagerInfoTable(ByteBuffer _bb, ContentManagerInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentManagerInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ContentManagerInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ContentManagerInfo?)(new GDT.ContentManagerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ContentManagerInfoTable> CreateContentManagerInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ContentManagerInfoTable.AddRows(builder, RowsOffset);
    return ContentManagerInfoTable.EndContentManagerInfoTable(builder);
  }

  public static void StartContentManagerInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ContentManagerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ContentManagerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ContentManagerInfoTable> EndContentManagerInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentManagerInfoTable>(o);
  }
  public ContentManagerInfoTableT UnPack() {
    var _o = new ContentManagerInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentManagerInfoTableT _o) {
    _o.Rows = new List<GDT.ContentManagerInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ContentManagerInfoTable> Pack(FlatBufferBuilder builder, ContentManagerInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.ContentManagerInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ContentManagerInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ContentManagerInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateContentManagerInfoTable(
      builder,
      _Rows);
  }
};

public class ContentManagerInfoTableT
{
  public List<GDT.ContentManagerInfoT> Rows { get; set; }

  public ContentManagerInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by ContentManager.xlsx
public struct ContentTopDisplayData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentTopDisplayData GetRootAsContentTopDisplayData(ByteBuffer _bb) { return GetRootAsContentTopDisplayData(_bb, new ContentTopDisplayData()); }
  public static ContentTopDisplayData GetRootAsContentTopDisplayData(ByteBuffer _bb, ContentTopDisplayData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentTopDisplayData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ContentMainType ContentMainTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.ContentMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentMainType.CT_None; } }
  public int ContentSubIndex { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType CurrencyMainTypeID01 { get { int o = __p.__offset(8); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID01 { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.CurrencyMainType CurrencyMainTypeID02 { get { int o = __p.__offset(12); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID02 { get { int o = __p.__offset(14); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.CurrencyMainType CurrencyMainTypeID03 { get { int o = __p.__offset(16); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID03 { get { int o = __p.__offset(18); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.CurrencyMainType CurrencyMainTypeID04 { get { int o = __p.__offset(20); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID04 { get { int o = __p.__offset(22); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.CurrencyMainType CurrencyMainTypeID05 { get { int o = __p.__offset(24); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID05 { get { int o = __p.__offset(26); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.CurrencyMainType CurrencyMainTypeID06 { get { int o = __p.__offset(28); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID06 { get { int o = __p.__offset(30); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }

  public static Offset<GDT.ContentTopDisplayData> CreateContentTopDisplayData(FlatBufferBuilder builder,
      GDT.ContentMainType ContentMainTypeID = GDT.ContentMainType.CT_None,
      int ContentSubIndex = 0,
      GDT.CurrencyMainType CurrencyMainTypeID01 = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID01 = GDT.CurrencySubType.CST_None,
      GDT.CurrencyMainType CurrencyMainTypeID02 = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID02 = GDT.CurrencySubType.CST_None,
      GDT.CurrencyMainType CurrencyMainTypeID03 = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID03 = GDT.CurrencySubType.CST_None,
      GDT.CurrencyMainType CurrencyMainTypeID04 = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID04 = GDT.CurrencySubType.CST_None,
      GDT.CurrencyMainType CurrencyMainTypeID05 = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID05 = GDT.CurrencySubType.CST_None,
      GDT.CurrencyMainType CurrencyMainTypeID06 = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID06 = GDT.CurrencySubType.CST_None) {
    builder.StartTable(14);
    ContentTopDisplayData.AddContentSubIndex(builder, ContentSubIndex);
    ContentTopDisplayData.AddCurrencySubTypeID06(builder, CurrencySubTypeID06);
    ContentTopDisplayData.AddCurrencyMainTypeID06(builder, CurrencyMainTypeID06);
    ContentTopDisplayData.AddCurrencySubTypeID05(builder, CurrencySubTypeID05);
    ContentTopDisplayData.AddCurrencyMainTypeID05(builder, CurrencyMainTypeID05);
    ContentTopDisplayData.AddCurrencySubTypeID04(builder, CurrencySubTypeID04);
    ContentTopDisplayData.AddCurrencyMainTypeID04(builder, CurrencyMainTypeID04);
    ContentTopDisplayData.AddCurrencySubTypeID03(builder, CurrencySubTypeID03);
    ContentTopDisplayData.AddCurrencyMainTypeID03(builder, CurrencyMainTypeID03);
    ContentTopDisplayData.AddCurrencySubTypeID02(builder, CurrencySubTypeID02);
    ContentTopDisplayData.AddCurrencyMainTypeID02(builder, CurrencyMainTypeID02);
    ContentTopDisplayData.AddCurrencySubTypeID01(builder, CurrencySubTypeID01);
    ContentTopDisplayData.AddCurrencyMainTypeID01(builder, CurrencyMainTypeID01);
    ContentTopDisplayData.AddContentMainTypeID(builder, ContentMainTypeID);
    return ContentTopDisplayData.EndContentTopDisplayData(builder);
  }

  public static void StartContentTopDisplayData(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddContentMainTypeID(FlatBufferBuilder builder, GDT.ContentMainType ContentMainTypeID) { builder.AddByte(0, (byte)ContentMainTypeID, 0); }
  public static void AddContentSubIndex(FlatBufferBuilder builder, int ContentSubIndex) { builder.AddInt(1, ContentSubIndex, 0); }
  public static void AddCurrencyMainTypeID01(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID01) { builder.AddByte(2, (byte)CurrencyMainTypeID01, 0); }
  public static void AddCurrencySubTypeID01(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID01) { builder.AddByte(3, (byte)CurrencySubTypeID01, 0); }
  public static void AddCurrencyMainTypeID02(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID02) { builder.AddByte(4, (byte)CurrencyMainTypeID02, 0); }
  public static void AddCurrencySubTypeID02(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID02) { builder.AddByte(5, (byte)CurrencySubTypeID02, 0); }
  public static void AddCurrencyMainTypeID03(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID03) { builder.AddByte(6, (byte)CurrencyMainTypeID03, 0); }
  public static void AddCurrencySubTypeID03(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID03) { builder.AddByte(7, (byte)CurrencySubTypeID03, 0); }
  public static void AddCurrencyMainTypeID04(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID04) { builder.AddByte(8, (byte)CurrencyMainTypeID04, 0); }
  public static void AddCurrencySubTypeID04(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID04) { builder.AddByte(9, (byte)CurrencySubTypeID04, 0); }
  public static void AddCurrencyMainTypeID05(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID05) { builder.AddByte(10, (byte)CurrencyMainTypeID05, 0); }
  public static void AddCurrencySubTypeID05(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID05) { builder.AddByte(11, (byte)CurrencySubTypeID05, 0); }
  public static void AddCurrencyMainTypeID06(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID06) { builder.AddByte(12, (byte)CurrencyMainTypeID06, 0); }
  public static void AddCurrencySubTypeID06(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID06) { builder.AddByte(13, (byte)CurrencySubTypeID06, 0); }
  public static Offset<GDT.ContentTopDisplayData> EndContentTopDisplayData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentTopDisplayData>(o);
  }
  public ContentTopDisplayDataT UnPack() {
    var _o = new ContentTopDisplayDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentTopDisplayDataT _o) {
    _o.ContentMainTypeID = this.ContentMainTypeID;
    _o.ContentSubIndex = this.ContentSubIndex;
    _o.CurrencyMainTypeID01 = this.CurrencyMainTypeID01;
    _o.CurrencySubTypeID01 = this.CurrencySubTypeID01;
    _o.CurrencyMainTypeID02 = this.CurrencyMainTypeID02;
    _o.CurrencySubTypeID02 = this.CurrencySubTypeID02;
    _o.CurrencyMainTypeID03 = this.CurrencyMainTypeID03;
    _o.CurrencySubTypeID03 = this.CurrencySubTypeID03;
    _o.CurrencyMainTypeID04 = this.CurrencyMainTypeID04;
    _o.CurrencySubTypeID04 = this.CurrencySubTypeID04;
    _o.CurrencyMainTypeID05 = this.CurrencyMainTypeID05;
    _o.CurrencySubTypeID05 = this.CurrencySubTypeID05;
    _o.CurrencyMainTypeID06 = this.CurrencyMainTypeID06;
    _o.CurrencySubTypeID06 = this.CurrencySubTypeID06;
  }
  public static Offset<GDT.ContentTopDisplayData> Pack(FlatBufferBuilder builder, ContentTopDisplayDataT _o) {
    if (_o == null) return default(Offset<GDT.ContentTopDisplayData>);
    return CreateContentTopDisplayData(
      builder,
      _o.ContentMainTypeID,
      _o.ContentSubIndex,
      _o.CurrencyMainTypeID01,
      _o.CurrencySubTypeID01,
      _o.CurrencyMainTypeID02,
      _o.CurrencySubTypeID02,
      _o.CurrencyMainTypeID03,
      _o.CurrencySubTypeID03,
      _o.CurrencyMainTypeID04,
      _o.CurrencySubTypeID04,
      _o.CurrencyMainTypeID05,
      _o.CurrencySubTypeID05,
      _o.CurrencyMainTypeID06,
      _o.CurrencySubTypeID06);
  }
};

public class ContentTopDisplayDataT
{
  public GDT.ContentMainType ContentMainTypeID { get; set; }
  public int ContentSubIndex { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID01 { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID01 { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID02 { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID02 { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID03 { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID03 { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID04 { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID04 { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID05 { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID05 { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID06 { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID06 { get; set; }

  public ContentTopDisplayDataT() {
    this.ContentMainTypeID = GDT.ContentMainType.CT_None;
    this.ContentSubIndex = 0;
    this.CurrencyMainTypeID01 = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID01 = GDT.CurrencySubType.CST_None;
    this.CurrencyMainTypeID02 = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID02 = GDT.CurrencySubType.CST_None;
    this.CurrencyMainTypeID03 = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID03 = GDT.CurrencySubType.CST_None;
    this.CurrencyMainTypeID04 = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID04 = GDT.CurrencySubType.CST_None;
    this.CurrencyMainTypeID05 = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID05 = GDT.CurrencySubType.CST_None;
    this.CurrencyMainTypeID06 = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID06 = GDT.CurrencySubType.CST_None;
  }
}

public struct ContentTopDisplayDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentTopDisplayDataTable GetRootAsContentTopDisplayDataTable(ByteBuffer _bb) { return GetRootAsContentTopDisplayDataTable(_bb, new ContentTopDisplayDataTable()); }
  public static ContentTopDisplayDataTable GetRootAsContentTopDisplayDataTable(ByteBuffer _bb, ContentTopDisplayDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentTopDisplayDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ContentTopDisplayData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ContentTopDisplayData?)(new GDT.ContentTopDisplayData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ContentTopDisplayDataTable> CreateContentTopDisplayDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ContentTopDisplayDataTable.AddRows(builder, RowsOffset);
    return ContentTopDisplayDataTable.EndContentTopDisplayDataTable(builder);
  }

  public static void StartContentTopDisplayDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ContentTopDisplayData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ContentTopDisplayData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ContentTopDisplayDataTable> EndContentTopDisplayDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentTopDisplayDataTable>(o);
  }
  public ContentTopDisplayDataTableT UnPack() {
    var _o = new ContentTopDisplayDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentTopDisplayDataTableT _o) {
    _o.Rows = new List<GDT.ContentTopDisplayDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ContentTopDisplayDataTable> Pack(FlatBufferBuilder builder, ContentTopDisplayDataTableT _o) {
    if (_o == null) return default(Offset<GDT.ContentTopDisplayDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ContentTopDisplayData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ContentTopDisplayData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateContentTopDisplayDataTable(
      builder,
      _Rows);
  }
};

public class ContentTopDisplayDataTableT
{
  public List<GDT.ContentTopDisplayDataT> Rows { get; set; }

  public ContentTopDisplayDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Currency.xlsx
public struct CurrencyInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CurrencyInfo GetRootAsCurrencyInfo(ByteBuffer _bb) { return GetRootAsCurrencyInfo(_bb, new CurrencyInfo()); }
  public static CurrencyInfo GetRootAsCurrencyInfo(ByteBuffer _bb, CurrencyInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CurrencyInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public string CurrencyName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrencyNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCurrencyNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCurrencyNameArray() { return __p.__vector_as_array<byte>(8); }
  public string CurrencyDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrencyDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCurrencyDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCurrencyDescArray() { return __p.__vector_as_array<byte>(10); }
  public GDT.ApplicationType ApplicationTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.ApplicationType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplicationType.AT_Account; } }
  public GDT.ChargedType ChargedTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.ChargedType)__p.bb.Get(o + __p.bb_pos) : GDT.ChargedType.CT_None; } }
  public int ChargeValue { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DefaultValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxValue { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BigIcon { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigIconBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetBigIconBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetBigIconArray() { return __p.__vector_as_array<byte>(22); }
  public string SmallIcon { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallIconBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSmallIconBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSmallIconArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<GDT.CurrencyInfo> CreateCurrencyInfo(FlatBufferBuilder builder,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      StringOffset CurrencyNameOffset = default(StringOffset),
      StringOffset CurrencyDescOffset = default(StringOffset),
      GDT.ApplicationType ApplicationTypeID = GDT.ApplicationType.AT_Account,
      GDT.ChargedType ChargedTypeID = GDT.ChargedType.CT_None,
      int ChargeValue = 0,
      int DefaultValue = 0,
      int MaxValue = 0,
      StringOffset BigIconOffset = default(StringOffset),
      StringOffset SmallIconOffset = default(StringOffset)) {
    builder.StartTable(11);
    CurrencyInfo.AddSmallIcon(builder, SmallIconOffset);
    CurrencyInfo.AddBigIcon(builder, BigIconOffset);
    CurrencyInfo.AddMaxValue(builder, MaxValue);
    CurrencyInfo.AddDefaultValue(builder, DefaultValue);
    CurrencyInfo.AddChargeValue(builder, ChargeValue);
    CurrencyInfo.AddCurrencyDesc(builder, CurrencyDescOffset);
    CurrencyInfo.AddCurrencyName(builder, CurrencyNameOffset);
    CurrencyInfo.AddChargedTypeID(builder, ChargedTypeID);
    CurrencyInfo.AddApplicationTypeID(builder, ApplicationTypeID);
    CurrencyInfo.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    CurrencyInfo.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    return CurrencyInfo.EndCurrencyInfo(builder);
  }

  public static void StartCurrencyInfo(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(0, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(1, (byte)CurrencySubTypeID, 0); }
  public static void AddCurrencyName(FlatBufferBuilder builder, StringOffset CurrencyNameOffset) { builder.AddOffset(2, CurrencyNameOffset.Value, 0); }
  public static void AddCurrencyDesc(FlatBufferBuilder builder, StringOffset CurrencyDescOffset) { builder.AddOffset(3, CurrencyDescOffset.Value, 0); }
  public static void AddApplicationTypeID(FlatBufferBuilder builder, GDT.ApplicationType ApplicationTypeID) { builder.AddByte(4, (byte)ApplicationTypeID, 0); }
  public static void AddChargedTypeID(FlatBufferBuilder builder, GDT.ChargedType ChargedTypeID) { builder.AddByte(5, (byte)ChargedTypeID, 0); }
  public static void AddChargeValue(FlatBufferBuilder builder, int ChargeValue) { builder.AddInt(6, ChargeValue, 0); }
  public static void AddDefaultValue(FlatBufferBuilder builder, int DefaultValue) { builder.AddInt(7, DefaultValue, 0); }
  public static void AddMaxValue(FlatBufferBuilder builder, int MaxValue) { builder.AddInt(8, MaxValue, 0); }
  public static void AddBigIcon(FlatBufferBuilder builder, StringOffset BigIconOffset) { builder.AddOffset(9, BigIconOffset.Value, 0); }
  public static void AddSmallIcon(FlatBufferBuilder builder, StringOffset SmallIconOffset) { builder.AddOffset(10, SmallIconOffset.Value, 0); }
  public static Offset<GDT.CurrencyInfo> EndCurrencyInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CurrencyInfo>(o);
  }
  public CurrencyInfoT UnPack() {
    var _o = new CurrencyInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CurrencyInfoT _o) {
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.CurrencyName = this.CurrencyName;
    _o.CurrencyDesc = this.CurrencyDesc;
    _o.ApplicationTypeID = this.ApplicationTypeID;
    _o.ChargedTypeID = this.ChargedTypeID;
    _o.ChargeValue = this.ChargeValue;
    _o.DefaultValue = this.DefaultValue;
    _o.MaxValue = this.MaxValue;
    _o.BigIcon = this.BigIcon;
    _o.SmallIcon = this.SmallIcon;
  }
  public static Offset<GDT.CurrencyInfo> Pack(FlatBufferBuilder builder, CurrencyInfoT _o) {
    if (_o == null) return default(Offset<GDT.CurrencyInfo>);
    var _CurrencyName = _o.CurrencyName == null ? default(StringOffset) : builder.CreateString(_o.CurrencyName);
    var _CurrencyDesc = _o.CurrencyDesc == null ? default(StringOffset) : builder.CreateString(_o.CurrencyDesc);
    var _BigIcon = _o.BigIcon == null ? default(StringOffset) : builder.CreateString(_o.BigIcon);
    var _SmallIcon = _o.SmallIcon == null ? default(StringOffset) : builder.CreateString(_o.SmallIcon);
    return CreateCurrencyInfo(
      builder,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeID,
      _CurrencyName,
      _CurrencyDesc,
      _o.ApplicationTypeID,
      _o.ChargedTypeID,
      _o.ChargeValue,
      _o.DefaultValue,
      _o.MaxValue,
      _BigIcon,
      _SmallIcon);
  }
};

public class CurrencyInfoT
{
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public string CurrencyName { get; set; }
  public string CurrencyDesc { get; set; }
  public GDT.ApplicationType ApplicationTypeID { get; set; }
  public GDT.ChargedType ChargedTypeID { get; set; }
  public int ChargeValue { get; set; }
  public int DefaultValue { get; set; }
  public int MaxValue { get; set; }
  public string BigIcon { get; set; }
  public string SmallIcon { get; set; }

  public CurrencyInfoT() {
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.CurrencyName = null;
    this.CurrencyDesc = null;
    this.ApplicationTypeID = GDT.ApplicationType.AT_Account;
    this.ChargedTypeID = GDT.ChargedType.CT_None;
    this.ChargeValue = 0;
    this.DefaultValue = 0;
    this.MaxValue = 0;
    this.BigIcon = null;
    this.SmallIcon = null;
  }
}

public struct CurrencyInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CurrencyInfoTable GetRootAsCurrencyInfoTable(ByteBuffer _bb) { return GetRootAsCurrencyInfoTable(_bb, new CurrencyInfoTable()); }
  public static CurrencyInfoTable GetRootAsCurrencyInfoTable(ByteBuffer _bb, CurrencyInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CurrencyInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CurrencyInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CurrencyInfo?)(new GDT.CurrencyInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CurrencyInfoTable> CreateCurrencyInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CurrencyInfoTable.AddRows(builder, RowsOffset);
    return CurrencyInfoTable.EndCurrencyInfoTable(builder);
  }

  public static void StartCurrencyInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CurrencyInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CurrencyInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CurrencyInfoTable> EndCurrencyInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CurrencyInfoTable>(o);
  }
  public CurrencyInfoTableT UnPack() {
    var _o = new CurrencyInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CurrencyInfoTableT _o) {
    _o.Rows = new List<GDT.CurrencyInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CurrencyInfoTable> Pack(FlatBufferBuilder builder, CurrencyInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.CurrencyInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CurrencyInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CurrencyInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCurrencyInfoTable(
      builder,
      _Rows);
  }
};

public class CurrencyInfoTableT
{
  public List<GDT.CurrencyInfoT> Rows { get; set; }

  public CurrencyInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Currency.xlsx
public struct CoinInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CoinInfo GetRootAsCoinInfo(ByteBuffer _bb) { return GetRootAsCoinInfo(_bb, new CoinInfo()); }
  public static CoinInfo GetRootAsCoinInfo(ByteBuffer _bb, CoinInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CoinInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public string CoinTokenID { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCoinTokenIDBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCoinTokenIDBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCoinTokenIDArray() { return __p.__vector_as_array<byte>(8); }
  public string CurrencyName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrencyNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCurrencyNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCurrencyNameArray() { return __p.__vector_as_array<byte>(10); }
  public string CurrencyDesc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCurrencyDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetCurrencyDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetCurrencyDescArray() { return __p.__vector_as_array<byte>(12); }
  public int UCID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float WithdrawFee { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int WithdrawMin { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WithdrawMax { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BigIcon { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBigIconBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetBigIconBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetBigIconArray() { return __p.__vector_as_array<byte>(22); }
  public string SmallIcon { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSmallIconBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSmallIconBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSmallIconArray() { return __p.__vector_as_array<byte>(24); }

  public static Offset<GDT.CoinInfo> CreateCoinInfo(FlatBufferBuilder builder,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      StringOffset CoinTokenIDOffset = default(StringOffset),
      StringOffset CurrencyNameOffset = default(StringOffset),
      StringOffset CurrencyDescOffset = default(StringOffset),
      int UCID = 0,
      float WithdrawFee = 0.0f,
      int WithdrawMin = 0,
      int WithdrawMax = 0,
      StringOffset BigIconOffset = default(StringOffset),
      StringOffset SmallIconOffset = default(StringOffset)) {
    builder.StartTable(11);
    CoinInfo.AddSmallIcon(builder, SmallIconOffset);
    CoinInfo.AddBigIcon(builder, BigIconOffset);
    CoinInfo.AddWithdrawMax(builder, WithdrawMax);
    CoinInfo.AddWithdrawMin(builder, WithdrawMin);
    CoinInfo.AddWithdrawFee(builder, WithdrawFee);
    CoinInfo.AddUCID(builder, UCID);
    CoinInfo.AddCurrencyDesc(builder, CurrencyDescOffset);
    CoinInfo.AddCurrencyName(builder, CurrencyNameOffset);
    CoinInfo.AddCoinTokenID(builder, CoinTokenIDOffset);
    CoinInfo.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    CoinInfo.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    return CoinInfo.EndCoinInfo(builder);
  }

  public static void StartCoinInfo(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(0, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(1, (byte)CurrencySubTypeID, 0); }
  public static void AddCoinTokenID(FlatBufferBuilder builder, StringOffset CoinTokenIDOffset) { builder.AddOffset(2, CoinTokenIDOffset.Value, 0); }
  public static void AddCurrencyName(FlatBufferBuilder builder, StringOffset CurrencyNameOffset) { builder.AddOffset(3, CurrencyNameOffset.Value, 0); }
  public static void AddCurrencyDesc(FlatBufferBuilder builder, StringOffset CurrencyDescOffset) { builder.AddOffset(4, CurrencyDescOffset.Value, 0); }
  public static void AddUCID(FlatBufferBuilder builder, int UCID) { builder.AddInt(5, UCID, 0); }
  public static void AddWithdrawFee(FlatBufferBuilder builder, float WithdrawFee) { builder.AddFloat(6, WithdrawFee, 0.0f); }
  public static void AddWithdrawMin(FlatBufferBuilder builder, int WithdrawMin) { builder.AddInt(7, WithdrawMin, 0); }
  public static void AddWithdrawMax(FlatBufferBuilder builder, int WithdrawMax) { builder.AddInt(8, WithdrawMax, 0); }
  public static void AddBigIcon(FlatBufferBuilder builder, StringOffset BigIconOffset) { builder.AddOffset(9, BigIconOffset.Value, 0); }
  public static void AddSmallIcon(FlatBufferBuilder builder, StringOffset SmallIconOffset) { builder.AddOffset(10, SmallIconOffset.Value, 0); }
  public static Offset<GDT.CoinInfo> EndCoinInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CoinInfo>(o);
  }
  public CoinInfoT UnPack() {
    var _o = new CoinInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CoinInfoT _o) {
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.CoinTokenID = this.CoinTokenID;
    _o.CurrencyName = this.CurrencyName;
    _o.CurrencyDesc = this.CurrencyDesc;
    _o.UCID = this.UCID;
    _o.WithdrawFee = this.WithdrawFee;
    _o.WithdrawMin = this.WithdrawMin;
    _o.WithdrawMax = this.WithdrawMax;
    _o.BigIcon = this.BigIcon;
    _o.SmallIcon = this.SmallIcon;
  }
  public static Offset<GDT.CoinInfo> Pack(FlatBufferBuilder builder, CoinInfoT _o) {
    if (_o == null) return default(Offset<GDT.CoinInfo>);
    var _CoinTokenID = _o.CoinTokenID == null ? default(StringOffset) : builder.CreateString(_o.CoinTokenID);
    var _CurrencyName = _o.CurrencyName == null ? default(StringOffset) : builder.CreateString(_o.CurrencyName);
    var _CurrencyDesc = _o.CurrencyDesc == null ? default(StringOffset) : builder.CreateString(_o.CurrencyDesc);
    var _BigIcon = _o.BigIcon == null ? default(StringOffset) : builder.CreateString(_o.BigIcon);
    var _SmallIcon = _o.SmallIcon == null ? default(StringOffset) : builder.CreateString(_o.SmallIcon);
    return CreateCoinInfo(
      builder,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeID,
      _CoinTokenID,
      _CurrencyName,
      _CurrencyDesc,
      _o.UCID,
      _o.WithdrawFee,
      _o.WithdrawMin,
      _o.WithdrawMax,
      _BigIcon,
      _SmallIcon);
  }
};

public class CoinInfoT
{
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public string CoinTokenID { get; set; }
  public string CurrencyName { get; set; }
  public string CurrencyDesc { get; set; }
  public int UCID { get; set; }
  public float WithdrawFee { get; set; }
  public int WithdrawMin { get; set; }
  public int WithdrawMax { get; set; }
  public string BigIcon { get; set; }
  public string SmallIcon { get; set; }

  public CoinInfoT() {
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.CoinTokenID = null;
    this.CurrencyName = null;
    this.CurrencyDesc = null;
    this.UCID = 0;
    this.WithdrawFee = 0.0f;
    this.WithdrawMin = 0;
    this.WithdrawMax = 0;
    this.BigIcon = null;
    this.SmallIcon = null;
  }
}

public struct CoinInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CoinInfoTable GetRootAsCoinInfoTable(ByteBuffer _bb) { return GetRootAsCoinInfoTable(_bb, new CoinInfoTable()); }
  public static CoinInfoTable GetRootAsCoinInfoTable(ByteBuffer _bb, CoinInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CoinInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CoinInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CoinInfo?)(new GDT.CoinInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CoinInfoTable> CreateCoinInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CoinInfoTable.AddRows(builder, RowsOffset);
    return CoinInfoTable.EndCoinInfoTable(builder);
  }

  public static void StartCoinInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CoinInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CoinInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CoinInfoTable> EndCoinInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CoinInfoTable>(o);
  }
  public CoinInfoTableT UnPack() {
    var _o = new CoinInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CoinInfoTableT _o) {
    _o.Rows = new List<GDT.CoinInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CoinInfoTable> Pack(FlatBufferBuilder builder, CoinInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.CoinInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CoinInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CoinInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCoinInfoTable(
      builder,
      _Rows);
  }
};

public class CoinInfoTableT
{
  public List<GDT.CoinInfoT> Rows { get; set; }

  public CoinInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Currency.xlsx
public struct PurchaseData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PurchaseData GetRootAsPurchaseData(ByteBuffer _bb) { return GetRootAsPurchaseData(_bb, new PurchaseData()); }
  public static PurchaseData GetRootAsPurchaseData(ByteBuffer _bb, PurchaseData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PurchaseData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int PurchasePriority { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public int CurrencySubTypeValue { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CurrencyTypeValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxPurchasCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PurchaseResultValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PurchaseData> CreatePurchaseData(FlatBufferBuilder builder,
      int Index = 0,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      int PurchasePriority = 0,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      int CurrencySubTypeValue = 0,
      int CurrencyTypeValue = 0,
      int MaxPurchasCount = 0,
      int PurchaseResultValue = 0) {
    builder.StartTable(8);
    PurchaseData.AddPurchaseResultValue(builder, PurchaseResultValue);
    PurchaseData.AddMaxPurchasCount(builder, MaxPurchasCount);
    PurchaseData.AddCurrencyTypeValue(builder, CurrencyTypeValue);
    PurchaseData.AddCurrencySubTypeValue(builder, CurrencySubTypeValue);
    PurchaseData.AddPurchasePriority(builder, PurchasePriority);
    PurchaseData.AddIndex(builder, Index);
    PurchaseData.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    PurchaseData.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    return PurchaseData.EndPurchaseData(builder);
  }

  public static void StartPurchaseData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(1, (byte)CurrencySubTypeID, 0); }
  public static void AddPurchasePriority(FlatBufferBuilder builder, int PurchasePriority) { builder.AddInt(2, PurchasePriority, 0); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(3, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeValue(FlatBufferBuilder builder, int CurrencySubTypeValue) { builder.AddInt(4, CurrencySubTypeValue, 0); }
  public static void AddCurrencyTypeValue(FlatBufferBuilder builder, int CurrencyTypeValue) { builder.AddInt(5, CurrencyTypeValue, 0); }
  public static void AddMaxPurchasCount(FlatBufferBuilder builder, int MaxPurchasCount) { builder.AddInt(6, MaxPurchasCount, 0); }
  public static void AddPurchaseResultValue(FlatBufferBuilder builder, int PurchaseResultValue) { builder.AddInt(7, PurchaseResultValue, 0); }
  public static Offset<GDT.PurchaseData> EndPurchaseData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PurchaseData>(o);
  }
  public PurchaseDataT UnPack() {
    var _o = new PurchaseDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PurchaseDataT _o) {
    _o.Index = this.Index;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.PurchasePriority = this.PurchasePriority;
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeValue = this.CurrencySubTypeValue;
    _o.CurrencyTypeValue = this.CurrencyTypeValue;
    _o.MaxPurchasCount = this.MaxPurchasCount;
    _o.PurchaseResultValue = this.PurchaseResultValue;
  }
  public static Offset<GDT.PurchaseData> Pack(FlatBufferBuilder builder, PurchaseDataT _o) {
    if (_o == null) return default(Offset<GDT.PurchaseData>);
    return CreatePurchaseData(
      builder,
      _o.Index,
      _o.CurrencySubTypeID,
      _o.PurchasePriority,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeValue,
      _o.CurrencyTypeValue,
      _o.MaxPurchasCount,
      _o.PurchaseResultValue);
  }
};

public class PurchaseDataT
{
  public int Index { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public int PurchasePriority { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public int CurrencySubTypeValue { get; set; }
  public int CurrencyTypeValue { get; set; }
  public int MaxPurchasCount { get; set; }
  public int PurchaseResultValue { get; set; }

  public PurchaseDataT() {
    this.Index = 0;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.PurchasePriority = 0;
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeValue = 0;
    this.CurrencyTypeValue = 0;
    this.MaxPurchasCount = 0;
    this.PurchaseResultValue = 0;
  }
}

public struct PurchaseDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PurchaseDataTable GetRootAsPurchaseDataTable(ByteBuffer _bb) { return GetRootAsPurchaseDataTable(_bb, new PurchaseDataTable()); }
  public static PurchaseDataTable GetRootAsPurchaseDataTable(ByteBuffer _bb, PurchaseDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PurchaseDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PurchaseData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PurchaseData?)(new GDT.PurchaseData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PurchaseDataTable> CreatePurchaseDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PurchaseDataTable.AddRows(builder, RowsOffset);
    return PurchaseDataTable.EndPurchaseDataTable(builder);
  }

  public static void StartPurchaseDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PurchaseData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PurchaseData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PurchaseDataTable> EndPurchaseDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PurchaseDataTable>(o);
  }
  public PurchaseDataTableT UnPack() {
    var _o = new PurchaseDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PurchaseDataTableT _o) {
    _o.Rows = new List<GDT.PurchaseDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PurchaseDataTable> Pack(FlatBufferBuilder builder, PurchaseDataTableT _o) {
    if (_o == null) return default(Offset<GDT.PurchaseDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PurchaseData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PurchaseData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePurchaseDataTable(
      builder,
      _Rows);
  }
};

public class PurchaseDataTableT
{
  public List<GDT.PurchaseDataT> Rows { get; set; }

  public PurchaseDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct CharacterCustomizingInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingInfo GetRootAsCharacterCustomizingInfo(ByteBuffer _bb) { return GetRootAsCharacterCustomizingInfo(_bb, new CharacterCustomizingInfo()); }
  public static CharacterCustomizingInfo GetRootAsCharacterCustomizingInfo(ByteBuffer _bb, CharacterCustomizingInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CharacterID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CharacterType CharacterType { get { int o = __p.__offset(6); return o != 0 ? (GDT.CharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterType.CT_None; } }
  public GDT.CustomizingMainType CustomizingMainTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.CustomizingMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingMainType.CMT_None; } }
  public int Step { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IconResourceName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconResourceNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconResourceNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconResourceNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.CharacterCustomizingInfo> CreateCharacterCustomizingInfo(FlatBufferBuilder builder,
      int CharacterID = 0,
      GDT.CharacterType CharacterType = GDT.CharacterType.CT_None,
      GDT.CustomizingMainType CustomizingMainTypeID = GDT.CustomizingMainType.CMT_None,
      int Step = 0,
      StringOffset IconResourceNameOffset = default(StringOffset)) {
    builder.StartTable(5);
    CharacterCustomizingInfo.AddIconResourceName(builder, IconResourceNameOffset);
    CharacterCustomizingInfo.AddStep(builder, Step);
    CharacterCustomizingInfo.AddCharacterID(builder, CharacterID);
    CharacterCustomizingInfo.AddCustomizingMainTypeID(builder, CustomizingMainTypeID);
    CharacterCustomizingInfo.AddCharacterType(builder, CharacterType);
    return CharacterCustomizingInfo.EndCharacterCustomizingInfo(builder);
  }

  public static void StartCharacterCustomizingInfo(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddCharacterID(FlatBufferBuilder builder, int CharacterID) { builder.AddInt(0, CharacterID, 0); }
  public static void AddCharacterType(FlatBufferBuilder builder, GDT.CharacterType CharacterType) { builder.AddByte(1, (byte)CharacterType, 0); }
  public static void AddCustomizingMainTypeID(FlatBufferBuilder builder, GDT.CustomizingMainType CustomizingMainTypeID) { builder.AddByte(2, (byte)CustomizingMainTypeID, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(3, Step, 0); }
  public static void AddIconResourceName(FlatBufferBuilder builder, StringOffset IconResourceNameOffset) { builder.AddOffset(4, IconResourceNameOffset.Value, 0); }
  public static Offset<GDT.CharacterCustomizingInfo> EndCharacterCustomizingInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingInfo>(o);
  }
  public CharacterCustomizingInfoT UnPack() {
    var _o = new CharacterCustomizingInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingInfoT _o) {
    _o.CharacterID = this.CharacterID;
    _o.CharacterType = this.CharacterType;
    _o.CustomizingMainTypeID = this.CustomizingMainTypeID;
    _o.Step = this.Step;
    _o.IconResourceName = this.IconResourceName;
  }
  public static Offset<GDT.CharacterCustomizingInfo> Pack(FlatBufferBuilder builder, CharacterCustomizingInfoT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingInfo>);
    var _IconResourceName = _o.IconResourceName == null ? default(StringOffset) : builder.CreateString(_o.IconResourceName);
    return CreateCharacterCustomizingInfo(
      builder,
      _o.CharacterID,
      _o.CharacterType,
      _o.CustomizingMainTypeID,
      _o.Step,
      _IconResourceName);
  }
};

public class CharacterCustomizingInfoT
{
  public int CharacterID { get; set; }
  public GDT.CharacterType CharacterType { get; set; }
  public GDT.CustomizingMainType CustomizingMainTypeID { get; set; }
  public int Step { get; set; }
  public string IconResourceName { get; set; }

  public CharacterCustomizingInfoT() {
    this.CharacterID = 0;
    this.CharacterType = GDT.CharacterType.CT_None;
    this.CustomizingMainTypeID = GDT.CustomizingMainType.CMT_None;
    this.Step = 0;
    this.IconResourceName = null;
  }
}

public struct CharacterCustomizingInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingInfoTable GetRootAsCharacterCustomizingInfoTable(ByteBuffer _bb) { return GetRootAsCharacterCustomizingInfoTable(_bb, new CharacterCustomizingInfoTable()); }
  public static CharacterCustomizingInfoTable GetRootAsCharacterCustomizingInfoTable(ByteBuffer _bb, CharacterCustomizingInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCustomizingInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCustomizingInfo?)(new GDT.CharacterCustomizingInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCustomizingInfoTable> CreateCharacterCustomizingInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCustomizingInfoTable.AddRows(builder, RowsOffset);
    return CharacterCustomizingInfoTable.EndCharacterCustomizingInfoTable(builder);
  }

  public static void StartCharacterCustomizingInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCustomizingInfoTable> EndCharacterCustomizingInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingInfoTable>(o);
  }
  public CharacterCustomizingInfoTableT UnPack() {
    var _o = new CharacterCustomizingInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingInfoTableT _o) {
    _o.Rows = new List<GDT.CharacterCustomizingInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCustomizingInfoTable> Pack(FlatBufferBuilder builder, CharacterCustomizingInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCustomizingInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCustomizingInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCustomizingInfoTable(
      builder,
      _Rows);
  }
};

public class CharacterCustomizingInfoTableT
{
  public List<GDT.CharacterCustomizingInfoT> Rows { get; set; }

  public CharacterCustomizingInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct CharacterCustomizingData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingData GetRootAsCharacterCustomizingData(ByteBuffer _bb) { return GetRootAsCharacterCustomizingData(_bb, new CharacterCustomizingData()); }
  public static CharacterCustomizingData GetRootAsCharacterCustomizingData(ByteBuffer _bb, CharacterCustomizingData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CustomizingMainTypeID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CustomizingSubType CustomizingSubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CustomizingSubType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingSubType.CST_None; } }
  public int Step { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CustomTabTitle { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomTabTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCustomTabTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCustomTabTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string IconResourceName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconResourceNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetIconResourceNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetIconResourceNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.CharacterCustomizingData> CreateCharacterCustomizingData(FlatBufferBuilder builder,
      int CustomizingMainTypeID = 0,
      GDT.CustomizingSubType CustomizingSubTypeID = GDT.CustomizingSubType.CST_None,
      int Step = 0,
      StringOffset CustomTabTitleOffset = default(StringOffset),
      StringOffset IconResourceNameOffset = default(StringOffset)) {
    builder.StartTable(5);
    CharacterCustomizingData.AddIconResourceName(builder, IconResourceNameOffset);
    CharacterCustomizingData.AddCustomTabTitle(builder, CustomTabTitleOffset);
    CharacterCustomizingData.AddStep(builder, Step);
    CharacterCustomizingData.AddCustomizingMainTypeID(builder, CustomizingMainTypeID);
    CharacterCustomizingData.AddCustomizingSubTypeID(builder, CustomizingSubTypeID);
    return CharacterCustomizingData.EndCharacterCustomizingData(builder);
  }

  public static void StartCharacterCustomizingData(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddCustomizingMainTypeID(FlatBufferBuilder builder, int CustomizingMainTypeID) { builder.AddInt(0, CustomizingMainTypeID, 0); }
  public static void AddCustomizingSubTypeID(FlatBufferBuilder builder, GDT.CustomizingSubType CustomizingSubTypeID) { builder.AddByte(1, (byte)CustomizingSubTypeID, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(2, Step, 0); }
  public static void AddCustomTabTitle(FlatBufferBuilder builder, StringOffset CustomTabTitleOffset) { builder.AddOffset(3, CustomTabTitleOffset.Value, 0); }
  public static void AddIconResourceName(FlatBufferBuilder builder, StringOffset IconResourceNameOffset) { builder.AddOffset(4, IconResourceNameOffset.Value, 0); }
  public static Offset<GDT.CharacterCustomizingData> EndCharacterCustomizingData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingData>(o);
  }
  public CharacterCustomizingDataT UnPack() {
    var _o = new CharacterCustomizingDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingDataT _o) {
    _o.CustomizingMainTypeID = this.CustomizingMainTypeID;
    _o.CustomizingSubTypeID = this.CustomizingSubTypeID;
    _o.Step = this.Step;
    _o.CustomTabTitle = this.CustomTabTitle;
    _o.IconResourceName = this.IconResourceName;
  }
  public static Offset<GDT.CharacterCustomizingData> Pack(FlatBufferBuilder builder, CharacterCustomizingDataT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingData>);
    var _CustomTabTitle = _o.CustomTabTitle == null ? default(StringOffset) : builder.CreateString(_o.CustomTabTitle);
    var _IconResourceName = _o.IconResourceName == null ? default(StringOffset) : builder.CreateString(_o.IconResourceName);
    return CreateCharacterCustomizingData(
      builder,
      _o.CustomizingMainTypeID,
      _o.CustomizingSubTypeID,
      _o.Step,
      _CustomTabTitle,
      _IconResourceName);
  }
};

public class CharacterCustomizingDataT
{
  public int CustomizingMainTypeID { get; set; }
  public GDT.CustomizingSubType CustomizingSubTypeID { get; set; }
  public int Step { get; set; }
  public string CustomTabTitle { get; set; }
  public string IconResourceName { get; set; }

  public CharacterCustomizingDataT() {
    this.CustomizingMainTypeID = 0;
    this.CustomizingSubTypeID = GDT.CustomizingSubType.CST_None;
    this.Step = 0;
    this.CustomTabTitle = null;
    this.IconResourceName = null;
  }
}

public struct CharacterCustomizingDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingDataTable GetRootAsCharacterCustomizingDataTable(ByteBuffer _bb) { return GetRootAsCharacterCustomizingDataTable(_bb, new CharacterCustomizingDataTable()); }
  public static CharacterCustomizingDataTable GetRootAsCharacterCustomizingDataTable(ByteBuffer _bb, CharacterCustomizingDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCustomizingData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCustomizingData?)(new GDT.CharacterCustomizingData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCustomizingDataTable> CreateCharacterCustomizingDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCustomizingDataTable.AddRows(builder, RowsOffset);
    return CharacterCustomizingDataTable.EndCharacterCustomizingDataTable(builder);
  }

  public static void StartCharacterCustomizingDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCustomizingDataTable> EndCharacterCustomizingDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingDataTable>(o);
  }
  public CharacterCustomizingDataTableT UnPack() {
    var _o = new CharacterCustomizingDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingDataTableT _o) {
    _o.Rows = new List<GDT.CharacterCustomizingDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCustomizingDataTable> Pack(FlatBufferBuilder builder, CharacterCustomizingDataTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCustomizingData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCustomizingData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCustomizingDataTable(
      builder,
      _Rows);
  }
};

public class CharacterCustomizingDataTableT
{
  public List<GDT.CharacterCustomizingDataT> Rows { get; set; }

  public CharacterCustomizingDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct CharacterCustomizingDetail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingDetail GetRootAsCharacterCustomizingDetail(ByteBuffer _bb) { return GetRootAsCharacterCustomizingDetail(_bb, new CharacterCustomizingDetail()); }
  public static CharacterCustomizingDetail GetRootAsCharacterCustomizingDetail(ByteBuffer _bb, CharacterCustomizingDetail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingDetail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public short CustomizingDetailIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public GDT.CharacterType CharacterType { get { int o = __p.__offset(6); return o != 0 ? (GDT.CharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterType.CT_None; } }
  public GDT.CustomizingSubType CustomizingSubTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.CustomizingSubType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingSubType.CST_None; } }
  public GDT.CustomizingType CustomizingTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CustomizingType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingType.CT_None; } }
  public GDT.CustomizingDetailType CustomizingDetailTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.CustomizingDetailType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingDetailType.CDT_None; } }
  public GDT.CustomizingDivideType CustomizingDivideTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.CustomizingDivideType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingDivideType.CDT_None; } }
  public int Step { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string CustomTitle { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomTitleBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetCustomTitleBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetCustomTitleArray() { return __p.__vector_as_array<byte>(18); }
  public GDT.PresetDetailType PresetDetailTypeID { get { int o = __p.__offset(20); return o != 0 ? (GDT.PresetDetailType)__p.bb.Get(o + __p.bb_pos) : GDT.PresetDetailType.PDT_None; } }
  public int PresetID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorR { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorG { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorB { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BasicValue { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinValue { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxValue { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string BlendShapesMinName { get { int o = __p.__offset(36); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlendShapesMinNameBytes() { return __p.__vector_as_span<byte>(36, 1); }
#else
  public ArraySegment<byte>? GetBlendShapesMinNameBytes() { return __p.__vector_as_arraysegment(36); }
#endif
  public byte[] GetBlendShapesMinNameArray() { return __p.__vector_as_array<byte>(36); }
  public string BlendShapesMaxName { get { int o = __p.__offset(38); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBlendShapesMaxNameBytes() { return __p.__vector_as_span<byte>(38, 1); }
#else
  public ArraySegment<byte>? GetBlendShapesMaxNameBytes() { return __p.__vector_as_arraysegment(38); }
#endif
  public byte[] GetBlendShapesMaxNameArray() { return __p.__vector_as_array<byte>(38); }

  public static Offset<GDT.CharacterCustomizingDetail> CreateCharacterCustomizingDetail(FlatBufferBuilder builder,
      short CustomizingDetailIndex = 0,
      GDT.CharacterType CharacterType = GDT.CharacterType.CT_None,
      GDT.CustomizingSubType CustomizingSubTypeID = GDT.CustomizingSubType.CST_None,
      GDT.CustomizingType CustomizingTypeID = GDT.CustomizingType.CT_None,
      GDT.CustomizingDetailType CustomizingDetailTypeID = GDT.CustomizingDetailType.CDT_None,
      GDT.CustomizingDivideType CustomizingDivideTypeID = GDT.CustomizingDivideType.CDT_None,
      int Step = 0,
      StringOffset CustomTitleOffset = default(StringOffset),
      GDT.PresetDetailType PresetDetailTypeID = GDT.PresetDetailType.PDT_None,
      int PresetID = 0,
      int ColorR = 0,
      int ColorG = 0,
      int ColorB = 0,
      int BasicValue = 0,
      int MinValue = 0,
      int MaxValue = 0,
      StringOffset BlendShapesMinNameOffset = default(StringOffset),
      StringOffset BlendShapesMaxNameOffset = default(StringOffset)) {
    builder.StartTable(18);
    CharacterCustomizingDetail.AddBlendShapesMaxName(builder, BlendShapesMaxNameOffset);
    CharacterCustomizingDetail.AddBlendShapesMinName(builder, BlendShapesMinNameOffset);
    CharacterCustomizingDetail.AddMaxValue(builder, MaxValue);
    CharacterCustomizingDetail.AddMinValue(builder, MinValue);
    CharacterCustomizingDetail.AddBasicValue(builder, BasicValue);
    CharacterCustomizingDetail.AddColorB(builder, ColorB);
    CharacterCustomizingDetail.AddColorG(builder, ColorG);
    CharacterCustomizingDetail.AddColorR(builder, ColorR);
    CharacterCustomizingDetail.AddPresetID(builder, PresetID);
    CharacterCustomizingDetail.AddCustomTitle(builder, CustomTitleOffset);
    CharacterCustomizingDetail.AddStep(builder, Step);
    CharacterCustomizingDetail.AddCustomizingDetailIndex(builder, CustomizingDetailIndex);
    CharacterCustomizingDetail.AddPresetDetailTypeID(builder, PresetDetailTypeID);
    CharacterCustomizingDetail.AddCustomizingDivideTypeID(builder, CustomizingDivideTypeID);
    CharacterCustomizingDetail.AddCustomizingDetailTypeID(builder, CustomizingDetailTypeID);
    CharacterCustomizingDetail.AddCustomizingTypeID(builder, CustomizingTypeID);
    CharacterCustomizingDetail.AddCustomizingSubTypeID(builder, CustomizingSubTypeID);
    CharacterCustomizingDetail.AddCharacterType(builder, CharacterType);
    return CharacterCustomizingDetail.EndCharacterCustomizingDetail(builder);
  }

  public static void StartCharacterCustomizingDetail(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddCustomizingDetailIndex(FlatBufferBuilder builder, short CustomizingDetailIndex) { builder.AddShort(0, CustomizingDetailIndex, 0); }
  public static void AddCharacterType(FlatBufferBuilder builder, GDT.CharacterType CharacterType) { builder.AddByte(1, (byte)CharacterType, 0); }
  public static void AddCustomizingSubTypeID(FlatBufferBuilder builder, GDT.CustomizingSubType CustomizingSubTypeID) { builder.AddByte(2, (byte)CustomizingSubTypeID, 0); }
  public static void AddCustomizingTypeID(FlatBufferBuilder builder, GDT.CustomizingType CustomizingTypeID) { builder.AddByte(3, (byte)CustomizingTypeID, 0); }
  public static void AddCustomizingDetailTypeID(FlatBufferBuilder builder, GDT.CustomizingDetailType CustomizingDetailTypeID) { builder.AddByte(4, (byte)CustomizingDetailTypeID, 0); }
  public static void AddCustomizingDivideTypeID(FlatBufferBuilder builder, GDT.CustomizingDivideType CustomizingDivideTypeID) { builder.AddByte(5, (byte)CustomizingDivideTypeID, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(6, Step, 0); }
  public static void AddCustomTitle(FlatBufferBuilder builder, StringOffset CustomTitleOffset) { builder.AddOffset(7, CustomTitleOffset.Value, 0); }
  public static void AddPresetDetailTypeID(FlatBufferBuilder builder, GDT.PresetDetailType PresetDetailTypeID) { builder.AddByte(8, (byte)PresetDetailTypeID, 0); }
  public static void AddPresetID(FlatBufferBuilder builder, int PresetID) { builder.AddInt(9, PresetID, 0); }
  public static void AddColorR(FlatBufferBuilder builder, int ColorR) { builder.AddInt(10, ColorR, 0); }
  public static void AddColorG(FlatBufferBuilder builder, int ColorG) { builder.AddInt(11, ColorG, 0); }
  public static void AddColorB(FlatBufferBuilder builder, int ColorB) { builder.AddInt(12, ColorB, 0); }
  public static void AddBasicValue(FlatBufferBuilder builder, int BasicValue) { builder.AddInt(13, BasicValue, 0); }
  public static void AddMinValue(FlatBufferBuilder builder, int MinValue) { builder.AddInt(14, MinValue, 0); }
  public static void AddMaxValue(FlatBufferBuilder builder, int MaxValue) { builder.AddInt(15, MaxValue, 0); }
  public static void AddBlendShapesMinName(FlatBufferBuilder builder, StringOffset BlendShapesMinNameOffset) { builder.AddOffset(16, BlendShapesMinNameOffset.Value, 0); }
  public static void AddBlendShapesMaxName(FlatBufferBuilder builder, StringOffset BlendShapesMaxNameOffset) { builder.AddOffset(17, BlendShapesMaxNameOffset.Value, 0); }
  public static Offset<GDT.CharacterCustomizingDetail> EndCharacterCustomizingDetail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingDetail>(o);
  }
  public CharacterCustomizingDetailT UnPack() {
    var _o = new CharacterCustomizingDetailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingDetailT _o) {
    _o.CustomizingDetailIndex = this.CustomizingDetailIndex;
    _o.CharacterType = this.CharacterType;
    _o.CustomizingSubTypeID = this.CustomizingSubTypeID;
    _o.CustomizingTypeID = this.CustomizingTypeID;
    _o.CustomizingDetailTypeID = this.CustomizingDetailTypeID;
    _o.CustomizingDivideTypeID = this.CustomizingDivideTypeID;
    _o.Step = this.Step;
    _o.CustomTitle = this.CustomTitle;
    _o.PresetDetailTypeID = this.PresetDetailTypeID;
    _o.PresetID = this.PresetID;
    _o.ColorR = this.ColorR;
    _o.ColorG = this.ColorG;
    _o.ColorB = this.ColorB;
    _o.BasicValue = this.BasicValue;
    _o.MinValue = this.MinValue;
    _o.MaxValue = this.MaxValue;
    _o.BlendShapesMinName = this.BlendShapesMinName;
    _o.BlendShapesMaxName = this.BlendShapesMaxName;
  }
  public static Offset<GDT.CharacterCustomizingDetail> Pack(FlatBufferBuilder builder, CharacterCustomizingDetailT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingDetail>);
    var _CustomTitle = _o.CustomTitle == null ? default(StringOffset) : builder.CreateString(_o.CustomTitle);
    var _BlendShapesMinName = _o.BlendShapesMinName == null ? default(StringOffset) : builder.CreateString(_o.BlendShapesMinName);
    var _BlendShapesMaxName = _o.BlendShapesMaxName == null ? default(StringOffset) : builder.CreateString(_o.BlendShapesMaxName);
    return CreateCharacterCustomizingDetail(
      builder,
      _o.CustomizingDetailIndex,
      _o.CharacterType,
      _o.CustomizingSubTypeID,
      _o.CustomizingTypeID,
      _o.CustomizingDetailTypeID,
      _o.CustomizingDivideTypeID,
      _o.Step,
      _CustomTitle,
      _o.PresetDetailTypeID,
      _o.PresetID,
      _o.ColorR,
      _o.ColorG,
      _o.ColorB,
      _o.BasicValue,
      _o.MinValue,
      _o.MaxValue,
      _BlendShapesMinName,
      _BlendShapesMaxName);
  }
};

public class CharacterCustomizingDetailT
{
  public short CustomizingDetailIndex { get; set; }
  public GDT.CharacterType CharacterType { get; set; }
  public GDT.CustomizingSubType CustomizingSubTypeID { get; set; }
  public GDT.CustomizingType CustomizingTypeID { get; set; }
  public GDT.CustomizingDetailType CustomizingDetailTypeID { get; set; }
  public GDT.CustomizingDivideType CustomizingDivideTypeID { get; set; }
  public int Step { get; set; }
  public string CustomTitle { get; set; }
  public GDT.PresetDetailType PresetDetailTypeID { get; set; }
  public int PresetID { get; set; }
  public int ColorR { get; set; }
  public int ColorG { get; set; }
  public int ColorB { get; set; }
  public int BasicValue { get; set; }
  public int MinValue { get; set; }
  public int MaxValue { get; set; }
  public string BlendShapesMinName { get; set; }
  public string BlendShapesMaxName { get; set; }

  public CharacterCustomizingDetailT() {
    this.CustomizingDetailIndex = 0;
    this.CharacterType = GDT.CharacterType.CT_None;
    this.CustomizingSubTypeID = GDT.CustomizingSubType.CST_None;
    this.CustomizingTypeID = GDT.CustomizingType.CT_None;
    this.CustomizingDetailTypeID = GDT.CustomizingDetailType.CDT_None;
    this.CustomizingDivideTypeID = GDT.CustomizingDivideType.CDT_None;
    this.Step = 0;
    this.CustomTitle = null;
    this.PresetDetailTypeID = GDT.PresetDetailType.PDT_None;
    this.PresetID = 0;
    this.ColorR = 0;
    this.ColorG = 0;
    this.ColorB = 0;
    this.BasicValue = 0;
    this.MinValue = 0;
    this.MaxValue = 0;
    this.BlendShapesMinName = null;
    this.BlendShapesMaxName = null;
  }
}

public struct CharacterCustomizingDetailTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingDetailTable GetRootAsCharacterCustomizingDetailTable(ByteBuffer _bb) { return GetRootAsCharacterCustomizingDetailTable(_bb, new CharacterCustomizingDetailTable()); }
  public static CharacterCustomizingDetailTable GetRootAsCharacterCustomizingDetailTable(ByteBuffer _bb, CharacterCustomizingDetailTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingDetailTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCustomizingDetail? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCustomizingDetail?)(new GDT.CharacterCustomizingDetail()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCustomizingDetailTable> CreateCharacterCustomizingDetailTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCustomizingDetailTable.AddRows(builder, RowsOffset);
    return CharacterCustomizingDetailTable.EndCharacterCustomizingDetailTable(builder);
  }

  public static void StartCharacterCustomizingDetailTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingDetail>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingDetail>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCustomizingDetailTable> EndCharacterCustomizingDetailTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingDetailTable>(o);
  }
  public CharacterCustomizingDetailTableT UnPack() {
    var _o = new CharacterCustomizingDetailTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingDetailTableT _o) {
    _o.Rows = new List<GDT.CharacterCustomizingDetailT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCustomizingDetailTable> Pack(FlatBufferBuilder builder, CharacterCustomizingDetailTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingDetailTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCustomizingDetail>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCustomizingDetail.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCustomizingDetailTable(
      builder,
      _Rows);
  }
};

public class CharacterCustomizingDetailTableT
{
  public List<GDT.CharacterCustomizingDetailT> Rows { get; set; }

  public CharacterCustomizingDetailTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct Preset : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Preset GetRootAsPreset(ByteBuffer _bb) { return GetRootAsPreset(_bb, new Preset()); }
  public static Preset GetRootAsPreset(ByteBuffer _bb, Preset obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Preset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PresetIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PresetGroup { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Step { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.PresetType PresetTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.PresetType)__p.bb.Get(o + __p.bb_pos) : GDT.PresetType.PT_None; } }
  public int ColorR { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorG { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ColorB { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PresetIconName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPresetIconNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetPresetIconNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetPresetIconNameArray() { return __p.__vector_as_array<byte>(18); }
  public string PresetResourceName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPresetResourceNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPresetResourceNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPresetResourceNameArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<GDT.Preset> CreatePreset(FlatBufferBuilder builder,
      int PresetIndex = 0,
      int PresetGroup = 0,
      int Step = 0,
      GDT.PresetType PresetTypeID = GDT.PresetType.PT_None,
      int ColorR = 0,
      int ColorG = 0,
      int ColorB = 0,
      StringOffset PresetIconNameOffset = default(StringOffset),
      StringOffset PresetResourceNameOffset = default(StringOffset)) {
    builder.StartTable(9);
    Preset.AddPresetResourceName(builder, PresetResourceNameOffset);
    Preset.AddPresetIconName(builder, PresetIconNameOffset);
    Preset.AddColorB(builder, ColorB);
    Preset.AddColorG(builder, ColorG);
    Preset.AddColorR(builder, ColorR);
    Preset.AddStep(builder, Step);
    Preset.AddPresetGroup(builder, PresetGroup);
    Preset.AddPresetIndex(builder, PresetIndex);
    Preset.AddPresetTypeID(builder, PresetTypeID);
    return Preset.EndPreset(builder);
  }

  public static void StartPreset(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddPresetIndex(FlatBufferBuilder builder, int PresetIndex) { builder.AddInt(0, PresetIndex, 0); }
  public static void AddPresetGroup(FlatBufferBuilder builder, int PresetGroup) { builder.AddInt(1, PresetGroup, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(2, Step, 0); }
  public static void AddPresetTypeID(FlatBufferBuilder builder, GDT.PresetType PresetTypeID) { builder.AddByte(3, (byte)PresetTypeID, 0); }
  public static void AddColorR(FlatBufferBuilder builder, int ColorR) { builder.AddInt(4, ColorR, 0); }
  public static void AddColorG(FlatBufferBuilder builder, int ColorG) { builder.AddInt(5, ColorG, 0); }
  public static void AddColorB(FlatBufferBuilder builder, int ColorB) { builder.AddInt(6, ColorB, 0); }
  public static void AddPresetIconName(FlatBufferBuilder builder, StringOffset PresetIconNameOffset) { builder.AddOffset(7, PresetIconNameOffset.Value, 0); }
  public static void AddPresetResourceName(FlatBufferBuilder builder, StringOffset PresetResourceNameOffset) { builder.AddOffset(8, PresetResourceNameOffset.Value, 0); }
  public static Offset<GDT.Preset> EndPreset(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Preset>(o);
  }
  public PresetT UnPack() {
    var _o = new PresetT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PresetT _o) {
    _o.PresetIndex = this.PresetIndex;
    _o.PresetGroup = this.PresetGroup;
    _o.Step = this.Step;
    _o.PresetTypeID = this.PresetTypeID;
    _o.ColorR = this.ColorR;
    _o.ColorG = this.ColorG;
    _o.ColorB = this.ColorB;
    _o.PresetIconName = this.PresetIconName;
    _o.PresetResourceName = this.PresetResourceName;
  }
  public static Offset<GDT.Preset> Pack(FlatBufferBuilder builder, PresetT _o) {
    if (_o == null) return default(Offset<GDT.Preset>);
    var _PresetIconName = _o.PresetIconName == null ? default(StringOffset) : builder.CreateString(_o.PresetIconName);
    var _PresetResourceName = _o.PresetResourceName == null ? default(StringOffset) : builder.CreateString(_o.PresetResourceName);
    return CreatePreset(
      builder,
      _o.PresetIndex,
      _o.PresetGroup,
      _o.Step,
      _o.PresetTypeID,
      _o.ColorR,
      _o.ColorG,
      _o.ColorB,
      _PresetIconName,
      _PresetResourceName);
  }
};

public class PresetT
{
  public int PresetIndex { get; set; }
  public int PresetGroup { get; set; }
  public int Step { get; set; }
  public GDT.PresetType PresetTypeID { get; set; }
  public int ColorR { get; set; }
  public int ColorG { get; set; }
  public int ColorB { get; set; }
  public string PresetIconName { get; set; }
  public string PresetResourceName { get; set; }

  public PresetT() {
    this.PresetIndex = 0;
    this.PresetGroup = 0;
    this.Step = 0;
    this.PresetTypeID = GDT.PresetType.PT_None;
    this.ColorR = 0;
    this.ColorG = 0;
    this.ColorB = 0;
    this.PresetIconName = null;
    this.PresetResourceName = null;
  }
}

public struct PresetTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PresetTable GetRootAsPresetTable(ByteBuffer _bb) { return GetRootAsPresetTable(_bb, new PresetTable()); }
  public static PresetTable GetRootAsPresetTable(ByteBuffer _bb, PresetTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PresetTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Preset? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Preset?)(new GDT.Preset()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PresetTable> CreatePresetTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PresetTable.AddRows(builder, RowsOffset);
    return PresetTable.EndPresetTable(builder);
  }

  public static void StartPresetTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Preset>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Preset>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PresetTable> EndPresetTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PresetTable>(o);
  }
  public PresetTableT UnPack() {
    var _o = new PresetTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PresetTableT _o) {
    _o.Rows = new List<GDT.PresetT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PresetTable> Pack(FlatBufferBuilder builder, PresetTableT _o) {
    if (_o == null) return default(Offset<GDT.PresetTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Preset>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Preset.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePresetTable(
      builder,
      _Rows);
  }
};

public class PresetTableT
{
  public List<GDT.PresetT> Rows { get; set; }

  public PresetTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct CharacterCustomizingBasic : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingBasic GetRootAsCharacterCustomizingBasic(ByteBuffer _bb) { return GetRootAsCharacterCustomizingBasic(_bb, new CharacterCustomizingBasic()); }
  public static CharacterCustomizingBasic GetRootAsCharacterCustomizingBasic(ByteBuffer _bb, CharacterCustomizingBasic obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingBasic __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterType CharacterType { get { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterType.CT_None; } }
  public GDT.CustomizingMainType CustomizingMainTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CustomizingMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingMainType.CMT_None; } }
  public GDT.CustomizingSubType CustomizingSubTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.CustomizingSubType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingSubType.CST_None; } }
  public string CustomizingBasicPrefab { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomizingBasicPrefabBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCustomizingBasicPrefabBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCustomizingBasicPrefabArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<GDT.CharacterCustomizingBasic> CreateCharacterCustomizingBasic(FlatBufferBuilder builder,
      GDT.CharacterType CharacterType = GDT.CharacterType.CT_None,
      GDT.CustomizingMainType CustomizingMainTypeID = GDT.CustomizingMainType.CMT_None,
      GDT.CustomizingSubType CustomizingSubTypeID = GDT.CustomizingSubType.CST_None,
      StringOffset CustomizingBasicPrefabOffset = default(StringOffset)) {
    builder.StartTable(4);
    CharacterCustomizingBasic.AddCustomizingBasicPrefab(builder, CustomizingBasicPrefabOffset);
    CharacterCustomizingBasic.AddCustomizingSubTypeID(builder, CustomizingSubTypeID);
    CharacterCustomizingBasic.AddCustomizingMainTypeID(builder, CustomizingMainTypeID);
    CharacterCustomizingBasic.AddCharacterType(builder, CharacterType);
    return CharacterCustomizingBasic.EndCharacterCustomizingBasic(builder);
  }

  public static void StartCharacterCustomizingBasic(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCharacterType(FlatBufferBuilder builder, GDT.CharacterType CharacterType) { builder.AddByte(0, (byte)CharacterType, 0); }
  public static void AddCustomizingMainTypeID(FlatBufferBuilder builder, GDT.CustomizingMainType CustomizingMainTypeID) { builder.AddByte(1, (byte)CustomizingMainTypeID, 0); }
  public static void AddCustomizingSubTypeID(FlatBufferBuilder builder, GDT.CustomizingSubType CustomizingSubTypeID) { builder.AddByte(2, (byte)CustomizingSubTypeID, 0); }
  public static void AddCustomizingBasicPrefab(FlatBufferBuilder builder, StringOffset CustomizingBasicPrefabOffset) { builder.AddOffset(3, CustomizingBasicPrefabOffset.Value, 0); }
  public static Offset<GDT.CharacterCustomizingBasic> EndCharacterCustomizingBasic(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingBasic>(o);
  }
  public CharacterCustomizingBasicT UnPack() {
    var _o = new CharacterCustomizingBasicT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingBasicT _o) {
    _o.CharacterType = this.CharacterType;
    _o.CustomizingMainTypeID = this.CustomizingMainTypeID;
    _o.CustomizingSubTypeID = this.CustomizingSubTypeID;
    _o.CustomizingBasicPrefab = this.CustomizingBasicPrefab;
  }
  public static Offset<GDT.CharacterCustomizingBasic> Pack(FlatBufferBuilder builder, CharacterCustomizingBasicT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingBasic>);
    var _CustomizingBasicPrefab = _o.CustomizingBasicPrefab == null ? default(StringOffset) : builder.CreateString(_o.CustomizingBasicPrefab);
    return CreateCharacterCustomizingBasic(
      builder,
      _o.CharacterType,
      _o.CustomizingMainTypeID,
      _o.CustomizingSubTypeID,
      _CustomizingBasicPrefab);
  }
};

public class CharacterCustomizingBasicT
{
  public GDT.CharacterType CharacterType { get; set; }
  public GDT.CustomizingMainType CustomizingMainTypeID { get; set; }
  public GDT.CustomizingSubType CustomizingSubTypeID { get; set; }
  public string CustomizingBasicPrefab { get; set; }

  public CharacterCustomizingBasicT() {
    this.CharacterType = GDT.CharacterType.CT_None;
    this.CustomizingMainTypeID = GDT.CustomizingMainType.CMT_None;
    this.CustomizingSubTypeID = GDT.CustomizingSubType.CST_None;
    this.CustomizingBasicPrefab = null;
  }
}

public struct CharacterCustomizingBasicTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingBasicTable GetRootAsCharacterCustomizingBasicTable(ByteBuffer _bb) { return GetRootAsCharacterCustomizingBasicTable(_bb, new CharacterCustomizingBasicTable()); }
  public static CharacterCustomizingBasicTable GetRootAsCharacterCustomizingBasicTable(ByteBuffer _bb, CharacterCustomizingBasicTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingBasicTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCustomizingBasic? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCustomizingBasic?)(new GDT.CharacterCustomizingBasic()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCustomizingBasicTable> CreateCharacterCustomizingBasicTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCustomizingBasicTable.AddRows(builder, RowsOffset);
    return CharacterCustomizingBasicTable.EndCharacterCustomizingBasicTable(builder);
  }

  public static void StartCharacterCustomizingBasicTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingBasic>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingBasic>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCustomizingBasicTable> EndCharacterCustomizingBasicTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingBasicTable>(o);
  }
  public CharacterCustomizingBasicTableT UnPack() {
    var _o = new CharacterCustomizingBasicTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingBasicTableT _o) {
    _o.Rows = new List<GDT.CharacterCustomizingBasicT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCustomizingBasicTable> Pack(FlatBufferBuilder builder, CharacterCustomizingBasicTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingBasicTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCustomizingBasic>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCustomizingBasic.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCustomizingBasicTable(
      builder,
      _Rows);
  }
};

public class CharacterCustomizingBasicTableT
{
  public List<GDT.CharacterCustomizingBasicT> Rows { get; set; }

  public CharacterCustomizingBasicTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct CharacterCustomizingTypeIcon : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingTypeIcon GetRootAsCharacterCustomizingTypeIcon(ByteBuffer _bb) { return GetRootAsCharacterCustomizingTypeIcon(_bb, new CharacterCustomizingTypeIcon()); }
  public static CharacterCustomizingTypeIcon GetRootAsCharacterCustomizingTypeIcon(ByteBuffer _bb, CharacterCustomizingTypeIcon obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingTypeIcon __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CustomizingType CustomizingTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CustomizingType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingType.CT_None; } }
  public string IconResourceName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconResourceNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetIconResourceNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetIconResourceNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<GDT.CharacterCustomizingTypeIcon> CreateCharacterCustomizingTypeIcon(FlatBufferBuilder builder,
      GDT.CustomizingType CustomizingTypeID = GDT.CustomizingType.CT_None,
      StringOffset IconResourceNameOffset = default(StringOffset)) {
    builder.StartTable(2);
    CharacterCustomizingTypeIcon.AddIconResourceName(builder, IconResourceNameOffset);
    CharacterCustomizingTypeIcon.AddCustomizingTypeID(builder, CustomizingTypeID);
    return CharacterCustomizingTypeIcon.EndCharacterCustomizingTypeIcon(builder);
  }

  public static void StartCharacterCustomizingTypeIcon(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCustomizingTypeID(FlatBufferBuilder builder, GDT.CustomizingType CustomizingTypeID) { builder.AddByte(0, (byte)CustomizingTypeID, 0); }
  public static void AddIconResourceName(FlatBufferBuilder builder, StringOffset IconResourceNameOffset) { builder.AddOffset(1, IconResourceNameOffset.Value, 0); }
  public static Offset<GDT.CharacterCustomizingTypeIcon> EndCharacterCustomizingTypeIcon(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingTypeIcon>(o);
  }
  public CharacterCustomizingTypeIconT UnPack() {
    var _o = new CharacterCustomizingTypeIconT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingTypeIconT _o) {
    _o.CustomizingTypeID = this.CustomizingTypeID;
    _o.IconResourceName = this.IconResourceName;
  }
  public static Offset<GDT.CharacterCustomizingTypeIcon> Pack(FlatBufferBuilder builder, CharacterCustomizingTypeIconT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingTypeIcon>);
    var _IconResourceName = _o.IconResourceName == null ? default(StringOffset) : builder.CreateString(_o.IconResourceName);
    return CreateCharacterCustomizingTypeIcon(
      builder,
      _o.CustomizingTypeID,
      _IconResourceName);
  }
};

public class CharacterCustomizingTypeIconT
{
  public GDT.CustomizingType CustomizingTypeID { get; set; }
  public string IconResourceName { get; set; }

  public CharacterCustomizingTypeIconT() {
    this.CustomizingTypeID = GDT.CustomizingType.CT_None;
    this.IconResourceName = null;
  }
}

public struct CharacterCustomizingTypeIconTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingTypeIconTable GetRootAsCharacterCustomizingTypeIconTable(ByteBuffer _bb) { return GetRootAsCharacterCustomizingTypeIconTable(_bb, new CharacterCustomizingTypeIconTable()); }
  public static CharacterCustomizingTypeIconTable GetRootAsCharacterCustomizingTypeIconTable(ByteBuffer _bb, CharacterCustomizingTypeIconTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingTypeIconTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCustomizingTypeIcon? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCustomizingTypeIcon?)(new GDT.CharacterCustomizingTypeIcon()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCustomizingTypeIconTable> CreateCharacterCustomizingTypeIconTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCustomizingTypeIconTable.AddRows(builder, RowsOffset);
    return CharacterCustomizingTypeIconTable.EndCharacterCustomizingTypeIconTable(builder);
  }

  public static void StartCharacterCustomizingTypeIconTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingTypeIcon>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingTypeIcon>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCustomizingTypeIconTable> EndCharacterCustomizingTypeIconTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingTypeIconTable>(o);
  }
  public CharacterCustomizingTypeIconTableT UnPack() {
    var _o = new CharacterCustomizingTypeIconTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingTypeIconTableT _o) {
    _o.Rows = new List<GDT.CharacterCustomizingTypeIconT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCustomizingTypeIconTable> Pack(FlatBufferBuilder builder, CharacterCustomizingTypeIconTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingTypeIconTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCustomizingTypeIcon>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCustomizingTypeIcon.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCustomizingTypeIconTable(
      builder,
      _Rows);
  }
};

public class CharacterCustomizingTypeIconTableT
{
  public List<GDT.CharacterCustomizingTypeIconT> Rows { get; set; }

  public CharacterCustomizingTypeIconTableT() {
    this.Rows = null;
  }
}

/// Defined by Customizing.xlsx
public struct CharacterCustomizingDivide : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingDivide GetRootAsCharacterCustomizingDivide(ByteBuffer _bb) { return GetRootAsCharacterCustomizingDivide(_bb, new CharacterCustomizingDivide()); }
  public static CharacterCustomizingDivide GetRootAsCharacterCustomizingDivide(ByteBuffer _bb, CharacterCustomizingDivide obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingDivide __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CustomizingDivideType CustomizingDivideTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CustomizingDivideType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingDivideType.CDT_None; } }
  public int Step { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DivideTitle { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDivideTitleBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDivideTitleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDivideTitleArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GDT.CharacterCustomizingDivide> CreateCharacterCustomizingDivide(FlatBufferBuilder builder,
      GDT.CustomizingDivideType CustomizingDivideTypeID = GDT.CustomizingDivideType.CDT_None,
      int Step = 0,
      StringOffset DivideTitleOffset = default(StringOffset)) {
    builder.StartTable(3);
    CharacterCustomizingDivide.AddDivideTitle(builder, DivideTitleOffset);
    CharacterCustomizingDivide.AddStep(builder, Step);
    CharacterCustomizingDivide.AddCustomizingDivideTypeID(builder, CustomizingDivideTypeID);
    return CharacterCustomizingDivide.EndCharacterCustomizingDivide(builder);
  }

  public static void StartCharacterCustomizingDivide(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCustomizingDivideTypeID(FlatBufferBuilder builder, GDT.CustomizingDivideType CustomizingDivideTypeID) { builder.AddByte(0, (byte)CustomizingDivideTypeID, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(1, Step, 0); }
  public static void AddDivideTitle(FlatBufferBuilder builder, StringOffset DivideTitleOffset) { builder.AddOffset(2, DivideTitleOffset.Value, 0); }
  public static Offset<GDT.CharacterCustomizingDivide> EndCharacterCustomizingDivide(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingDivide>(o);
  }
  public CharacterCustomizingDivideT UnPack() {
    var _o = new CharacterCustomizingDivideT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingDivideT _o) {
    _o.CustomizingDivideTypeID = this.CustomizingDivideTypeID;
    _o.Step = this.Step;
    _o.DivideTitle = this.DivideTitle;
  }
  public static Offset<GDT.CharacterCustomizingDivide> Pack(FlatBufferBuilder builder, CharacterCustomizingDivideT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingDivide>);
    var _DivideTitle = _o.DivideTitle == null ? default(StringOffset) : builder.CreateString(_o.DivideTitle);
    return CreateCharacterCustomizingDivide(
      builder,
      _o.CustomizingDivideTypeID,
      _o.Step,
      _DivideTitle);
  }
};

public class CharacterCustomizingDivideT
{
  public GDT.CustomizingDivideType CustomizingDivideTypeID { get; set; }
  public int Step { get; set; }
  public string DivideTitle { get; set; }

  public CharacterCustomizingDivideT() {
    this.CustomizingDivideTypeID = GDT.CustomizingDivideType.CDT_None;
    this.Step = 0;
    this.DivideTitle = null;
  }
}

public struct CharacterCustomizingDivideTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CharacterCustomizingDivideTable GetRootAsCharacterCustomizingDivideTable(ByteBuffer _bb) { return GetRootAsCharacterCustomizingDivideTable(_bb, new CharacterCustomizingDivideTable()); }
  public static CharacterCustomizingDivideTable GetRootAsCharacterCustomizingDivideTable(ByteBuffer _bb, CharacterCustomizingDivideTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CharacterCustomizingDivideTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CharacterCustomizingDivide? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.CharacterCustomizingDivide?)(new GDT.CharacterCustomizingDivide()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.CharacterCustomizingDivideTable> CreateCharacterCustomizingDivideTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    CharacterCustomizingDivideTable.AddRows(builder, RowsOffset);
    return CharacterCustomizingDivideTable.EndCharacterCustomizingDivideTable(builder);
  }

  public static void StartCharacterCustomizingDivideTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingDivide>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.CharacterCustomizingDivide>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.CharacterCustomizingDivideTable> EndCharacterCustomizingDivideTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.CharacterCustomizingDivideTable>(o);
  }
  public CharacterCustomizingDivideTableT UnPack() {
    var _o = new CharacterCustomizingDivideTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(CharacterCustomizingDivideTableT _o) {
    _o.Rows = new List<GDT.CharacterCustomizingDivideT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.CharacterCustomizingDivideTable> Pack(FlatBufferBuilder builder, CharacterCustomizingDivideTableT _o) {
    if (_o == null) return default(Offset<GDT.CharacterCustomizingDivideTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.CharacterCustomizingDivide>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.CharacterCustomizingDivide.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateCharacterCustomizingDivideTable(
      builder,
      _Rows);
  }
};

public class CharacterCustomizingDivideTableT
{
  public List<GDT.CharacterCustomizingDivideT> Rows { get; set; }

  public CharacterCustomizingDivideTableT() {
    this.Rows = null;
  }
}

/// Defined by Effect.xlsx
public struct Effect : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Effect GetRootAsEffect(ByteBuffer _bb) { return GetRootAsEffect(_bb, new Effect()); }
  public static Effect GetRootAsEffect(ByteBuffer _bb, Effect obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Effect __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EffectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EffectResourceNmae { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectResourceNmaeBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEffectResourceNmaeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEffectResourceNmaeArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<GDT.Effect> CreateEffect(FlatBufferBuilder builder,
      int EffectID = 0,
      StringOffset EffectResourceNmaeOffset = default(StringOffset)) {
    builder.StartTable(2);
    Effect.AddEffectResourceNmae(builder, EffectResourceNmaeOffset);
    Effect.AddEffectID(builder, EffectID);
    return Effect.EndEffect(builder);
  }

  public static void StartEffect(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(0, EffectID, 0); }
  public static void AddEffectResourceNmae(FlatBufferBuilder builder, StringOffset EffectResourceNmaeOffset) { builder.AddOffset(1, EffectResourceNmaeOffset.Value, 0); }
  public static Offset<GDT.Effect> EndEffect(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Effect>(o);
  }
  public EffectT UnPack() {
    var _o = new EffectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectT _o) {
    _o.EffectID = this.EffectID;
    _o.EffectResourceNmae = this.EffectResourceNmae;
  }
  public static Offset<GDT.Effect> Pack(FlatBufferBuilder builder, EffectT _o) {
    if (_o == null) return default(Offset<GDT.Effect>);
    var _EffectResourceNmae = _o.EffectResourceNmae == null ? default(StringOffset) : builder.CreateString(_o.EffectResourceNmae);
    return CreateEffect(
      builder,
      _o.EffectID,
      _EffectResourceNmae);
  }
};

public class EffectT
{
  public int EffectID { get; set; }
  public string EffectResourceNmae { get; set; }

  public EffectT() {
    this.EffectID = 0;
    this.EffectResourceNmae = null;
  }
}

public struct EffectTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EffectTable GetRootAsEffectTable(ByteBuffer _bb) { return GetRootAsEffectTable(_bb, new EffectTable()); }
  public static EffectTable GetRootAsEffectTable(ByteBuffer _bb, EffectTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EffectTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Effect? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Effect?)(new GDT.Effect()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EffectTable> CreateEffectTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EffectTable.AddRows(builder, RowsOffset);
    return EffectTable.EndEffectTable(builder);
  }

  public static void StartEffectTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Effect>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Effect>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EffectTable> EndEffectTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EffectTable>(o);
  }
  public EffectTableT UnPack() {
    var _o = new EffectTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EffectTableT _o) {
    _o.Rows = new List<GDT.EffectT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EffectTable> Pack(FlatBufferBuilder builder, EffectTableT _o) {
    if (_o == null) return default(Offset<GDT.EffectTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Effect>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Effect.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEffectTable(
      builder,
      _Rows);
  }
};

public class EffectTableT
{
  public List<GDT.EffectT> Rows { get; set; }

  public EffectTableT() {
    this.Rows = null;
  }
}

/// Defined by Emotion.xlsx
public struct EmotionInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EmotionInfo GetRootAsEmotionInfo(ByteBuffer _bb) { return GetRootAsEmotionInfo(_bb, new EmotionInfo()); }
  public static EmotionInfo GetRootAsEmotionInfo(ByteBuffer _bb, EmotionInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmotionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EmotionType EmotionTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.EmotionType)__p.bb.Get(o + __p.bb_pos) : GDT.EmotionType.ET_None; } }
  public GDT.RewardGetType RewardGetTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.RewardGetType)__p.bb.Get(o + __p.bb_pos) : GDT.RewardGetType.RGT_None; } }
  public GDT.PeriodType PeriodTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.PeriodType)__p.bb.Get(o + __p.bb_pos) : GDT.PeriodType.PT_None; } }
  public int Sort { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Step { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EmotionName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmotionNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetEmotionNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetEmotionNameArray() { return __p.__vector_as_array<byte>(16); }
  public string IconResourceName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconResourceNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetIconResourceNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetIconResourceNameArray() { return __p.__vector_as_array<byte>(18); }
  public GDT.ActionAnimationType ActionAnimationTypeID { get { int o = __p.__offset(20); return o != 0 ? (GDT.ActionAnimationType)__p.bb.Get(o + __p.bb_pos) : GDT.ActionAnimationType.AAT_None; } }
  public int RemainingTime { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.datetime? StartTime { get { int o = __p.__offset(24); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? EndTime { get { int o = __p.__offset(26); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartEmotionInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddEmotionTypeID(FlatBufferBuilder builder, GDT.EmotionType EmotionTypeID) { builder.AddByte(1, (byte)EmotionTypeID, 0); }
  public static void AddRewardGetTypeID(FlatBufferBuilder builder, GDT.RewardGetType RewardGetTypeID) { builder.AddByte(2, (byte)RewardGetTypeID, 0); }
  public static void AddPeriodTypeID(FlatBufferBuilder builder, GDT.PeriodType PeriodTypeID) { builder.AddByte(3, (byte)PeriodTypeID, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(4, Sort, 0); }
  public static void AddStep(FlatBufferBuilder builder, int Step) { builder.AddInt(5, Step, 0); }
  public static void AddEmotionName(FlatBufferBuilder builder, StringOffset EmotionNameOffset) { builder.AddOffset(6, EmotionNameOffset.Value, 0); }
  public static void AddIconResourceName(FlatBufferBuilder builder, StringOffset IconResourceNameOffset) { builder.AddOffset(7, IconResourceNameOffset.Value, 0); }
  public static void AddActionAnimationTypeID(FlatBufferBuilder builder, GDT.ActionAnimationType ActionAnimationTypeID) { builder.AddByte(8, (byte)ActionAnimationTypeID, 0); }
  public static void AddRemainingTime(FlatBufferBuilder builder, int RemainingTime) { builder.AddInt(9, RemainingTime, 0); }
  public static void AddStartTime(FlatBufferBuilder builder, Offset<GDT.datetime> StartTimeOffset) { builder.AddStruct(10, StartTimeOffset.Value, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, Offset<GDT.datetime> EndTimeOffset) { builder.AddStruct(11, EndTimeOffset.Value, 0); }
  public static Offset<GDT.EmotionInfo> EndEmotionInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EmotionInfo>(o);
  }
  public EmotionInfoT UnPack() {
    var _o = new EmotionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmotionInfoT _o) {
    _o.Index = this.Index;
    _o.EmotionTypeID = this.EmotionTypeID;
    _o.RewardGetTypeID = this.RewardGetTypeID;
    _o.PeriodTypeID = this.PeriodTypeID;
    _o.Sort = this.Sort;
    _o.Step = this.Step;
    _o.EmotionName = this.EmotionName;
    _o.IconResourceName = this.IconResourceName;
    _o.ActionAnimationTypeID = this.ActionAnimationTypeID;
    _o.RemainingTime = this.RemainingTime;
    _o.StartTime = this.StartTime.HasValue ? this.StartTime.Value.UnPack() : null;
    _o.EndTime = this.EndTime.HasValue ? this.EndTime.Value.UnPack() : null;
  }
  public static Offset<GDT.EmotionInfo> Pack(FlatBufferBuilder builder, EmotionInfoT _o) {
    if (_o == null) return default(Offset<GDT.EmotionInfo>);
    var _EmotionName = _o.EmotionName == null ? default(StringOffset) : builder.CreateString(_o.EmotionName);
    var _IconResourceName = _o.IconResourceName == null ? default(StringOffset) : builder.CreateString(_o.IconResourceName);
    StartEmotionInfo(builder);
    AddIndex(builder, _o.Index);
    AddEmotionTypeID(builder, _o.EmotionTypeID);
    AddRewardGetTypeID(builder, _o.RewardGetTypeID);
    AddPeriodTypeID(builder, _o.PeriodTypeID);
    AddSort(builder, _o.Sort);
    AddStep(builder, _o.Step);
    AddEmotionName(builder, _EmotionName);
    AddIconResourceName(builder, _IconResourceName);
    AddActionAnimationTypeID(builder, _o.ActionAnimationTypeID);
    AddRemainingTime(builder, _o.RemainingTime);
    AddStartTime(builder, GDT.datetime.Pack(builder, _o.StartTime));
    AddEndTime(builder, GDT.datetime.Pack(builder, _o.EndTime));
    return EndEmotionInfo(builder);
  }
};

public class EmotionInfoT
{
  public int Index { get; set; }
  public GDT.EmotionType EmotionTypeID { get; set; }
  public GDT.RewardGetType RewardGetTypeID { get; set; }
  public GDT.PeriodType PeriodTypeID { get; set; }
  public int Sort { get; set; }
  public int Step { get; set; }
  public string EmotionName { get; set; }
  public string IconResourceName { get; set; }
  public GDT.ActionAnimationType ActionAnimationTypeID { get; set; }
  public int RemainingTime { get; set; }
  public GDT.datetimeT StartTime { get; set; }
  public GDT.datetimeT EndTime { get; set; }

  public EmotionInfoT() {
    this.Index = 0;
    this.EmotionTypeID = GDT.EmotionType.ET_None;
    this.RewardGetTypeID = GDT.RewardGetType.RGT_None;
    this.PeriodTypeID = GDT.PeriodType.PT_None;
    this.Sort = 0;
    this.Step = 0;
    this.EmotionName = null;
    this.IconResourceName = null;
    this.ActionAnimationTypeID = GDT.ActionAnimationType.AAT_None;
    this.RemainingTime = 0;
    this.StartTime = new GDT.datetimeT();
    this.EndTime = new GDT.datetimeT();
  }
}

public struct EmotionInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EmotionInfoTable GetRootAsEmotionInfoTable(ByteBuffer _bb) { return GetRootAsEmotionInfoTable(_bb, new EmotionInfoTable()); }
  public static EmotionInfoTable GetRootAsEmotionInfoTable(ByteBuffer _bb, EmotionInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EmotionInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EmotionInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EmotionInfo?)(new GDT.EmotionInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EmotionInfoTable> CreateEmotionInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EmotionInfoTable.AddRows(builder, RowsOffset);
    return EmotionInfoTable.EndEmotionInfoTable(builder);
  }

  public static void StartEmotionInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EmotionInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EmotionInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EmotionInfoTable> EndEmotionInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EmotionInfoTable>(o);
  }
  public EmotionInfoTableT UnPack() {
    var _o = new EmotionInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EmotionInfoTableT _o) {
    _o.Rows = new List<GDT.EmotionInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EmotionInfoTable> Pack(FlatBufferBuilder builder, EmotionInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.EmotionInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EmotionInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EmotionInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEmotionInfoTable(
      builder,
      _Rows);
  }
};

public class EmotionInfoTableT
{
  public List<GDT.EmotionInfoT> Rows { get; set; }

  public EmotionInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentInfo GetRootAsEntertainContentInfo(ByteBuffer _bb) { return GetRootAsEntertainContentInfo(_bb, new EntertainContentInfo()); }
  public static EntertainContentInfo GetRootAsEntertainContentInfo(ByteBuffer _bb, EntertainContentInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EntertainContentID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GameName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGameNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGameNameArray() { return __p.__vector_as_array<byte>(6); }
  public string GameDesc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGameDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGameDescArray() { return __p.__vector_as_array<byte>(8); }
  public string GameImage { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameImageBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGameImageBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGameImageArray() { return __p.__vector_as_array<byte>(10); }
  public int WorldPositionID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ExitWorldPositionID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StartDialogue { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndDialogue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencySubType CurrencySubTypeEnum { get { int o = __p.__offset(20); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int MinCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EntertainContentType EntertainContentTypeEnum { get { int o = __p.__offset(24); return o != 0 ? (GDT.EntertainContentType)__p.bb.Get(o + __p.bb_pos) : GDT.EntertainContentType.EC_None; } }
  public int EntertainContentTypeParam { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float TicketToReward { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int RewardItem01 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItem02 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItem03 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItem04 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItem05 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.datetime? EventStartDay { get { int o = __p.__offset(40); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? EventEndDay { get { int o = __p.__offset(42); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartEntertainContentInfo(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddEntertainContentID(FlatBufferBuilder builder, int EntertainContentID) { builder.AddInt(0, EntertainContentID, 0); }
  public static void AddGameName(FlatBufferBuilder builder, StringOffset GameNameOffset) { builder.AddOffset(1, GameNameOffset.Value, 0); }
  public static void AddGameDesc(FlatBufferBuilder builder, StringOffset GameDescOffset) { builder.AddOffset(2, GameDescOffset.Value, 0); }
  public static void AddGameImage(FlatBufferBuilder builder, StringOffset GameImageOffset) { builder.AddOffset(3, GameImageOffset.Value, 0); }
  public static void AddWorldPositionID(FlatBufferBuilder builder, int WorldPositionID) { builder.AddInt(4, WorldPositionID, 0); }
  public static void AddExitWorldPositionID(FlatBufferBuilder builder, int ExitWorldPositionID) { builder.AddInt(5, ExitWorldPositionID, 0); }
  public static void AddStartDialogue(FlatBufferBuilder builder, int StartDialogue) { builder.AddInt(6, StartDialogue, 0); }
  public static void AddEndDialogue(FlatBufferBuilder builder, int EndDialogue) { builder.AddInt(7, EndDialogue, 0); }
  public static void AddCurrencySubTypeEnum(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeEnum) { builder.AddByte(8, (byte)CurrencySubTypeEnum, 0); }
  public static void AddMinCount(FlatBufferBuilder builder, int MinCount) { builder.AddInt(9, MinCount, 0); }
  public static void AddEntertainContentTypeEnum(FlatBufferBuilder builder, GDT.EntertainContentType EntertainContentTypeEnum) { builder.AddByte(10, (byte)EntertainContentTypeEnum, 0); }
  public static void AddEntertainContentTypeParam(FlatBufferBuilder builder, int EntertainContentTypeParam) { builder.AddInt(11, EntertainContentTypeParam, 0); }
  public static void AddTicketToReward(FlatBufferBuilder builder, float TicketToReward) { builder.AddFloat(12, TicketToReward, 0.0f); }
  public static void AddRewardItem01(FlatBufferBuilder builder, int RewardItem01) { builder.AddInt(13, RewardItem01, 0); }
  public static void AddRewardItem02(FlatBufferBuilder builder, int RewardItem02) { builder.AddInt(14, RewardItem02, 0); }
  public static void AddRewardItem03(FlatBufferBuilder builder, int RewardItem03) { builder.AddInt(15, RewardItem03, 0); }
  public static void AddRewardItem04(FlatBufferBuilder builder, int RewardItem04) { builder.AddInt(16, RewardItem04, 0); }
  public static void AddRewardItem05(FlatBufferBuilder builder, int RewardItem05) { builder.AddInt(17, RewardItem05, 0); }
  public static void AddEventStartDay(FlatBufferBuilder builder, Offset<GDT.datetime> EventStartDayOffset) { builder.AddStruct(18, EventStartDayOffset.Value, 0); }
  public static void AddEventEndDay(FlatBufferBuilder builder, Offset<GDT.datetime> EventEndDayOffset) { builder.AddStruct(19, EventEndDayOffset.Value, 0); }
  public static Offset<GDT.EntertainContentInfo> EndEntertainContentInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentInfo>(o);
  }
  public EntertainContentInfoT UnPack() {
    var _o = new EntertainContentInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentInfoT _o) {
    _o.EntertainContentID = this.EntertainContentID;
    _o.GameName = this.GameName;
    _o.GameDesc = this.GameDesc;
    _o.GameImage = this.GameImage;
    _o.WorldPositionID = this.WorldPositionID;
    _o.ExitWorldPositionID = this.ExitWorldPositionID;
    _o.StartDialogue = this.StartDialogue;
    _o.EndDialogue = this.EndDialogue;
    _o.CurrencySubTypeEnum = this.CurrencySubTypeEnum;
    _o.MinCount = this.MinCount;
    _o.EntertainContentTypeEnum = this.EntertainContentTypeEnum;
    _o.EntertainContentTypeParam = this.EntertainContentTypeParam;
    _o.TicketToReward = this.TicketToReward;
    _o.RewardItem01 = this.RewardItem01;
    _o.RewardItem02 = this.RewardItem02;
    _o.RewardItem03 = this.RewardItem03;
    _o.RewardItem04 = this.RewardItem04;
    _o.RewardItem05 = this.RewardItem05;
    _o.EventStartDay = this.EventStartDay.HasValue ? this.EventStartDay.Value.UnPack() : null;
    _o.EventEndDay = this.EventEndDay.HasValue ? this.EventEndDay.Value.UnPack() : null;
  }
  public static Offset<GDT.EntertainContentInfo> Pack(FlatBufferBuilder builder, EntertainContentInfoT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentInfo>);
    var _GameName = _o.GameName == null ? default(StringOffset) : builder.CreateString(_o.GameName);
    var _GameDesc = _o.GameDesc == null ? default(StringOffset) : builder.CreateString(_o.GameDesc);
    var _GameImage = _o.GameImage == null ? default(StringOffset) : builder.CreateString(_o.GameImage);
    StartEntertainContentInfo(builder);
    AddEntertainContentID(builder, _o.EntertainContentID);
    AddGameName(builder, _GameName);
    AddGameDesc(builder, _GameDesc);
    AddGameImage(builder, _GameImage);
    AddWorldPositionID(builder, _o.WorldPositionID);
    AddExitWorldPositionID(builder, _o.ExitWorldPositionID);
    AddStartDialogue(builder, _o.StartDialogue);
    AddEndDialogue(builder, _o.EndDialogue);
    AddCurrencySubTypeEnum(builder, _o.CurrencySubTypeEnum);
    AddMinCount(builder, _o.MinCount);
    AddEntertainContentTypeEnum(builder, _o.EntertainContentTypeEnum);
    AddEntertainContentTypeParam(builder, _o.EntertainContentTypeParam);
    AddTicketToReward(builder, _o.TicketToReward);
    AddRewardItem01(builder, _o.RewardItem01);
    AddRewardItem02(builder, _o.RewardItem02);
    AddRewardItem03(builder, _o.RewardItem03);
    AddRewardItem04(builder, _o.RewardItem04);
    AddRewardItem05(builder, _o.RewardItem05);
    AddEventStartDay(builder, GDT.datetime.Pack(builder, _o.EventStartDay));
    AddEventEndDay(builder, GDT.datetime.Pack(builder, _o.EventEndDay));
    return EndEntertainContentInfo(builder);
  }
};

public class EntertainContentInfoT
{
  public int EntertainContentID { get; set; }
  public string GameName { get; set; }
  public string GameDesc { get; set; }
  public string GameImage { get; set; }
  public int WorldPositionID { get; set; }
  public int ExitWorldPositionID { get; set; }
  public int StartDialogue { get; set; }
  public int EndDialogue { get; set; }
  public GDT.CurrencySubType CurrencySubTypeEnum { get; set; }
  public int MinCount { get; set; }
  public GDT.EntertainContentType EntertainContentTypeEnum { get; set; }
  public int EntertainContentTypeParam { get; set; }
  public float TicketToReward { get; set; }
  public int RewardItem01 { get; set; }
  public int RewardItem02 { get; set; }
  public int RewardItem03 { get; set; }
  public int RewardItem04 { get; set; }
  public int RewardItem05 { get; set; }
  public GDT.datetimeT EventStartDay { get; set; }
  public GDT.datetimeT EventEndDay { get; set; }

  public EntertainContentInfoT() {
    this.EntertainContentID = 0;
    this.GameName = null;
    this.GameDesc = null;
    this.GameImage = null;
    this.WorldPositionID = 0;
    this.ExitWorldPositionID = 0;
    this.StartDialogue = 0;
    this.EndDialogue = 0;
    this.CurrencySubTypeEnum = GDT.CurrencySubType.CST_None;
    this.MinCount = 0;
    this.EntertainContentTypeEnum = GDT.EntertainContentType.EC_None;
    this.EntertainContentTypeParam = 0;
    this.TicketToReward = 0.0f;
    this.RewardItem01 = 0;
    this.RewardItem02 = 0;
    this.RewardItem03 = 0;
    this.RewardItem04 = 0;
    this.RewardItem05 = 0;
    this.EventStartDay = new GDT.datetimeT();
    this.EventEndDay = new GDT.datetimeT();
  }
}

public struct EntertainContentInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentInfoTable GetRootAsEntertainContentInfoTable(ByteBuffer _bb) { return GetRootAsEntertainContentInfoTable(_bb, new EntertainContentInfoTable()); }
  public static EntertainContentInfoTable GetRootAsEntertainContentInfoTable(ByteBuffer _bb, EntertainContentInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentInfo?)(new GDT.EntertainContentInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentInfoTable> CreateEntertainContentInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentInfoTable.AddRows(builder, RowsOffset);
    return EntertainContentInfoTable.EndEntertainContentInfoTable(builder);
  }

  public static void StartEntertainContentInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentInfoTable> EndEntertainContentInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentInfoTable>(o);
  }
  public EntertainContentInfoTableT UnPack() {
    var _o = new EntertainContentInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentInfoTableT _o) {
    _o.Rows = new List<GDT.EntertainContentInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentInfoTable> Pack(FlatBufferBuilder builder, EntertainContentInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentInfoTable(
      builder,
      _Rows);
  }
};

public class EntertainContentInfoTableT
{
  public List<GDT.EntertainContentInfoT> Rows { get; set; }

  public EntertainContentInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentHeadsAndTails : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentHeadsAndTails GetRootAsEntertainContentHeadsAndTails(ByteBuffer _bb) { return GetRootAsEntertainContentHeadsAndTails(_bb, new EntertainContentHeadsAndTails()); }
  public static EntertainContentHeadsAndTails GetRootAsEntertainContentHeadsAndTails(ByteBuffer _bb, EntertainContentHeadsAndTails obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentHeadsAndTails __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int HeadsAndTailsID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DurationTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MiddleDialogue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinBetting { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxBetting { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BettingUnit { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EntertainContentHeadsAndTails> CreateEntertainContentHeadsAndTails(FlatBufferBuilder builder,
      int HeadsAndTailsID = 0,
      int DurationTime = 0,
      int MiddleDialogue = 0,
      int MinBetting = 0,
      int MaxBetting = 0,
      int BettingUnit = 0) {
    builder.StartTable(6);
    EntertainContentHeadsAndTails.AddBettingUnit(builder, BettingUnit);
    EntertainContentHeadsAndTails.AddMaxBetting(builder, MaxBetting);
    EntertainContentHeadsAndTails.AddMinBetting(builder, MinBetting);
    EntertainContentHeadsAndTails.AddMiddleDialogue(builder, MiddleDialogue);
    EntertainContentHeadsAndTails.AddDurationTime(builder, DurationTime);
    EntertainContentHeadsAndTails.AddHeadsAndTailsID(builder, HeadsAndTailsID);
    return EntertainContentHeadsAndTails.EndEntertainContentHeadsAndTails(builder);
  }

  public static void StartEntertainContentHeadsAndTails(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddHeadsAndTailsID(FlatBufferBuilder builder, int HeadsAndTailsID) { builder.AddInt(0, HeadsAndTailsID, 0); }
  public static void AddDurationTime(FlatBufferBuilder builder, int DurationTime) { builder.AddInt(1, DurationTime, 0); }
  public static void AddMiddleDialogue(FlatBufferBuilder builder, int MiddleDialogue) { builder.AddInt(2, MiddleDialogue, 0); }
  public static void AddMinBetting(FlatBufferBuilder builder, int MinBetting) { builder.AddInt(3, MinBetting, 0); }
  public static void AddMaxBetting(FlatBufferBuilder builder, int MaxBetting) { builder.AddInt(4, MaxBetting, 0); }
  public static void AddBettingUnit(FlatBufferBuilder builder, int BettingUnit) { builder.AddInt(5, BettingUnit, 0); }
  public static Offset<GDT.EntertainContentHeadsAndTails> EndEntertainContentHeadsAndTails(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentHeadsAndTails>(o);
  }
  public EntertainContentHeadsAndTailsT UnPack() {
    var _o = new EntertainContentHeadsAndTailsT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentHeadsAndTailsT _o) {
    _o.HeadsAndTailsID = this.HeadsAndTailsID;
    _o.DurationTime = this.DurationTime;
    _o.MiddleDialogue = this.MiddleDialogue;
    _o.MinBetting = this.MinBetting;
    _o.MaxBetting = this.MaxBetting;
    _o.BettingUnit = this.BettingUnit;
  }
  public static Offset<GDT.EntertainContentHeadsAndTails> Pack(FlatBufferBuilder builder, EntertainContentHeadsAndTailsT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentHeadsAndTails>);
    return CreateEntertainContentHeadsAndTails(
      builder,
      _o.HeadsAndTailsID,
      _o.DurationTime,
      _o.MiddleDialogue,
      _o.MinBetting,
      _o.MaxBetting,
      _o.BettingUnit);
  }
};

public class EntertainContentHeadsAndTailsT
{
  public int HeadsAndTailsID { get; set; }
  public int DurationTime { get; set; }
  public int MiddleDialogue { get; set; }
  public int MinBetting { get; set; }
  public int MaxBetting { get; set; }
  public int BettingUnit { get; set; }

  public EntertainContentHeadsAndTailsT() {
    this.HeadsAndTailsID = 0;
    this.DurationTime = 0;
    this.MiddleDialogue = 0;
    this.MinBetting = 0;
    this.MaxBetting = 0;
    this.BettingUnit = 0;
  }
}

public struct EntertainContentHeadsAndTailsTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentHeadsAndTailsTable GetRootAsEntertainContentHeadsAndTailsTable(ByteBuffer _bb) { return GetRootAsEntertainContentHeadsAndTailsTable(_bb, new EntertainContentHeadsAndTailsTable()); }
  public static EntertainContentHeadsAndTailsTable GetRootAsEntertainContentHeadsAndTailsTable(ByteBuffer _bb, EntertainContentHeadsAndTailsTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentHeadsAndTailsTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentHeadsAndTails? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentHeadsAndTails?)(new GDT.EntertainContentHeadsAndTails()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentHeadsAndTailsTable> CreateEntertainContentHeadsAndTailsTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentHeadsAndTailsTable.AddRows(builder, RowsOffset);
    return EntertainContentHeadsAndTailsTable.EndEntertainContentHeadsAndTailsTable(builder);
  }

  public static void StartEntertainContentHeadsAndTailsTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentHeadsAndTails>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentHeadsAndTails>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentHeadsAndTailsTable> EndEntertainContentHeadsAndTailsTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentHeadsAndTailsTable>(o);
  }
  public EntertainContentHeadsAndTailsTableT UnPack() {
    var _o = new EntertainContentHeadsAndTailsTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentHeadsAndTailsTableT _o) {
    _o.Rows = new List<GDT.EntertainContentHeadsAndTailsT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentHeadsAndTailsTable> Pack(FlatBufferBuilder builder, EntertainContentHeadsAndTailsTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentHeadsAndTailsTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentHeadsAndTails>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentHeadsAndTails.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentHeadsAndTailsTable(
      builder,
      _Rows);
  }
};

public class EntertainContentHeadsAndTailsTableT
{
  public List<GDT.EntertainContentHeadsAndTailsT> Rows { get; set; }

  public EntertainContentHeadsAndTailsTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentDrawCard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentDrawCard GetRootAsEntertainContentDrawCard(ByteBuffer _bb) { return GetRootAsEntertainContentDrawCard(_bb, new EntertainContentDrawCard()); }
  public static EntertainContentDrawCard GetRootAsEntertainContentDrawCard(ByteBuffer _bb, EntertainContentDrawCard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentDrawCard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DrawCardID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount01 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount02 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount03 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount04 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount05 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount06 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankCount07 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EntertainContentDrawCard> CreateEntertainContentDrawCard(FlatBufferBuilder builder,
      int DrawCardID = 0,
      int RankCount01 = 0,
      int RankCount02 = 0,
      int RankCount03 = 0,
      int RankCount04 = 0,
      int RankCount05 = 0,
      int RankCount06 = 0,
      int RankCount07 = 0) {
    builder.StartTable(8);
    EntertainContentDrawCard.AddRankCount07(builder, RankCount07);
    EntertainContentDrawCard.AddRankCount06(builder, RankCount06);
    EntertainContentDrawCard.AddRankCount05(builder, RankCount05);
    EntertainContentDrawCard.AddRankCount04(builder, RankCount04);
    EntertainContentDrawCard.AddRankCount03(builder, RankCount03);
    EntertainContentDrawCard.AddRankCount02(builder, RankCount02);
    EntertainContentDrawCard.AddRankCount01(builder, RankCount01);
    EntertainContentDrawCard.AddDrawCardID(builder, DrawCardID);
    return EntertainContentDrawCard.EndEntertainContentDrawCard(builder);
  }

  public static void StartEntertainContentDrawCard(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddDrawCardID(FlatBufferBuilder builder, int DrawCardID) { builder.AddInt(0, DrawCardID, 0); }
  public static void AddRankCount01(FlatBufferBuilder builder, int RankCount01) { builder.AddInt(1, RankCount01, 0); }
  public static void AddRankCount02(FlatBufferBuilder builder, int RankCount02) { builder.AddInt(2, RankCount02, 0); }
  public static void AddRankCount03(FlatBufferBuilder builder, int RankCount03) { builder.AddInt(3, RankCount03, 0); }
  public static void AddRankCount04(FlatBufferBuilder builder, int RankCount04) { builder.AddInt(4, RankCount04, 0); }
  public static void AddRankCount05(FlatBufferBuilder builder, int RankCount05) { builder.AddInt(5, RankCount05, 0); }
  public static void AddRankCount06(FlatBufferBuilder builder, int RankCount06) { builder.AddInt(6, RankCount06, 0); }
  public static void AddRankCount07(FlatBufferBuilder builder, int RankCount07) { builder.AddInt(7, RankCount07, 0); }
  public static Offset<GDT.EntertainContentDrawCard> EndEntertainContentDrawCard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentDrawCard>(o);
  }
  public EntertainContentDrawCardT UnPack() {
    var _o = new EntertainContentDrawCardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentDrawCardT _o) {
    _o.DrawCardID = this.DrawCardID;
    _o.RankCount01 = this.RankCount01;
    _o.RankCount02 = this.RankCount02;
    _o.RankCount03 = this.RankCount03;
    _o.RankCount04 = this.RankCount04;
    _o.RankCount05 = this.RankCount05;
    _o.RankCount06 = this.RankCount06;
    _o.RankCount07 = this.RankCount07;
  }
  public static Offset<GDT.EntertainContentDrawCard> Pack(FlatBufferBuilder builder, EntertainContentDrawCardT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentDrawCard>);
    return CreateEntertainContentDrawCard(
      builder,
      _o.DrawCardID,
      _o.RankCount01,
      _o.RankCount02,
      _o.RankCount03,
      _o.RankCount04,
      _o.RankCount05,
      _o.RankCount06,
      _o.RankCount07);
  }
};

public class EntertainContentDrawCardT
{
  public int DrawCardID { get; set; }
  public int RankCount01 { get; set; }
  public int RankCount02 { get; set; }
  public int RankCount03 { get; set; }
  public int RankCount04 { get; set; }
  public int RankCount05 { get; set; }
  public int RankCount06 { get; set; }
  public int RankCount07 { get; set; }

  public EntertainContentDrawCardT() {
    this.DrawCardID = 0;
    this.RankCount01 = 0;
    this.RankCount02 = 0;
    this.RankCount03 = 0;
    this.RankCount04 = 0;
    this.RankCount05 = 0;
    this.RankCount06 = 0;
    this.RankCount07 = 0;
  }
}

public struct EntertainContentDrawCardTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentDrawCardTable GetRootAsEntertainContentDrawCardTable(ByteBuffer _bb) { return GetRootAsEntertainContentDrawCardTable(_bb, new EntertainContentDrawCardTable()); }
  public static EntertainContentDrawCardTable GetRootAsEntertainContentDrawCardTable(ByteBuffer _bb, EntertainContentDrawCardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentDrawCardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentDrawCard? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentDrawCard?)(new GDT.EntertainContentDrawCard()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentDrawCardTable> CreateEntertainContentDrawCardTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentDrawCardTable.AddRows(builder, RowsOffset);
    return EntertainContentDrawCardTable.EndEntertainContentDrawCardTable(builder);
  }

  public static void StartEntertainContentDrawCardTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentDrawCard>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentDrawCard>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentDrawCardTable> EndEntertainContentDrawCardTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentDrawCardTable>(o);
  }
  public EntertainContentDrawCardTableT UnPack() {
    var _o = new EntertainContentDrawCardTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentDrawCardTableT _o) {
    _o.Rows = new List<GDT.EntertainContentDrawCardT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentDrawCardTable> Pack(FlatBufferBuilder builder, EntertainContentDrawCardTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentDrawCardTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentDrawCard>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentDrawCard.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentDrawCardTable(
      builder,
      _Rows);
  }
};

public class EntertainContentDrawCardTableT
{
  public List<GDT.EntertainContentDrawCardT> Rows { get; set; }

  public EntertainContentDrawCardTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentBingo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentBingo GetRootAsEntertainContentBingo(ByteBuffer _bb) { return GetRootAsEntertainContentBingo(_bb, new EntertainContentBingo()); }
  public static EntertainContentBingo GetRootAsEntertainContentBingo(ByteBuffer _bb, EntertainContentBingo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentBingo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BingoID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DurationTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MiddleDialogue { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxBingo { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BingoSize { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinNum { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxNum { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SuccessLine { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BingoSound { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EntertainContentBingo> CreateEntertainContentBingo(FlatBufferBuilder builder,
      int BingoID = 0,
      int DurationTime = 0,
      int NextTime = 0,
      int MiddleDialogue = 0,
      int MaxBingo = 0,
      int BingoSize = 0,
      int MinNum = 0,
      int MaxNum = 0,
      int SuccessLine = 0,
      int BingoSound = 0) {
    builder.StartTable(10);
    EntertainContentBingo.AddBingoSound(builder, BingoSound);
    EntertainContentBingo.AddSuccessLine(builder, SuccessLine);
    EntertainContentBingo.AddMaxNum(builder, MaxNum);
    EntertainContentBingo.AddMinNum(builder, MinNum);
    EntertainContentBingo.AddBingoSize(builder, BingoSize);
    EntertainContentBingo.AddMaxBingo(builder, MaxBingo);
    EntertainContentBingo.AddMiddleDialogue(builder, MiddleDialogue);
    EntertainContentBingo.AddNextTime(builder, NextTime);
    EntertainContentBingo.AddDurationTime(builder, DurationTime);
    EntertainContentBingo.AddBingoID(builder, BingoID);
    return EntertainContentBingo.EndEntertainContentBingo(builder);
  }

  public static void StartEntertainContentBingo(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddBingoID(FlatBufferBuilder builder, int BingoID) { builder.AddInt(0, BingoID, 0); }
  public static void AddDurationTime(FlatBufferBuilder builder, int DurationTime) { builder.AddInt(1, DurationTime, 0); }
  public static void AddNextTime(FlatBufferBuilder builder, int NextTime) { builder.AddInt(2, NextTime, 0); }
  public static void AddMiddleDialogue(FlatBufferBuilder builder, int MiddleDialogue) { builder.AddInt(3, MiddleDialogue, 0); }
  public static void AddMaxBingo(FlatBufferBuilder builder, int MaxBingo) { builder.AddInt(4, MaxBingo, 0); }
  public static void AddBingoSize(FlatBufferBuilder builder, int BingoSize) { builder.AddInt(5, BingoSize, 0); }
  public static void AddMinNum(FlatBufferBuilder builder, int MinNum) { builder.AddInt(6, MinNum, 0); }
  public static void AddMaxNum(FlatBufferBuilder builder, int MaxNum) { builder.AddInt(7, MaxNum, 0); }
  public static void AddSuccessLine(FlatBufferBuilder builder, int SuccessLine) { builder.AddInt(8, SuccessLine, 0); }
  public static void AddBingoSound(FlatBufferBuilder builder, int BingoSound) { builder.AddInt(9, BingoSound, 0); }
  public static Offset<GDT.EntertainContentBingo> EndEntertainContentBingo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentBingo>(o);
  }
  public EntertainContentBingoT UnPack() {
    var _o = new EntertainContentBingoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentBingoT _o) {
    _o.BingoID = this.BingoID;
    _o.DurationTime = this.DurationTime;
    _o.NextTime = this.NextTime;
    _o.MiddleDialogue = this.MiddleDialogue;
    _o.MaxBingo = this.MaxBingo;
    _o.BingoSize = this.BingoSize;
    _o.MinNum = this.MinNum;
    _o.MaxNum = this.MaxNum;
    _o.SuccessLine = this.SuccessLine;
    _o.BingoSound = this.BingoSound;
  }
  public static Offset<GDT.EntertainContentBingo> Pack(FlatBufferBuilder builder, EntertainContentBingoT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentBingo>);
    return CreateEntertainContentBingo(
      builder,
      _o.BingoID,
      _o.DurationTime,
      _o.NextTime,
      _o.MiddleDialogue,
      _o.MaxBingo,
      _o.BingoSize,
      _o.MinNum,
      _o.MaxNum,
      _o.SuccessLine,
      _o.BingoSound);
  }
};

public class EntertainContentBingoT
{
  public int BingoID { get; set; }
  public int DurationTime { get; set; }
  public int NextTime { get; set; }
  public int MiddleDialogue { get; set; }
  public int MaxBingo { get; set; }
  public int BingoSize { get; set; }
  public int MinNum { get; set; }
  public int MaxNum { get; set; }
  public int SuccessLine { get; set; }
  public int BingoSound { get; set; }

  public EntertainContentBingoT() {
    this.BingoID = 0;
    this.DurationTime = 0;
    this.NextTime = 0;
    this.MiddleDialogue = 0;
    this.MaxBingo = 0;
    this.BingoSize = 0;
    this.MinNum = 0;
    this.MaxNum = 0;
    this.SuccessLine = 0;
    this.BingoSound = 0;
  }
}

public struct EntertainContentBingoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentBingoTable GetRootAsEntertainContentBingoTable(ByteBuffer _bb) { return GetRootAsEntertainContentBingoTable(_bb, new EntertainContentBingoTable()); }
  public static EntertainContentBingoTable GetRootAsEntertainContentBingoTable(ByteBuffer _bb, EntertainContentBingoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentBingoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentBingo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentBingo?)(new GDT.EntertainContentBingo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentBingoTable> CreateEntertainContentBingoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentBingoTable.AddRows(builder, RowsOffset);
    return EntertainContentBingoTable.EndEntertainContentBingoTable(builder);
  }

  public static void StartEntertainContentBingoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentBingo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentBingo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentBingoTable> EndEntertainContentBingoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentBingoTable>(o);
  }
  public EntertainContentBingoTableT UnPack() {
    var _o = new EntertainContentBingoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentBingoTableT _o) {
    _o.Rows = new List<GDT.EntertainContentBingoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentBingoTable> Pack(FlatBufferBuilder builder, EntertainContentBingoTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentBingoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentBingo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentBingo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentBingoTable(
      builder,
      _Rows);
  }
};

public class EntertainContentBingoTableT
{
  public List<GDT.EntertainContentBingoT> Rows { get; set; }

  public EntertainContentBingoTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentDialogue : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentDialogue GetRootAsEntertainContentDialogue(ByteBuffer _bb) { return GetRootAsEntertainContentDialogue(_bb, new EntertainContentDialogue()); }
  public static EntertainContentDialogue GetRootAsEntertainContentDialogue(ByteBuffer _bb, EntertainContentDialogue obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentDialogue __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int DialogueID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string DialogueLanguage { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDialogueLanguageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDialogueLanguageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDialogueLanguageArray() { return __p.__vector_as_array<byte>(6); }
  public int DurationTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EntertainContentDialogue> CreateEntertainContentDialogue(FlatBufferBuilder builder,
      int DialogueID = 0,
      StringOffset DialogueLanguageOffset = default(StringOffset),
      int DurationTime = 0) {
    builder.StartTable(3);
    EntertainContentDialogue.AddDurationTime(builder, DurationTime);
    EntertainContentDialogue.AddDialogueLanguage(builder, DialogueLanguageOffset);
    EntertainContentDialogue.AddDialogueID(builder, DialogueID);
    return EntertainContentDialogue.EndEntertainContentDialogue(builder);
  }

  public static void StartEntertainContentDialogue(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddDialogueID(FlatBufferBuilder builder, int DialogueID) { builder.AddInt(0, DialogueID, 0); }
  public static void AddDialogueLanguage(FlatBufferBuilder builder, StringOffset DialogueLanguageOffset) { builder.AddOffset(1, DialogueLanguageOffset.Value, 0); }
  public static void AddDurationTime(FlatBufferBuilder builder, int DurationTime) { builder.AddInt(2, DurationTime, 0); }
  public static Offset<GDT.EntertainContentDialogue> EndEntertainContentDialogue(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentDialogue>(o);
  }
  public EntertainContentDialogueT UnPack() {
    var _o = new EntertainContentDialogueT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentDialogueT _o) {
    _o.DialogueID = this.DialogueID;
    _o.DialogueLanguage = this.DialogueLanguage;
    _o.DurationTime = this.DurationTime;
  }
  public static Offset<GDT.EntertainContentDialogue> Pack(FlatBufferBuilder builder, EntertainContentDialogueT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentDialogue>);
    var _DialogueLanguage = _o.DialogueLanguage == null ? default(StringOffset) : builder.CreateString(_o.DialogueLanguage);
    return CreateEntertainContentDialogue(
      builder,
      _o.DialogueID,
      _DialogueLanguage,
      _o.DurationTime);
  }
};

public class EntertainContentDialogueT
{
  public int DialogueID { get; set; }
  public string DialogueLanguage { get; set; }
  public int DurationTime { get; set; }

  public EntertainContentDialogueT() {
    this.DialogueID = 0;
    this.DialogueLanguage = null;
    this.DurationTime = 0;
  }
}

public struct EntertainContentDialogueTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentDialogueTable GetRootAsEntertainContentDialogueTable(ByteBuffer _bb) { return GetRootAsEntertainContentDialogueTable(_bb, new EntertainContentDialogueTable()); }
  public static EntertainContentDialogueTable GetRootAsEntertainContentDialogueTable(ByteBuffer _bb, EntertainContentDialogueTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentDialogueTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentDialogue? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentDialogue?)(new GDT.EntertainContentDialogue()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentDialogueTable> CreateEntertainContentDialogueTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentDialogueTable.AddRows(builder, RowsOffset);
    return EntertainContentDialogueTable.EndEntertainContentDialogueTable(builder);
  }

  public static void StartEntertainContentDialogueTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentDialogue>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentDialogue>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentDialogueTable> EndEntertainContentDialogueTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentDialogueTable>(o);
  }
  public EntertainContentDialogueTableT UnPack() {
    var _o = new EntertainContentDialogueTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentDialogueTableT _o) {
    _o.Rows = new List<GDT.EntertainContentDialogueT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentDialogueTable> Pack(FlatBufferBuilder builder, EntertainContentDialogueTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentDialogueTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentDialogue>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentDialogue.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentDialogueTable(
      builder,
      _Rows);
  }
};

public class EntertainContentDialogueTableT
{
  public List<GDT.EntertainContentDialogueT> Rows { get; set; }

  public EntertainContentDialogueTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentReward GetRootAsEntertainContentReward(ByteBuffer _bb) { return GetRootAsEntertainContentReward(_bb, new EntertainContentReward()); }
  public static EntertainContentReward GetRootAsEntertainContentReward(ByteBuffer _bb, EntertainContentReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int RewardID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinRank { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxRank { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public int CurrencySubTypeID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rake { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EntertainContentReward> CreateEntertainContentReward(FlatBufferBuilder builder,
      int RewardID = 0,
      int MinRank = 0,
      int MaxRank = 0,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      int CurrencySubTypeID = 0,
      int RewardCount = 0,
      int Rake = 0) {
    builder.StartTable(7);
    EntertainContentReward.AddRake(builder, Rake);
    EntertainContentReward.AddRewardCount(builder, RewardCount);
    EntertainContentReward.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    EntertainContentReward.AddMaxRank(builder, MaxRank);
    EntertainContentReward.AddMinRank(builder, MinRank);
    EntertainContentReward.AddRewardID(builder, RewardID);
    EntertainContentReward.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    return EntertainContentReward.EndEntertainContentReward(builder);
  }

  public static void StartEntertainContentReward(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddRewardID(FlatBufferBuilder builder, int RewardID) { builder.AddInt(0, RewardID, 0); }
  public static void AddMinRank(FlatBufferBuilder builder, int MinRank) { builder.AddInt(1, MinRank, 0); }
  public static void AddMaxRank(FlatBufferBuilder builder, int MaxRank) { builder.AddInt(2, MaxRank, 0); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(3, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, int CurrencySubTypeID) { builder.AddInt(4, CurrencySubTypeID, 0); }
  public static void AddRewardCount(FlatBufferBuilder builder, int RewardCount) { builder.AddInt(5, RewardCount, 0); }
  public static void AddRake(FlatBufferBuilder builder, int Rake) { builder.AddInt(6, Rake, 0); }
  public static Offset<GDT.EntertainContentReward> EndEntertainContentReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentReward>(o);
  }
  public EntertainContentRewardT UnPack() {
    var _o = new EntertainContentRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentRewardT _o) {
    _o.RewardID = this.RewardID;
    _o.MinRank = this.MinRank;
    _o.MaxRank = this.MaxRank;
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.RewardCount = this.RewardCount;
    _o.Rake = this.Rake;
  }
  public static Offset<GDT.EntertainContentReward> Pack(FlatBufferBuilder builder, EntertainContentRewardT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentReward>);
    return CreateEntertainContentReward(
      builder,
      _o.RewardID,
      _o.MinRank,
      _o.MaxRank,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeID,
      _o.RewardCount,
      _o.Rake);
  }
};

public class EntertainContentRewardT
{
  public int RewardID { get; set; }
  public int MinRank { get; set; }
  public int MaxRank { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public int CurrencySubTypeID { get; set; }
  public int RewardCount { get; set; }
  public int Rake { get; set; }

  public EntertainContentRewardT() {
    this.RewardID = 0;
    this.MinRank = 0;
    this.MaxRank = 0;
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID = 0;
    this.RewardCount = 0;
    this.Rake = 0;
  }
}

public struct EntertainContentRewardTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentRewardTable GetRootAsEntertainContentRewardTable(ByteBuffer _bb) { return GetRootAsEntertainContentRewardTable(_bb, new EntertainContentRewardTable()); }
  public static EntertainContentRewardTable GetRootAsEntertainContentRewardTable(ByteBuffer _bb, EntertainContentRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentReward? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentReward?)(new GDT.EntertainContentReward()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentRewardTable> CreateEntertainContentRewardTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentRewardTable.AddRows(builder, RowsOffset);
    return EntertainContentRewardTable.EndEntertainContentRewardTable(builder);
  }

  public static void StartEntertainContentRewardTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentReward>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentReward>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentRewardTable> EndEntertainContentRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentRewardTable>(o);
  }
  public EntertainContentRewardTableT UnPack() {
    var _o = new EntertainContentRewardTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentRewardTableT _o) {
    _o.Rows = new List<GDT.EntertainContentRewardT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentRewardTable> Pack(FlatBufferBuilder builder, EntertainContentRewardTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentRewardTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentReward>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentReward.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentRewardTable(
      builder,
      _Rows);
  }
};

public class EntertainContentRewardTableT
{
  public List<GDT.EntertainContentRewardT> Rows { get; set; }

  public EntertainContentRewardTableT() {
    this.Rows = null;
  }
}

/// Defined by EntertainContent.xlsx
public struct EntertainContentSchedule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentSchedule GetRootAsEntertainContentSchedule(ByteBuffer _bb) { return GetRootAsEntertainContentSchedule(_bb, new EntertainContentSchedule()); }
  public static EntertainContentSchedule GetRootAsEntertainContentSchedule(ByteBuffer _bb, EntertainContentSchedule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentSchedule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ScheduleID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.DayType DayTypeEnum { get { int o = __p.__offset(6); return o != 0 ? (GDT.DayType)__p.bb.Get(o + __p.bb_pos) : GDT.DayType.DT_None; } }
  public GDT.time? EntryTime { get { int o = __p.__offset(8); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.time? OpenTime { get { int o = __p.__offset(10); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.time? CloseTime { get { int o = __p.__offset(12); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartEntertainContentSchedule(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddScheduleID(FlatBufferBuilder builder, int ScheduleID) { builder.AddInt(0, ScheduleID, 0); }
  public static void AddDayTypeEnum(FlatBufferBuilder builder, GDT.DayType DayTypeEnum) { builder.AddByte(1, (byte)DayTypeEnum, 0); }
  public static void AddEntryTime(FlatBufferBuilder builder, Offset<GDT.time> EntryTimeOffset) { builder.AddStruct(2, EntryTimeOffset.Value, 0); }
  public static void AddOpenTime(FlatBufferBuilder builder, Offset<GDT.time> OpenTimeOffset) { builder.AddStruct(3, OpenTimeOffset.Value, 0); }
  public static void AddCloseTime(FlatBufferBuilder builder, Offset<GDT.time> CloseTimeOffset) { builder.AddStruct(4, CloseTimeOffset.Value, 0); }
  public static Offset<GDT.EntertainContentSchedule> EndEntertainContentSchedule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentSchedule>(o);
  }
  public EntertainContentScheduleT UnPack() {
    var _o = new EntertainContentScheduleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentScheduleT _o) {
    _o.ScheduleID = this.ScheduleID;
    _o.DayTypeEnum = this.DayTypeEnum;
    _o.EntryTime = this.EntryTime.HasValue ? this.EntryTime.Value.UnPack() : null;
    _o.OpenTime = this.OpenTime.HasValue ? this.OpenTime.Value.UnPack() : null;
    _o.CloseTime = this.CloseTime.HasValue ? this.CloseTime.Value.UnPack() : null;
  }
  public static Offset<GDT.EntertainContentSchedule> Pack(FlatBufferBuilder builder, EntertainContentScheduleT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentSchedule>);
    StartEntertainContentSchedule(builder);
    AddScheduleID(builder, _o.ScheduleID);
    AddDayTypeEnum(builder, _o.DayTypeEnum);
    AddEntryTime(builder, GDT.time.Pack(builder, _o.EntryTime));
    AddOpenTime(builder, GDT.time.Pack(builder, _o.OpenTime));
    AddCloseTime(builder, GDT.time.Pack(builder, _o.CloseTime));
    return EndEntertainContentSchedule(builder);
  }
};

public class EntertainContentScheduleT
{
  public int ScheduleID { get; set; }
  public GDT.DayType DayTypeEnum { get; set; }
  public GDT.timeT EntryTime { get; set; }
  public GDT.timeT OpenTime { get; set; }
  public GDT.timeT CloseTime { get; set; }

  public EntertainContentScheduleT() {
    this.ScheduleID = 0;
    this.DayTypeEnum = GDT.DayType.DT_None;
    this.EntryTime = new GDT.timeT();
    this.OpenTime = new GDT.timeT();
    this.CloseTime = new GDT.timeT();
  }
}

public struct EntertainContentScheduleTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EntertainContentScheduleTable GetRootAsEntertainContentScheduleTable(ByteBuffer _bb) { return GetRootAsEntertainContentScheduleTable(_bb, new EntertainContentScheduleTable()); }
  public static EntertainContentScheduleTable GetRootAsEntertainContentScheduleTable(ByteBuffer _bb, EntertainContentScheduleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EntertainContentScheduleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EntertainContentSchedule? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EntertainContentSchedule?)(new GDT.EntertainContentSchedule()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EntertainContentScheduleTable> CreateEntertainContentScheduleTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EntertainContentScheduleTable.AddRows(builder, RowsOffset);
    return EntertainContentScheduleTable.EndEntertainContentScheduleTable(builder);
  }

  public static void StartEntertainContentScheduleTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EntertainContentSchedule>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EntertainContentSchedule>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EntertainContentScheduleTable> EndEntertainContentScheduleTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EntertainContentScheduleTable>(o);
  }
  public EntertainContentScheduleTableT UnPack() {
    var _o = new EntertainContentScheduleTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EntertainContentScheduleTableT _o) {
    _o.Rows = new List<GDT.EntertainContentScheduleT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EntertainContentScheduleTable> Pack(FlatBufferBuilder builder, EntertainContentScheduleTableT _o) {
    if (_o == null) return default(Offset<GDT.EntertainContentScheduleTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EntertainContentSchedule>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EntertainContentSchedule.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEntertainContentScheduleTable(
      builder,
      _Rows);
  }
};

public class EntertainContentScheduleTableT
{
  public List<GDT.EntertainContentScheduleT> Rows { get; set; }

  public EntertainContentScheduleTableT() {
    this.Rows = null;
  }
}

/// Defined by Environment.xlsx
public struct EnvironmentInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EnvironmentInfo GetRootAsEnvironmentInfo(ByteBuffer _bb) { return GetRootAsEnvironmentInfo(_bb, new EnvironmentInfo()); }
  public static EnvironmentInfo GetRootAsEnvironmentInfo(ByteBuffer _bb, EnvironmentInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnvironmentInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EnvironmentID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EnviPrefabName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEnviPrefabNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEnviPrefabNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEnviPrefabNameArray() { return __p.__vector_as_array<byte>(6); }
  public int DurationTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextEnvGroupID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EnvironmentInfo> CreateEnvironmentInfo(FlatBufferBuilder builder,
      int EnvironmentID = 0,
      StringOffset EnviPrefabNameOffset = default(StringOffset),
      int DurationTime = 0,
      int NextEnvGroupID = 0) {
    builder.StartTable(4);
    EnvironmentInfo.AddNextEnvGroupID(builder, NextEnvGroupID);
    EnvironmentInfo.AddDurationTime(builder, DurationTime);
    EnvironmentInfo.AddEnviPrefabName(builder, EnviPrefabNameOffset);
    EnvironmentInfo.AddEnvironmentID(builder, EnvironmentID);
    return EnvironmentInfo.EndEnvironmentInfo(builder);
  }

  public static void StartEnvironmentInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddEnvironmentID(FlatBufferBuilder builder, int EnvironmentID) { builder.AddInt(0, EnvironmentID, 0); }
  public static void AddEnviPrefabName(FlatBufferBuilder builder, StringOffset EnviPrefabNameOffset) { builder.AddOffset(1, EnviPrefabNameOffset.Value, 0); }
  public static void AddDurationTime(FlatBufferBuilder builder, int DurationTime) { builder.AddInt(2, DurationTime, 0); }
  public static void AddNextEnvGroupID(FlatBufferBuilder builder, int NextEnvGroupID) { builder.AddInt(3, NextEnvGroupID, 0); }
  public static Offset<GDT.EnvironmentInfo> EndEnvironmentInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EnvironmentInfo>(o);
  }
  public EnvironmentInfoT UnPack() {
    var _o = new EnvironmentInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EnvironmentInfoT _o) {
    _o.EnvironmentID = this.EnvironmentID;
    _o.EnviPrefabName = this.EnviPrefabName;
    _o.DurationTime = this.DurationTime;
    _o.NextEnvGroupID = this.NextEnvGroupID;
  }
  public static Offset<GDT.EnvironmentInfo> Pack(FlatBufferBuilder builder, EnvironmentInfoT _o) {
    if (_o == null) return default(Offset<GDT.EnvironmentInfo>);
    var _EnviPrefabName = _o.EnviPrefabName == null ? default(StringOffset) : builder.CreateString(_o.EnviPrefabName);
    return CreateEnvironmentInfo(
      builder,
      _o.EnvironmentID,
      _EnviPrefabName,
      _o.DurationTime,
      _o.NextEnvGroupID);
  }
};

public class EnvironmentInfoT
{
  public int EnvironmentID { get; set; }
  public string EnviPrefabName { get; set; }
  public int DurationTime { get; set; }
  public int NextEnvGroupID { get; set; }

  public EnvironmentInfoT() {
    this.EnvironmentID = 0;
    this.EnviPrefabName = null;
    this.DurationTime = 0;
    this.NextEnvGroupID = 0;
  }
}

public struct EnvironmentInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EnvironmentInfoTable GetRootAsEnvironmentInfoTable(ByteBuffer _bb) { return GetRootAsEnvironmentInfoTable(_bb, new EnvironmentInfoTable()); }
  public static EnvironmentInfoTable GetRootAsEnvironmentInfoTable(ByteBuffer _bb, EnvironmentInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnvironmentInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EnvironmentInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EnvironmentInfo?)(new GDT.EnvironmentInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EnvironmentInfoTable> CreateEnvironmentInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EnvironmentInfoTable.AddRows(builder, RowsOffset);
    return EnvironmentInfoTable.EndEnvironmentInfoTable(builder);
  }

  public static void StartEnvironmentInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EnvironmentInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EnvironmentInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EnvironmentInfoTable> EndEnvironmentInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EnvironmentInfoTable>(o);
  }
  public EnvironmentInfoTableT UnPack() {
    var _o = new EnvironmentInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EnvironmentInfoTableT _o) {
    _o.Rows = new List<GDT.EnvironmentInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EnvironmentInfoTable> Pack(FlatBufferBuilder builder, EnvironmentInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.EnvironmentInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EnvironmentInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EnvironmentInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEnvironmentInfoTable(
      builder,
      _Rows);
  }
};

public class EnvironmentInfoTableT
{
  public List<GDT.EnvironmentInfoT> Rows { get; set; }

  public EnvironmentInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Environment.xlsx
public struct EnvironmentNextEnvGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EnvironmentNextEnvGroup GetRootAsEnvironmentNextEnvGroup(ByteBuffer _bb) { return GetRootAsEnvironmentNextEnvGroup(_bb, new EnvironmentNextEnvGroup()); }
  public static EnvironmentNextEnvGroup GetRootAsEnvironmentNextEnvGroup(ByteBuffer _bb, EnvironmentNextEnvGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnvironmentNextEnvGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NextEnvGroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnvironmentID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EnvironmentNextEnvGroup> CreateEnvironmentNextEnvGroup(FlatBufferBuilder builder,
      int NextEnvGroupID = 0,
      int EnvironmentID = 0,
      int Rate = 0) {
    builder.StartTable(3);
    EnvironmentNextEnvGroup.AddRate(builder, Rate);
    EnvironmentNextEnvGroup.AddEnvironmentID(builder, EnvironmentID);
    EnvironmentNextEnvGroup.AddNextEnvGroupID(builder, NextEnvGroupID);
    return EnvironmentNextEnvGroup.EndEnvironmentNextEnvGroup(builder);
  }

  public static void StartEnvironmentNextEnvGroup(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddNextEnvGroupID(FlatBufferBuilder builder, int NextEnvGroupID) { builder.AddInt(0, NextEnvGroupID, 0); }
  public static void AddEnvironmentID(FlatBufferBuilder builder, int EnvironmentID) { builder.AddInt(1, EnvironmentID, 0); }
  public static void AddRate(FlatBufferBuilder builder, int Rate) { builder.AddInt(2, Rate, 0); }
  public static Offset<GDT.EnvironmentNextEnvGroup> EndEnvironmentNextEnvGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EnvironmentNextEnvGroup>(o);
  }
  public EnvironmentNextEnvGroupT UnPack() {
    var _o = new EnvironmentNextEnvGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EnvironmentNextEnvGroupT _o) {
    _o.NextEnvGroupID = this.NextEnvGroupID;
    _o.EnvironmentID = this.EnvironmentID;
    _o.Rate = this.Rate;
  }
  public static Offset<GDT.EnvironmentNextEnvGroup> Pack(FlatBufferBuilder builder, EnvironmentNextEnvGroupT _o) {
    if (_o == null) return default(Offset<GDT.EnvironmentNextEnvGroup>);
    return CreateEnvironmentNextEnvGroup(
      builder,
      _o.NextEnvGroupID,
      _o.EnvironmentID,
      _o.Rate);
  }
};

public class EnvironmentNextEnvGroupT
{
  public int NextEnvGroupID { get; set; }
  public int EnvironmentID { get; set; }
  public int Rate { get; set; }

  public EnvironmentNextEnvGroupT() {
    this.NextEnvGroupID = 0;
    this.EnvironmentID = 0;
    this.Rate = 0;
  }
}

public struct EnvironmentNextEnvGroupTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EnvironmentNextEnvGroupTable GetRootAsEnvironmentNextEnvGroupTable(ByteBuffer _bb) { return GetRootAsEnvironmentNextEnvGroupTable(_bb, new EnvironmentNextEnvGroupTable()); }
  public static EnvironmentNextEnvGroupTable GetRootAsEnvironmentNextEnvGroupTable(ByteBuffer _bb, EnvironmentNextEnvGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EnvironmentNextEnvGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EnvironmentNextEnvGroup? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EnvironmentNextEnvGroup?)(new GDT.EnvironmentNextEnvGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EnvironmentNextEnvGroupTable> CreateEnvironmentNextEnvGroupTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EnvironmentNextEnvGroupTable.AddRows(builder, RowsOffset);
    return EnvironmentNextEnvGroupTable.EndEnvironmentNextEnvGroupTable(builder);
  }

  public static void StartEnvironmentNextEnvGroupTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EnvironmentNextEnvGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EnvironmentNextEnvGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EnvironmentNextEnvGroupTable> EndEnvironmentNextEnvGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EnvironmentNextEnvGroupTable>(o);
  }
  public EnvironmentNextEnvGroupTableT UnPack() {
    var _o = new EnvironmentNextEnvGroupTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EnvironmentNextEnvGroupTableT _o) {
    _o.Rows = new List<GDT.EnvironmentNextEnvGroupT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EnvironmentNextEnvGroupTable> Pack(FlatBufferBuilder builder, EnvironmentNextEnvGroupTableT _o) {
    if (_o == null) return default(Offset<GDT.EnvironmentNextEnvGroupTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EnvironmentNextEnvGroup>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EnvironmentNextEnvGroup.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEnvironmentNextEnvGroupTable(
      builder,
      _Rows);
  }
};

public class EnvironmentNextEnvGroupTableT
{
  public List<GDT.EnvironmentNextEnvGroupT> Rows { get; set; }

  public EnvironmentNextEnvGroupTableT() {
    this.Rows = null;
  }
}

/// Defined by Event.xlsx
public struct EventInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventInfo GetRootAsEventInfo(ByteBuffer _bb) { return GetRootAsEventInfo(_bb, new EventInfo()); }
  public static EventInfo GetRootAsEventInfo(ByteBuffer _bb, EventInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EventID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string EventName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEventNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetEventNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetEventNameArray() { return __p.__vector_as_array<byte>(6); }
  public int EventLocation { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StartACC { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventWaitingTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventDelays { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EventUseACCType EventUseACCTypeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.EventUseACCType)__p.bb.Get(o + __p.bb_pos) : GDT.EventUseACCType.EUA_None; } }
  public int UseRate { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? EventLocalPosition { get { int o = __p.__offset(20); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EventLocalRadius { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EventBgm { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MailID { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartEventInfo(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddEventID(FlatBufferBuilder builder, int EventID) { builder.AddInt(0, EventID, 0); }
  public static void AddEventName(FlatBufferBuilder builder, StringOffset EventNameOffset) { builder.AddOffset(1, EventNameOffset.Value, 0); }
  public static void AddEventLocation(FlatBufferBuilder builder, int EventLocation) { builder.AddInt(2, EventLocation, 0); }
  public static void AddStartACC(FlatBufferBuilder builder, int StartACC) { builder.AddInt(3, StartACC, 0); }
  public static void AddEventWaitingTime(FlatBufferBuilder builder, int EventWaitingTime) { builder.AddInt(4, EventWaitingTime, 0); }
  public static void AddEventDelays(FlatBufferBuilder builder, int EventDelays) { builder.AddInt(5, EventDelays, 0); }
  public static void AddEventUseACCTypeID(FlatBufferBuilder builder, GDT.EventUseACCType EventUseACCTypeID) { builder.AddByte(6, (byte)EventUseACCTypeID, 0); }
  public static void AddUseRate(FlatBufferBuilder builder, int UseRate) { builder.AddInt(7, UseRate, 0); }
  public static void AddEventLocalPosition(FlatBufferBuilder builder, Offset<GDT.vector3> EventLocalPositionOffset) { builder.AddStruct(8, EventLocalPositionOffset.Value, 0); }
  public static void AddEventLocalRadius(FlatBufferBuilder builder, float EventLocalRadius) { builder.AddFloat(9, EventLocalRadius, 0.0f); }
  public static void AddEventBgm(FlatBufferBuilder builder, int EventBgm) { builder.AddInt(10, EventBgm, 0); }
  public static void AddMailID(FlatBufferBuilder builder, int MailID) { builder.AddInt(11, MailID, 0); }
  public static Offset<GDT.EventInfo> EndEventInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventInfo>(o);
  }
  public EventInfoT UnPack() {
    var _o = new EventInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventInfoT _o) {
    _o.EventID = this.EventID;
    _o.EventName = this.EventName;
    _o.EventLocation = this.EventLocation;
    _o.StartACC = this.StartACC;
    _o.EventWaitingTime = this.EventWaitingTime;
    _o.EventDelays = this.EventDelays;
    _o.EventUseACCTypeID = this.EventUseACCTypeID;
    _o.UseRate = this.UseRate;
    _o.EventLocalPosition = this.EventLocalPosition.HasValue ? this.EventLocalPosition.Value.UnPack() : null;
    _o.EventLocalRadius = this.EventLocalRadius;
    _o.EventBgm = this.EventBgm;
    _o.MailID = this.MailID;
  }
  public static Offset<GDT.EventInfo> Pack(FlatBufferBuilder builder, EventInfoT _o) {
    if (_o == null) return default(Offset<GDT.EventInfo>);
    var _EventName = _o.EventName == null ? default(StringOffset) : builder.CreateString(_o.EventName);
    StartEventInfo(builder);
    AddEventID(builder, _o.EventID);
    AddEventName(builder, _EventName);
    AddEventLocation(builder, _o.EventLocation);
    AddStartACC(builder, _o.StartACC);
    AddEventWaitingTime(builder, _o.EventWaitingTime);
    AddEventDelays(builder, _o.EventDelays);
    AddEventUseACCTypeID(builder, _o.EventUseACCTypeID);
    AddUseRate(builder, _o.UseRate);
    AddEventLocalPosition(builder, GDT.vector3.Pack(builder, _o.EventLocalPosition));
    AddEventLocalRadius(builder, _o.EventLocalRadius);
    AddEventBgm(builder, _o.EventBgm);
    AddMailID(builder, _o.MailID);
    return EndEventInfo(builder);
  }
};

public class EventInfoT
{
  public int EventID { get; set; }
  public string EventName { get; set; }
  public int EventLocation { get; set; }
  public int StartACC { get; set; }
  public int EventWaitingTime { get; set; }
  public int EventDelays { get; set; }
  public GDT.EventUseACCType EventUseACCTypeID { get; set; }
  public int UseRate { get; set; }
  public GDT.vector3T EventLocalPosition { get; set; }
  public float EventLocalRadius { get; set; }
  public int EventBgm { get; set; }
  public int MailID { get; set; }

  public EventInfoT() {
    this.EventID = 0;
    this.EventName = null;
    this.EventLocation = 0;
    this.StartACC = 0;
    this.EventWaitingTime = 0;
    this.EventDelays = 0;
    this.EventUseACCTypeID = GDT.EventUseACCType.EUA_None;
    this.UseRate = 0;
    this.EventLocalPosition = new GDT.vector3T();
    this.EventLocalRadius = 0.0f;
    this.EventBgm = 0;
    this.MailID = 0;
  }
}

public struct EventInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventInfoTable GetRootAsEventInfoTable(ByteBuffer _bb) { return GetRootAsEventInfoTable(_bb, new EventInfoTable()); }
  public static EventInfoTable GetRootAsEventInfoTable(ByteBuffer _bb, EventInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EventInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EventInfo?)(new GDT.EventInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EventInfoTable> CreateEventInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EventInfoTable.AddRows(builder, RowsOffset);
    return EventInfoTable.EndEventInfoTable(builder);
  }

  public static void StartEventInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EventInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EventInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EventInfoTable> EndEventInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventInfoTable>(o);
  }
  public EventInfoTableT UnPack() {
    var _o = new EventInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventInfoTableT _o) {
    _o.Rows = new List<GDT.EventInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EventInfoTable> Pack(FlatBufferBuilder builder, EventInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.EventInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EventInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EventInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEventInfoTable(
      builder,
      _Rows);
  }
};

public class EventInfoTableT
{
  public List<GDT.EventInfoT> Rows { get; set; }

  public EventInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Event.xlsx
public struct EventMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventMessage GetRootAsEventMessage(ByteBuffer _bb) { return GetRootAsEventMessage(_bb, new EventMessage()); }
  public static EventMessage GetRootAsEventMessage(ByteBuffer _bb, EventMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EventID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PopupMassage { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPopupMassageBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetPopupMassageBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetPopupMassageArray() { return __p.__vector_as_array<byte>(6); }
  public int MsgOutputTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Repeat { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RepeatTime { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EventMessage> CreateEventMessage(FlatBufferBuilder builder,
      int EventID = 0,
      StringOffset PopupMassageOffset = default(StringOffset),
      int MsgOutputTime = 0,
      bool Repeat = false,
      int RepeatTime = 0) {
    builder.StartTable(5);
    EventMessage.AddRepeatTime(builder, RepeatTime);
    EventMessage.AddMsgOutputTime(builder, MsgOutputTime);
    EventMessage.AddPopupMassage(builder, PopupMassageOffset);
    EventMessage.AddEventID(builder, EventID);
    EventMessage.AddRepeat(builder, Repeat);
    return EventMessage.EndEventMessage(builder);
  }

  public static void StartEventMessage(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddEventID(FlatBufferBuilder builder, int EventID) { builder.AddInt(0, EventID, 0); }
  public static void AddPopupMassage(FlatBufferBuilder builder, StringOffset PopupMassageOffset) { builder.AddOffset(1, PopupMassageOffset.Value, 0); }
  public static void AddMsgOutputTime(FlatBufferBuilder builder, int MsgOutputTime) { builder.AddInt(2, MsgOutputTime, 0); }
  public static void AddRepeat(FlatBufferBuilder builder, bool Repeat) { builder.AddBool(3, Repeat, false); }
  public static void AddRepeatTime(FlatBufferBuilder builder, int RepeatTime) { builder.AddInt(4, RepeatTime, 0); }
  public static Offset<GDT.EventMessage> EndEventMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventMessage>(o);
  }
  public EventMessageT UnPack() {
    var _o = new EventMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventMessageT _o) {
    _o.EventID = this.EventID;
    _o.PopupMassage = this.PopupMassage;
    _o.MsgOutputTime = this.MsgOutputTime;
    _o.Repeat = this.Repeat;
    _o.RepeatTime = this.RepeatTime;
  }
  public static Offset<GDT.EventMessage> Pack(FlatBufferBuilder builder, EventMessageT _o) {
    if (_o == null) return default(Offset<GDT.EventMessage>);
    var _PopupMassage = _o.PopupMassage == null ? default(StringOffset) : builder.CreateString(_o.PopupMassage);
    return CreateEventMessage(
      builder,
      _o.EventID,
      _PopupMassage,
      _o.MsgOutputTime,
      _o.Repeat,
      _o.RepeatTime);
  }
};

public class EventMessageT
{
  public int EventID { get; set; }
  public string PopupMassage { get; set; }
  public int MsgOutputTime { get; set; }
  public bool Repeat { get; set; }
  public int RepeatTime { get; set; }

  public EventMessageT() {
    this.EventID = 0;
    this.PopupMassage = null;
    this.MsgOutputTime = 0;
    this.Repeat = false;
    this.RepeatTime = 0;
  }
}

public struct EventMessageTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventMessageTable GetRootAsEventMessageTable(ByteBuffer _bb) { return GetRootAsEventMessageTable(_bb, new EventMessageTable()); }
  public static EventMessageTable GetRootAsEventMessageTable(ByteBuffer _bb, EventMessageTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventMessageTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EventMessage? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EventMessage?)(new GDT.EventMessage()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EventMessageTable> CreateEventMessageTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EventMessageTable.AddRows(builder, RowsOffset);
    return EventMessageTable.EndEventMessageTable(builder);
  }

  public static void StartEventMessageTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EventMessage>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EventMessage>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EventMessageTable> EndEventMessageTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventMessageTable>(o);
  }
  public EventMessageTableT UnPack() {
    var _o = new EventMessageTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventMessageTableT _o) {
    _o.Rows = new List<GDT.EventMessageT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EventMessageTable> Pack(FlatBufferBuilder builder, EventMessageTableT _o) {
    if (_o == null) return default(Offset<GDT.EventMessageTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EventMessage>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EventMessage.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEventMessageTable(
      builder,
      _Rows);
  }
};

public class EventMessageTableT
{
  public List<GDT.EventMessageT> Rows { get; set; }

  public EventMessageTableT() {
    this.Rows = null;
  }
}

/// Defined by Event.xlsx
public struct EventObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventObject GetRootAsEventObject(ByteBuffer _bb) { return GetRootAsEventObject(_bb, new EventObject()); }
  public static EventObject GetRootAsEventObject(ByteBuffer _bb, EventObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.InteractionType InteractionTypeEnum { get { int o = __p.__offset(6); return o != 0 ? (GDT.InteractionType)__p.bb.Get(o + __p.bb_pos) : GDT.InteractionType.INTER_None; } }
  public float InteractionRadius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CenterY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string ResourceName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(12); }
  public int CreateHight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FallTime { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateEffect { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CollisionEffect { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CollisionSound { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EffectSync { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.EventObject> CreateEventObject(FlatBufferBuilder builder,
      int ObjectID = 0,
      GDT.InteractionType InteractionTypeEnum = GDT.InteractionType.INTER_None,
      float InteractionRadius = 0.0f,
      float CenterY = 0.0f,
      StringOffset ResourceNameOffset = default(StringOffset),
      int CreateHight = 0,
      int FallTime = 0,
      int CreateEffect = 0,
      int CollisionEffect = 0,
      int CollisionSound = 0,
      bool EffectSync = false) {
    builder.StartTable(11);
    EventObject.AddCollisionSound(builder, CollisionSound);
    EventObject.AddCollisionEffect(builder, CollisionEffect);
    EventObject.AddCreateEffect(builder, CreateEffect);
    EventObject.AddFallTime(builder, FallTime);
    EventObject.AddCreateHight(builder, CreateHight);
    EventObject.AddResourceName(builder, ResourceNameOffset);
    EventObject.AddCenterY(builder, CenterY);
    EventObject.AddInteractionRadius(builder, InteractionRadius);
    EventObject.AddObjectID(builder, ObjectID);
    EventObject.AddEffectSync(builder, EffectSync);
    EventObject.AddInteractionTypeEnum(builder, InteractionTypeEnum);
    return EventObject.EndEventObject(builder);
  }

  public static void StartEventObject(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(0, ObjectID, 0); }
  public static void AddInteractionTypeEnum(FlatBufferBuilder builder, GDT.InteractionType InteractionTypeEnum) { builder.AddByte(1, (byte)InteractionTypeEnum, 0); }
  public static void AddInteractionRadius(FlatBufferBuilder builder, float InteractionRadius) { builder.AddFloat(2, InteractionRadius, 0.0f); }
  public static void AddCenterY(FlatBufferBuilder builder, float CenterY) { builder.AddFloat(3, CenterY, 0.0f); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(4, ResourceNameOffset.Value, 0); }
  public static void AddCreateHight(FlatBufferBuilder builder, int CreateHight) { builder.AddInt(5, CreateHight, 0); }
  public static void AddFallTime(FlatBufferBuilder builder, int FallTime) { builder.AddInt(6, FallTime, 0); }
  public static void AddCreateEffect(FlatBufferBuilder builder, int CreateEffect) { builder.AddInt(7, CreateEffect, 0); }
  public static void AddCollisionEffect(FlatBufferBuilder builder, int CollisionEffect) { builder.AddInt(8, CollisionEffect, 0); }
  public static void AddCollisionSound(FlatBufferBuilder builder, int CollisionSound) { builder.AddInt(9, CollisionSound, 0); }
  public static void AddEffectSync(FlatBufferBuilder builder, bool EffectSync) { builder.AddBool(10, EffectSync, false); }
  public static Offset<GDT.EventObject> EndEventObject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventObject>(o);
  }
  public EventObjectT UnPack() {
    var _o = new EventObjectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventObjectT _o) {
    _o.ObjectID = this.ObjectID;
    _o.InteractionTypeEnum = this.InteractionTypeEnum;
    _o.InteractionRadius = this.InteractionRadius;
    _o.CenterY = this.CenterY;
    _o.ResourceName = this.ResourceName;
    _o.CreateHight = this.CreateHight;
    _o.FallTime = this.FallTime;
    _o.CreateEffect = this.CreateEffect;
    _o.CollisionEffect = this.CollisionEffect;
    _o.CollisionSound = this.CollisionSound;
    _o.EffectSync = this.EffectSync;
  }
  public static Offset<GDT.EventObject> Pack(FlatBufferBuilder builder, EventObjectT _o) {
    if (_o == null) return default(Offset<GDT.EventObject>);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    return CreateEventObject(
      builder,
      _o.ObjectID,
      _o.InteractionTypeEnum,
      _o.InteractionRadius,
      _o.CenterY,
      _ResourceName,
      _o.CreateHight,
      _o.FallTime,
      _o.CreateEffect,
      _o.CollisionEffect,
      _o.CollisionSound,
      _o.EffectSync);
  }
};

public class EventObjectT
{
  public int ObjectID { get; set; }
  public GDT.InteractionType InteractionTypeEnum { get; set; }
  public float InteractionRadius { get; set; }
  public float CenterY { get; set; }
  public string ResourceName { get; set; }
  public int CreateHight { get; set; }
  public int FallTime { get; set; }
  public int CreateEffect { get; set; }
  public int CollisionEffect { get; set; }
  public int CollisionSound { get; set; }
  public bool EffectSync { get; set; }

  public EventObjectT() {
    this.ObjectID = 0;
    this.InteractionTypeEnum = GDT.InteractionType.INTER_None;
    this.InteractionRadius = 0.0f;
    this.CenterY = 0.0f;
    this.ResourceName = null;
    this.CreateHight = 0;
    this.FallTime = 0;
    this.CreateEffect = 0;
    this.CollisionEffect = 0;
    this.CollisionSound = 0;
    this.EffectSync = false;
  }
}

public struct EventObjectTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventObjectTable GetRootAsEventObjectTable(ByteBuffer _bb) { return GetRootAsEventObjectTable(_bb, new EventObjectTable()); }
  public static EventObjectTable GetRootAsEventObjectTable(ByteBuffer _bb, EventObjectTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventObjectTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EventObject? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EventObject?)(new GDT.EventObject()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EventObjectTable> CreateEventObjectTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EventObjectTable.AddRows(builder, RowsOffset);
    return EventObjectTable.EndEventObjectTable(builder);
  }

  public static void StartEventObjectTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EventObject>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EventObject>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EventObjectTable> EndEventObjectTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventObjectTable>(o);
  }
  public EventObjectTableT UnPack() {
    var _o = new EventObjectTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventObjectTableT _o) {
    _o.Rows = new List<GDT.EventObjectT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EventObjectTable> Pack(FlatBufferBuilder builder, EventObjectTableT _o) {
    if (_o == null) return default(Offset<GDT.EventObjectTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EventObject>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EventObject.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEventObjectTable(
      builder,
      _Rows);
  }
};

public class EventObjectTableT
{
  public List<GDT.EventObjectT> Rows { get; set; }

  public EventObjectTableT() {
    this.Rows = null;
  }
}

/// Defined by Event.xlsx
public struct EventDropData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventDropData GetRootAsEventDropData(ByteBuffer _bb) { return GetRootAsEventDropData(_bb, new EventDropData()); }
  public static EventDropData GetRootAsEventDropData(ByteBuffer _bb, EventDropData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventDropData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EventID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ObjectID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardRate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TotalCreateCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateDelays { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateMaintain { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public int CurrencySubTypeID { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.EventDropData> CreateEventDropData(FlatBufferBuilder builder,
      int EventID = 0,
      int ObjectID = 0,
      int RewardRate = 0,
      int TotalCreateCount = 0,
      int CreateCount = 0,
      int CreateDelays = 0,
      int CreateMaintain = 0,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      int CurrencySubTypeID = 0) {
    builder.StartTable(9);
    EventDropData.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    EventDropData.AddCreateMaintain(builder, CreateMaintain);
    EventDropData.AddCreateDelays(builder, CreateDelays);
    EventDropData.AddCreateCount(builder, CreateCount);
    EventDropData.AddTotalCreateCount(builder, TotalCreateCount);
    EventDropData.AddRewardRate(builder, RewardRate);
    EventDropData.AddObjectID(builder, ObjectID);
    EventDropData.AddEventID(builder, EventID);
    EventDropData.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    return EventDropData.EndEventDropData(builder);
  }

  public static void StartEventDropData(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddEventID(FlatBufferBuilder builder, int EventID) { builder.AddInt(0, EventID, 0); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(1, ObjectID, 0); }
  public static void AddRewardRate(FlatBufferBuilder builder, int RewardRate) { builder.AddInt(2, RewardRate, 0); }
  public static void AddTotalCreateCount(FlatBufferBuilder builder, int TotalCreateCount) { builder.AddInt(3, TotalCreateCount, 0); }
  public static void AddCreateCount(FlatBufferBuilder builder, int CreateCount) { builder.AddInt(4, CreateCount, 0); }
  public static void AddCreateDelays(FlatBufferBuilder builder, int CreateDelays) { builder.AddInt(5, CreateDelays, 0); }
  public static void AddCreateMaintain(FlatBufferBuilder builder, int CreateMaintain) { builder.AddInt(6, CreateMaintain, 0); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(7, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, int CurrencySubTypeID) { builder.AddInt(8, CurrencySubTypeID, 0); }
  public static Offset<GDT.EventDropData> EndEventDropData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventDropData>(o);
  }
  public EventDropDataT UnPack() {
    var _o = new EventDropDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventDropDataT _o) {
    _o.EventID = this.EventID;
    _o.ObjectID = this.ObjectID;
    _o.RewardRate = this.RewardRate;
    _o.TotalCreateCount = this.TotalCreateCount;
    _o.CreateCount = this.CreateCount;
    _o.CreateDelays = this.CreateDelays;
    _o.CreateMaintain = this.CreateMaintain;
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
  }
  public static Offset<GDT.EventDropData> Pack(FlatBufferBuilder builder, EventDropDataT _o) {
    if (_o == null) return default(Offset<GDT.EventDropData>);
    return CreateEventDropData(
      builder,
      _o.EventID,
      _o.ObjectID,
      _o.RewardRate,
      _o.TotalCreateCount,
      _o.CreateCount,
      _o.CreateDelays,
      _o.CreateMaintain,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeID);
  }
};

public class EventDropDataT
{
  public int EventID { get; set; }
  public int ObjectID { get; set; }
  public int RewardRate { get; set; }
  public int TotalCreateCount { get; set; }
  public int CreateCount { get; set; }
  public int CreateDelays { get; set; }
  public int CreateMaintain { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public int CurrencySubTypeID { get; set; }

  public EventDropDataT() {
    this.EventID = 0;
    this.ObjectID = 0;
    this.RewardRate = 0;
    this.TotalCreateCount = 0;
    this.CreateCount = 0;
    this.CreateDelays = 0;
    this.CreateMaintain = 0;
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID = 0;
  }
}

public struct EventDropDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventDropDataTable GetRootAsEventDropDataTable(ByteBuffer _bb) { return GetRootAsEventDropDataTable(_bb, new EventDropDataTable()); }
  public static EventDropDataTable GetRootAsEventDropDataTable(ByteBuffer _bb, EventDropDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventDropDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EventDropData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EventDropData?)(new GDT.EventDropData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EventDropDataTable> CreateEventDropDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EventDropDataTable.AddRows(builder, RowsOffset);
    return EventDropDataTable.EndEventDropDataTable(builder);
  }

  public static void StartEventDropDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EventDropData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EventDropData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EventDropDataTable> EndEventDropDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventDropDataTable>(o);
  }
  public EventDropDataTableT UnPack() {
    var _o = new EventDropDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventDropDataTableT _o) {
    _o.Rows = new List<GDT.EventDropDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EventDropDataTable> Pack(FlatBufferBuilder builder, EventDropDataTableT _o) {
    if (_o == null) return default(Offset<GDT.EventDropDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EventDropData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EventDropData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEventDropDataTable(
      builder,
      _Rows);
  }
};

public class EventDropDataTableT
{
  public List<GDT.EventDropDataT> Rows { get; set; }

  public EventDropDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Event.xlsx
public struct EventDropPointData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventDropPointData GetRootAsEventDropPointData(ByteBuffer _bb) { return GetRootAsEventDropPointData(_bb, new EventDropPointData()); }
  public static EventDropPointData GetRootAsEventDropPointData(ByteBuffer _bb, EventDropPointData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventDropPointData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int EventID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartEventDropPointData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddEventID(FlatBufferBuilder builder, int EventID) { builder.AddInt(0, EventID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(1, PositionOffset.Value, 0); }
  public static Offset<GDT.EventDropPointData> EndEventDropPointData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventDropPointData>(o);
  }
  public EventDropPointDataT UnPack() {
    var _o = new EventDropPointDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventDropPointDataT _o) {
    _o.EventID = this.EventID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
  }
  public static Offset<GDT.EventDropPointData> Pack(FlatBufferBuilder builder, EventDropPointDataT _o) {
    if (_o == null) return default(Offset<GDT.EventDropPointData>);
    StartEventDropPointData(builder);
    AddEventID(builder, _o.EventID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    return EndEventDropPointData(builder);
  }
};

public class EventDropPointDataT
{
  public int EventID { get; set; }
  public GDT.vector3T Position { get; set; }

  public EventDropPointDataT() {
    this.EventID = 0;
    this.Position = new GDT.vector3T();
  }
}

public struct EventDropPointDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static EventDropPointDataTable GetRootAsEventDropPointDataTable(ByteBuffer _bb) { return GetRootAsEventDropPointDataTable(_bb, new EventDropPointDataTable()); }
  public static EventDropPointDataTable GetRootAsEventDropPointDataTable(ByteBuffer _bb, EventDropPointDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public EventDropPointDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.EventDropPointData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.EventDropPointData?)(new GDT.EventDropPointData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.EventDropPointDataTable> CreateEventDropPointDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    EventDropPointDataTable.AddRows(builder, RowsOffset);
    return EventDropPointDataTable.EndEventDropPointDataTable(builder);
  }

  public static void StartEventDropPointDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.EventDropPointData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.EventDropPointData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.EventDropPointDataTable> EndEventDropPointDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.EventDropPointDataTable>(o);
  }
  public EventDropPointDataTableT UnPack() {
    var _o = new EventDropPointDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(EventDropPointDataTableT _o) {
    _o.Rows = new List<GDT.EventDropPointDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.EventDropPointDataTable> Pack(FlatBufferBuilder builder, EventDropPointDataTableT _o) {
    if (_o == null) return default(Offset<GDT.EventDropPointDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.EventDropPointData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.EventDropPointData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateEventDropPointDataTable(
      builder,
      _Rows);
  }
};

public class EventDropPointDataTableT
{
  public List<GDT.EventDropPointDataT> Rows { get; set; }

  public EventDropPointDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Friend.xlsx
public struct Friend : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Friend GetRootAsFriend(ByteBuffer _bb) { return GetRootAsFriend(_bb, new Friend()); }
  public static Friend GetRootAsFriend(ByteBuffer _bb, Friend obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Friend __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LikabilityMin { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LikabilityMax { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LikabilityCnt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FriendPointCnt { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.Friend> CreateFriend(FlatBufferBuilder builder,
      int Likability_Min = 0,
      int Likability_Max = 0,
      int LikabilityCnt = 0,
      int FriendPointCnt = 0) {
    builder.StartTable(4);
    Friend.AddFriendPointCnt(builder, FriendPointCnt);
    Friend.AddLikabilityCnt(builder, LikabilityCnt);
    Friend.AddLikabilityMax(builder, Likability_Max);
    Friend.AddLikabilityMin(builder, Likability_Min);
    return Friend.EndFriend(builder);
  }

  public static void StartFriend(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddLikabilityMin(FlatBufferBuilder builder, int LikabilityMin) { builder.AddInt(0, LikabilityMin, 0); }
  public static void AddLikabilityMax(FlatBufferBuilder builder, int LikabilityMax) { builder.AddInt(1, LikabilityMax, 0); }
  public static void AddLikabilityCnt(FlatBufferBuilder builder, int LikabilityCnt) { builder.AddInt(2, LikabilityCnt, 0); }
  public static void AddFriendPointCnt(FlatBufferBuilder builder, int FriendPointCnt) { builder.AddInt(3, FriendPointCnt, 0); }
  public static Offset<GDT.Friend> EndFriend(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Friend>(o);
  }
  public FriendT UnPack() {
    var _o = new FriendT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FriendT _o) {
    _o.LikabilityMin = this.LikabilityMin;
    _o.LikabilityMax = this.LikabilityMax;
    _o.LikabilityCnt = this.LikabilityCnt;
    _o.FriendPointCnt = this.FriendPointCnt;
  }
  public static Offset<GDT.Friend> Pack(FlatBufferBuilder builder, FriendT _o) {
    if (_o == null) return default(Offset<GDT.Friend>);
    return CreateFriend(
      builder,
      _o.LikabilityMin,
      _o.LikabilityMax,
      _o.LikabilityCnt,
      _o.FriendPointCnt);
  }
};

public class FriendT
{
  public int LikabilityMin { get; set; }
  public int LikabilityMax { get; set; }
  public int LikabilityCnt { get; set; }
  public int FriendPointCnt { get; set; }

  public FriendT() {
    this.LikabilityMin = 0;
    this.LikabilityMax = 0;
    this.LikabilityCnt = 0;
    this.FriendPointCnt = 0;
  }
}

public struct FriendTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static FriendTable GetRootAsFriendTable(ByteBuffer _bb) { return GetRootAsFriendTable(_bb, new FriendTable()); }
  public static FriendTable GetRootAsFriendTable(ByteBuffer _bb, FriendTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public FriendTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Friend? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Friend?)(new GDT.Friend()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.FriendTable> CreateFriendTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    FriendTable.AddRows(builder, RowsOffset);
    return FriendTable.EndFriendTable(builder);
  }

  public static void StartFriendTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Friend>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Friend>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.FriendTable> EndFriendTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.FriendTable>(o);
  }
  public FriendTableT UnPack() {
    var _o = new FriendTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(FriendTableT _o) {
    _o.Rows = new List<GDT.FriendT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.FriendTable> Pack(FlatBufferBuilder builder, FriendTableT _o) {
    if (_o == null) return default(Offset<GDT.FriendTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Friend>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Friend.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateFriendTable(
      builder,
      _Rows);
  }
};

public class FriendTableT
{
  public List<GDT.FriendT> Rows { get; set; }

  public FriendTableT() {
    this.Rows = null;
  }
}

/// Defined by Holdem.xlsx
public struct HoldemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HoldemInfo GetRootAsHoldemInfo(ByteBuffer _bb) { return GetRootAsHoldemInfo(_bb, new HoldemInfo()); }
  public static HoldemInfo GetRootAsHoldemInfo(ByteBuffer _bb, HoldemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HoldemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GameName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGameNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGameNameArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.BetLimit BetLimitEnum { get { int o = __p.__offset(8); return o != 0 ? (GDT.BetLimit)__p.bb.Get(o + __p.bb_pos) : GDT.BetLimit.BT_NoLimit; } }
  public int BettingLimitMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Buyin { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinCash { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ante { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SmallBlind { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BigBlind { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Rake { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RakeCap { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepJackpotRate { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepNextJackpotRate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepAirdropRate { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DeleteRate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxEntry { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsPay { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int BetTime { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GetJackpotRate { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string RoomColor { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetRoomColorBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetRoomColorBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetRoomColorArray() { return __p.__vector_as_array<byte>(42); }
  public int EventInfoID { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.HoldemInfo> CreateHoldemInfo(FlatBufferBuilder builder,
      int ID = 0,
      StringOffset GameNameOffset = default(StringOffset),
      GDT.BetLimit BetLimitEnum = GDT.BetLimit.BT_NoLimit,
      int BettingLimitMax = 0,
      int Buyin = 0,
      int MinCash = 0,
      int Ante = 0,
      int SmallBlind = 0,
      int BigBlind = 0,
      int Rake = 0,
      int RakeCap = 0,
      int KeepJackpotRate = 0,
      int KeepNextJackpotRate = 0,
      int KeepAirdropRate = 0,
      int DeleteRate = 0,
      int MaxEntry = 0,
      bool IsPay = false,
      int betTime = 0,
      int GetJackpotRate = 0,
      StringOffset RoomColorOffset = default(StringOffset),
      int EventInfoID = 0) {
    builder.StartTable(21);
    HoldemInfo.AddEventInfoID(builder, EventInfoID);
    HoldemInfo.AddRoomColor(builder, RoomColorOffset);
    HoldemInfo.AddGetJackpotRate(builder, GetJackpotRate);
    HoldemInfo.AddBetTime(builder, betTime);
    HoldemInfo.AddMaxEntry(builder, MaxEntry);
    HoldemInfo.AddDeleteRate(builder, DeleteRate);
    HoldemInfo.AddKeepAirdropRate(builder, KeepAirdropRate);
    HoldemInfo.AddKeepNextJackpotRate(builder, KeepNextJackpotRate);
    HoldemInfo.AddKeepJackpotRate(builder, KeepJackpotRate);
    HoldemInfo.AddRakeCap(builder, RakeCap);
    HoldemInfo.AddRake(builder, Rake);
    HoldemInfo.AddBigBlind(builder, BigBlind);
    HoldemInfo.AddSmallBlind(builder, SmallBlind);
    HoldemInfo.AddAnte(builder, Ante);
    HoldemInfo.AddMinCash(builder, MinCash);
    HoldemInfo.AddBuyin(builder, Buyin);
    HoldemInfo.AddBettingLimitMax(builder, BettingLimitMax);
    HoldemInfo.AddGameName(builder, GameNameOffset);
    HoldemInfo.AddID(builder, ID);
    HoldemInfo.AddIsPay(builder, IsPay);
    HoldemInfo.AddBetLimitEnum(builder, BetLimitEnum);
    return HoldemInfo.EndHoldemInfo(builder);
  }

  public static void StartHoldemInfo(FlatBufferBuilder builder) { builder.StartTable(21); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddGameName(FlatBufferBuilder builder, StringOffset GameNameOffset) { builder.AddOffset(1, GameNameOffset.Value, 0); }
  public static void AddBetLimitEnum(FlatBufferBuilder builder, GDT.BetLimit BetLimitEnum) { builder.AddByte(2, (byte)BetLimitEnum, 0); }
  public static void AddBettingLimitMax(FlatBufferBuilder builder, int BettingLimitMax) { builder.AddInt(3, BettingLimitMax, 0); }
  public static void AddBuyin(FlatBufferBuilder builder, int Buyin) { builder.AddInt(4, Buyin, 0); }
  public static void AddMinCash(FlatBufferBuilder builder, int MinCash) { builder.AddInt(5, MinCash, 0); }
  public static void AddAnte(FlatBufferBuilder builder, int Ante) { builder.AddInt(6, Ante, 0); }
  public static void AddSmallBlind(FlatBufferBuilder builder, int SmallBlind) { builder.AddInt(7, SmallBlind, 0); }
  public static void AddBigBlind(FlatBufferBuilder builder, int BigBlind) { builder.AddInt(8, BigBlind, 0); }
  public static void AddRake(FlatBufferBuilder builder, int Rake) { builder.AddInt(9, Rake, 0); }
  public static void AddRakeCap(FlatBufferBuilder builder, int RakeCap) { builder.AddInt(10, RakeCap, 0); }
  public static void AddKeepJackpotRate(FlatBufferBuilder builder, int KeepJackpotRate) { builder.AddInt(11, KeepJackpotRate, 0); }
  public static void AddKeepNextJackpotRate(FlatBufferBuilder builder, int KeepNextJackpotRate) { builder.AddInt(12, KeepNextJackpotRate, 0); }
  public static void AddKeepAirdropRate(FlatBufferBuilder builder, int KeepAirdropRate) { builder.AddInt(13, KeepAirdropRate, 0); }
  public static void AddDeleteRate(FlatBufferBuilder builder, int DeleteRate) { builder.AddInt(14, DeleteRate, 0); }
  public static void AddMaxEntry(FlatBufferBuilder builder, int MaxEntry) { builder.AddInt(15, MaxEntry, 0); }
  public static void AddIsPay(FlatBufferBuilder builder, bool IsPay) { builder.AddBool(16, IsPay, false); }
  public static void AddBetTime(FlatBufferBuilder builder, int betTime) { builder.AddInt(17, betTime, 0); }
  public static void AddGetJackpotRate(FlatBufferBuilder builder, int GetJackpotRate) { builder.AddInt(18, GetJackpotRate, 0); }
  public static void AddRoomColor(FlatBufferBuilder builder, StringOffset RoomColorOffset) { builder.AddOffset(19, RoomColorOffset.Value, 0); }
  public static void AddEventInfoID(FlatBufferBuilder builder, int EventInfoID) { builder.AddInt(20, EventInfoID, 0); }
  public static Offset<GDT.HoldemInfo> EndHoldemInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.HoldemInfo>(o);
  }
  public HoldemInfoT UnPack() {
    var _o = new HoldemInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HoldemInfoT _o) {
    _o.ID = this.ID;
    _o.GameName = this.GameName;
    _o.BetLimitEnum = this.BetLimitEnum;
    _o.BettingLimitMax = this.BettingLimitMax;
    _o.Buyin = this.Buyin;
    _o.MinCash = this.MinCash;
    _o.Ante = this.Ante;
    _o.SmallBlind = this.SmallBlind;
    _o.BigBlind = this.BigBlind;
    _o.Rake = this.Rake;
    _o.RakeCap = this.RakeCap;
    _o.KeepJackpotRate = this.KeepJackpotRate;
    _o.KeepNextJackpotRate = this.KeepNextJackpotRate;
    _o.KeepAirdropRate = this.KeepAirdropRate;
    _o.DeleteRate = this.DeleteRate;
    _o.MaxEntry = this.MaxEntry;
    _o.IsPay = this.IsPay;
    _o.BetTime = this.BetTime;
    _o.GetJackpotRate = this.GetJackpotRate;
    _o.RoomColor = this.RoomColor;
    _o.EventInfoID = this.EventInfoID;
  }
  public static Offset<GDT.HoldemInfo> Pack(FlatBufferBuilder builder, HoldemInfoT _o) {
    if (_o == null) return default(Offset<GDT.HoldemInfo>);
    var _GameName = _o.GameName == null ? default(StringOffset) : builder.CreateString(_o.GameName);
    var _RoomColor = _o.RoomColor == null ? default(StringOffset) : builder.CreateString(_o.RoomColor);
    return CreateHoldemInfo(
      builder,
      _o.ID,
      _GameName,
      _o.BetLimitEnum,
      _o.BettingLimitMax,
      _o.Buyin,
      _o.MinCash,
      _o.Ante,
      _o.SmallBlind,
      _o.BigBlind,
      _o.Rake,
      _o.RakeCap,
      _o.KeepJackpotRate,
      _o.KeepNextJackpotRate,
      _o.KeepAirdropRate,
      _o.DeleteRate,
      _o.MaxEntry,
      _o.IsPay,
      _o.BetTime,
      _o.GetJackpotRate,
      _RoomColor,
      _o.EventInfoID);
  }
};

public class HoldemInfoT
{
  public int ID { get; set; }
  public string GameName { get; set; }
  public GDT.BetLimit BetLimitEnum { get; set; }
  public int BettingLimitMax { get; set; }
  public int Buyin { get; set; }
  public int MinCash { get; set; }
  public int Ante { get; set; }
  public int SmallBlind { get; set; }
  public int BigBlind { get; set; }
  public int Rake { get; set; }
  public int RakeCap { get; set; }
  public int KeepJackpotRate { get; set; }
  public int KeepNextJackpotRate { get; set; }
  public int KeepAirdropRate { get; set; }
  public int DeleteRate { get; set; }
  public int MaxEntry { get; set; }
  public bool IsPay { get; set; }
  public int BetTime { get; set; }
  public int GetJackpotRate { get; set; }
  public string RoomColor { get; set; }
  public int EventInfoID { get; set; }

  public HoldemInfoT() {
    this.ID = 0;
    this.GameName = null;
    this.BetLimitEnum = GDT.BetLimit.BT_NoLimit;
    this.BettingLimitMax = 0;
    this.Buyin = 0;
    this.MinCash = 0;
    this.Ante = 0;
    this.SmallBlind = 0;
    this.BigBlind = 0;
    this.Rake = 0;
    this.RakeCap = 0;
    this.KeepJackpotRate = 0;
    this.KeepNextJackpotRate = 0;
    this.KeepAirdropRate = 0;
    this.DeleteRate = 0;
    this.MaxEntry = 0;
    this.IsPay = false;
    this.BetTime = 0;
    this.GetJackpotRate = 0;
    this.RoomColor = null;
    this.EventInfoID = 0;
  }
}

public struct HoldemInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HoldemInfoTable GetRootAsHoldemInfoTable(ByteBuffer _bb) { return GetRootAsHoldemInfoTable(_bb, new HoldemInfoTable()); }
  public static HoldemInfoTable GetRootAsHoldemInfoTable(ByteBuffer _bb, HoldemInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HoldemInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.HoldemInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.HoldemInfo?)(new GDT.HoldemInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.HoldemInfoTable> CreateHoldemInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    HoldemInfoTable.AddRows(builder, RowsOffset);
    return HoldemInfoTable.EndHoldemInfoTable(builder);
  }

  public static void StartHoldemInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.HoldemInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.HoldemInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.HoldemInfoTable> EndHoldemInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.HoldemInfoTable>(o);
  }
  public HoldemInfoTableT UnPack() {
    var _o = new HoldemInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HoldemInfoTableT _o) {
    _o.Rows = new List<GDT.HoldemInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.HoldemInfoTable> Pack(FlatBufferBuilder builder, HoldemInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.HoldemInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.HoldemInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.HoldemInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateHoldemInfoTable(
      builder,
      _Rows);
  }
};

public class HoldemInfoTableT
{
  public List<GDT.HoldemInfoT> Rows { get; set; }

  public HoldemInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Holdem.xlsx
public struct HoldemSchedule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HoldemSchedule GetRootAsHoldemSchedule(ByteBuffer _bb) { return GetRootAsHoldemSchedule(_bb, new HoldemSchedule()); }
  public static HoldemSchedule GetRootAsHoldemSchedule(ByteBuffer _bb, HoldemSchedule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HoldemSchedule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ScheduleID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.DayType DayTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.DayType)__p.bb.Get(o + __p.bb_pos) : GDT.DayType.DT_None; } }
  public GDT.time? OpenTime { get { int o = __p.__offset(8); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.time? CloseTime { get { int o = __p.__offset(10); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartHoldemSchedule(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddScheduleID(FlatBufferBuilder builder, int ScheduleID) { builder.AddInt(0, ScheduleID, 0); }
  public static void AddDayTypeID(FlatBufferBuilder builder, GDT.DayType DayTypeID) { builder.AddByte(1, (byte)DayTypeID, 0); }
  public static void AddOpenTime(FlatBufferBuilder builder, Offset<GDT.time> OpenTimeOffset) { builder.AddStruct(2, OpenTimeOffset.Value, 0); }
  public static void AddCloseTime(FlatBufferBuilder builder, Offset<GDT.time> CloseTimeOffset) { builder.AddStruct(3, CloseTimeOffset.Value, 0); }
  public static Offset<GDT.HoldemSchedule> EndHoldemSchedule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.HoldemSchedule>(o);
  }
  public HoldemScheduleT UnPack() {
    var _o = new HoldemScheduleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HoldemScheduleT _o) {
    _o.ScheduleID = this.ScheduleID;
    _o.DayTypeID = this.DayTypeID;
    _o.OpenTime = this.OpenTime.HasValue ? this.OpenTime.Value.UnPack() : null;
    _o.CloseTime = this.CloseTime.HasValue ? this.CloseTime.Value.UnPack() : null;
  }
  public static Offset<GDT.HoldemSchedule> Pack(FlatBufferBuilder builder, HoldemScheduleT _o) {
    if (_o == null) return default(Offset<GDT.HoldemSchedule>);
    StartHoldemSchedule(builder);
    AddScheduleID(builder, _o.ScheduleID);
    AddDayTypeID(builder, _o.DayTypeID);
    AddOpenTime(builder, GDT.time.Pack(builder, _o.OpenTime));
    AddCloseTime(builder, GDT.time.Pack(builder, _o.CloseTime));
    return EndHoldemSchedule(builder);
  }
};

public class HoldemScheduleT
{
  public int ScheduleID { get; set; }
  public GDT.DayType DayTypeID { get; set; }
  public GDT.timeT OpenTime { get; set; }
  public GDT.timeT CloseTime { get; set; }

  public HoldemScheduleT() {
    this.ScheduleID = 0;
    this.DayTypeID = GDT.DayType.DT_None;
    this.OpenTime = new GDT.timeT();
    this.CloseTime = new GDT.timeT();
  }
}

public struct HoldemScheduleTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static HoldemScheduleTable GetRootAsHoldemScheduleTable(ByteBuffer _bb) { return GetRootAsHoldemScheduleTable(_bb, new HoldemScheduleTable()); }
  public static HoldemScheduleTable GetRootAsHoldemScheduleTable(ByteBuffer _bb, HoldemScheduleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public HoldemScheduleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.HoldemSchedule? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.HoldemSchedule?)(new GDT.HoldemSchedule()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.HoldemScheduleTable> CreateHoldemScheduleTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    HoldemScheduleTable.AddRows(builder, RowsOffset);
    return HoldemScheduleTable.EndHoldemScheduleTable(builder);
  }

  public static void StartHoldemScheduleTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.HoldemSchedule>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.HoldemSchedule>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.HoldemScheduleTable> EndHoldemScheduleTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.HoldemScheduleTable>(o);
  }
  public HoldemScheduleTableT UnPack() {
    var _o = new HoldemScheduleTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(HoldemScheduleTableT _o) {
    _o.Rows = new List<GDT.HoldemScheduleT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.HoldemScheduleTable> Pack(FlatBufferBuilder builder, HoldemScheduleTableT _o) {
    if (_o == null) return default(Offset<GDT.HoldemScheduleTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.HoldemSchedule>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.HoldemSchedule.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateHoldemScheduleTable(
      builder,
      _Rows);
  }
};

public class HoldemScheduleTableT
{
  public List<GDT.HoldemScheduleT> Rows { get; set; }

  public HoldemScheduleTableT() {
    this.Rows = null;
  }
}

/// Defined by Inventory.xlsx
public struct InventoryInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InventoryInfo GetRootAsInventoryInfo(ByteBuffer _bb) { return GetRootAsInventoryInfo(_bb, new InventoryInfo()); }
  public static InventoryInfo GetRootAsInventoryInfo(ByteBuffer _bb, InventoryInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InventoryInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.InventoryType InventoryType { get { int o = __p.__offset(6); return o != 0 ? (GDT.InventoryType)__p.bb.Get(o + __p.bb_pos) : GDT.InventoryType.IT_None; } }
  public int TypeSort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Weight { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string InventoryName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInventoryNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetInventoryNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetInventoryNameArray() { return __p.__vector_as_array<byte>(12); }
  public string InventoryIcon { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInventoryIconBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetInventoryIconBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetInventoryIconArray() { return __p.__vector_as_array<byte>(14); }

  public static Offset<GDT.InventoryInfo> CreateInventoryInfo(FlatBufferBuilder builder,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      GDT.InventoryType InventoryType = GDT.InventoryType.IT_None,
      int TypeSort = 0,
      bool Weight = false,
      StringOffset InventoryNameOffset = default(StringOffset),
      StringOffset InventoryIconOffset = default(StringOffset)) {
    builder.StartTable(6);
    InventoryInfo.AddInventoryIcon(builder, InventoryIconOffset);
    InventoryInfo.AddInventoryName(builder, InventoryNameOffset);
    InventoryInfo.AddTypeSort(builder, TypeSort);
    InventoryInfo.AddWeight(builder, Weight);
    InventoryInfo.AddInventoryType(builder, InventoryType);
    InventoryInfo.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    return InventoryInfo.EndInventoryInfo(builder);
  }

  public static void StartInventoryInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(0, (byte)CurrencySubTypeID, 0); }
  public static void AddInventoryType(FlatBufferBuilder builder, GDT.InventoryType InventoryType) { builder.AddByte(1, (byte)InventoryType, 0); }
  public static void AddTypeSort(FlatBufferBuilder builder, int TypeSort) { builder.AddInt(2, TypeSort, 0); }
  public static void AddWeight(FlatBufferBuilder builder, bool Weight) { builder.AddBool(3, Weight, false); }
  public static void AddInventoryName(FlatBufferBuilder builder, StringOffset InventoryNameOffset) { builder.AddOffset(4, InventoryNameOffset.Value, 0); }
  public static void AddInventoryIcon(FlatBufferBuilder builder, StringOffset InventoryIconOffset) { builder.AddOffset(5, InventoryIconOffset.Value, 0); }
  public static Offset<GDT.InventoryInfo> EndInventoryInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.InventoryInfo>(o);
  }
  public InventoryInfoT UnPack() {
    var _o = new InventoryInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InventoryInfoT _o) {
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.InventoryType = this.InventoryType;
    _o.TypeSort = this.TypeSort;
    _o.Weight = this.Weight;
    _o.InventoryName = this.InventoryName;
    _o.InventoryIcon = this.InventoryIcon;
  }
  public static Offset<GDT.InventoryInfo> Pack(FlatBufferBuilder builder, InventoryInfoT _o) {
    if (_o == null) return default(Offset<GDT.InventoryInfo>);
    var _InventoryName = _o.InventoryName == null ? default(StringOffset) : builder.CreateString(_o.InventoryName);
    var _InventoryIcon = _o.InventoryIcon == null ? default(StringOffset) : builder.CreateString(_o.InventoryIcon);
    return CreateInventoryInfo(
      builder,
      _o.CurrencySubTypeID,
      _o.InventoryType,
      _o.TypeSort,
      _o.Weight,
      _InventoryName,
      _InventoryIcon);
  }
};

public class InventoryInfoT
{
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public GDT.InventoryType InventoryType { get; set; }
  public int TypeSort { get; set; }
  public bool Weight { get; set; }
  public string InventoryName { get; set; }
  public string InventoryIcon { get; set; }

  public InventoryInfoT() {
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.InventoryType = GDT.InventoryType.IT_None;
    this.TypeSort = 0;
    this.Weight = false;
    this.InventoryName = null;
    this.InventoryIcon = null;
  }
}

public struct InventoryInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InventoryInfoTable GetRootAsInventoryInfoTable(ByteBuffer _bb) { return GetRootAsInventoryInfoTable(_bb, new InventoryInfoTable()); }
  public static InventoryInfoTable GetRootAsInventoryInfoTable(ByteBuffer _bb, InventoryInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InventoryInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.InventoryInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.InventoryInfo?)(new GDT.InventoryInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.InventoryInfoTable> CreateInventoryInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    InventoryInfoTable.AddRows(builder, RowsOffset);
    return InventoryInfoTable.EndInventoryInfoTable(builder);
  }

  public static void StartInventoryInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.InventoryInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.InventoryInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.InventoryInfoTable> EndInventoryInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.InventoryInfoTable>(o);
  }
  public InventoryInfoTableT UnPack() {
    var _o = new InventoryInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InventoryInfoTableT _o) {
    _o.Rows = new List<GDT.InventoryInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.InventoryInfoTable> Pack(FlatBufferBuilder builder, InventoryInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.InventoryInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.InventoryInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.InventoryInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateInventoryInfoTable(
      builder,
      _Rows);
  }
};

public class InventoryInfoTableT
{
  public List<GDT.InventoryInfoT> Rows { get; set; }

  public InventoryInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Inventory.xlsx
public struct InventoryCategory : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InventoryCategory GetRootAsInventoryCategory(ByteBuffer _bb) { return GetRootAsInventoryCategory(_bb, new InventoryCategory()); }
  public static InventoryCategory GetRootAsInventoryCategory(ByteBuffer _bb, InventoryCategory obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InventoryCategory __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CurrencySubType GroupID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.InventoryCategoryType InventoryCategoryType { get { int o = __p.__offset(6); return o != 0 ? (GDT.InventoryCategoryType)__p.bb.Get(o + __p.bb_pos) : GDT.InventoryCategoryType.ICT_None; } }
  public int ItemAllSort { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MiddleName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMiddleNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMiddleNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMiddleNameArray() { return __p.__vector_as_array<byte>(10); }
  public string MiddleIcon { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMiddleIconBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMiddleIconBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMiddleIconArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.InventoryCategory> CreateInventoryCategory(FlatBufferBuilder builder,
      GDT.CurrencySubType GroupID = GDT.CurrencySubType.CST_None,
      GDT.InventoryCategoryType InventoryCategoryType = GDT.InventoryCategoryType.ICT_None,
      int ItemAllSort = 0,
      StringOffset MiddleNameOffset = default(StringOffset),
      StringOffset MiddleIconOffset = default(StringOffset)) {
    builder.StartTable(5);
    InventoryCategory.AddMiddleIcon(builder, MiddleIconOffset);
    InventoryCategory.AddMiddleName(builder, MiddleNameOffset);
    InventoryCategory.AddItemAllSort(builder, ItemAllSort);
    InventoryCategory.AddInventoryCategoryType(builder, InventoryCategoryType);
    InventoryCategory.AddGroupID(builder, GroupID);
    return InventoryCategory.EndInventoryCategory(builder);
  }

  public static void StartInventoryCategory(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddGroupID(FlatBufferBuilder builder, GDT.CurrencySubType GroupID) { builder.AddByte(0, (byte)GroupID, 0); }
  public static void AddInventoryCategoryType(FlatBufferBuilder builder, GDT.InventoryCategoryType InventoryCategoryType) { builder.AddByte(1, (byte)InventoryCategoryType, 0); }
  public static void AddItemAllSort(FlatBufferBuilder builder, int ItemAllSort) { builder.AddInt(2, ItemAllSort, 0); }
  public static void AddMiddleName(FlatBufferBuilder builder, StringOffset MiddleNameOffset) { builder.AddOffset(3, MiddleNameOffset.Value, 0); }
  public static void AddMiddleIcon(FlatBufferBuilder builder, StringOffset MiddleIconOffset) { builder.AddOffset(4, MiddleIconOffset.Value, 0); }
  public static Offset<GDT.InventoryCategory> EndInventoryCategory(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.InventoryCategory>(o);
  }
  public InventoryCategoryT UnPack() {
    var _o = new InventoryCategoryT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InventoryCategoryT _o) {
    _o.GroupID = this.GroupID;
    _o.InventoryCategoryType = this.InventoryCategoryType;
    _o.ItemAllSort = this.ItemAllSort;
    _o.MiddleName = this.MiddleName;
    _o.MiddleIcon = this.MiddleIcon;
  }
  public static Offset<GDT.InventoryCategory> Pack(FlatBufferBuilder builder, InventoryCategoryT _o) {
    if (_o == null) return default(Offset<GDT.InventoryCategory>);
    var _MiddleName = _o.MiddleName == null ? default(StringOffset) : builder.CreateString(_o.MiddleName);
    var _MiddleIcon = _o.MiddleIcon == null ? default(StringOffset) : builder.CreateString(_o.MiddleIcon);
    return CreateInventoryCategory(
      builder,
      _o.GroupID,
      _o.InventoryCategoryType,
      _o.ItemAllSort,
      _MiddleName,
      _MiddleIcon);
  }
};

public class InventoryCategoryT
{
  public GDT.CurrencySubType GroupID { get; set; }
  public GDT.InventoryCategoryType InventoryCategoryType { get; set; }
  public int ItemAllSort { get; set; }
  public string MiddleName { get; set; }
  public string MiddleIcon { get; set; }

  public InventoryCategoryT() {
    this.GroupID = GDT.CurrencySubType.CST_None;
    this.InventoryCategoryType = GDT.InventoryCategoryType.ICT_None;
    this.ItemAllSort = 0;
    this.MiddleName = null;
    this.MiddleIcon = null;
  }
}

public struct InventoryCategoryTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InventoryCategoryTable GetRootAsInventoryCategoryTable(ByteBuffer _bb) { return GetRootAsInventoryCategoryTable(_bb, new InventoryCategoryTable()); }
  public static InventoryCategoryTable GetRootAsInventoryCategoryTable(ByteBuffer _bb, InventoryCategoryTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InventoryCategoryTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.InventoryCategory? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.InventoryCategory?)(new GDT.InventoryCategory()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.InventoryCategoryTable> CreateInventoryCategoryTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    InventoryCategoryTable.AddRows(builder, RowsOffset);
    return InventoryCategoryTable.EndInventoryCategoryTable(builder);
  }

  public static void StartInventoryCategoryTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.InventoryCategory>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.InventoryCategory>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.InventoryCategoryTable> EndInventoryCategoryTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.InventoryCategoryTable>(o);
  }
  public InventoryCategoryTableT UnPack() {
    var _o = new InventoryCategoryTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InventoryCategoryTableT _o) {
    _o.Rows = new List<GDT.InventoryCategoryT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.InventoryCategoryTable> Pack(FlatBufferBuilder builder, InventoryCategoryTableT _o) {
    if (_o == null) return default(Offset<GDT.InventoryCategoryTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.InventoryCategory>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.InventoryCategory.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateInventoryCategoryTable(
      builder,
      _Rows);
  }
};

public class InventoryCategoryTableT
{
  public List<GDT.InventoryCategoryT> Rows { get; set; }

  public InventoryCategoryTableT() {
    this.Rows = null;
  }
}

/// Defined by Inventory.xlsx
public struct InventoryCategoryDetail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InventoryCategoryDetail GetRootAsInventoryCategoryDetail(ByteBuffer _bb) { return GetRootAsInventoryCategoryDetail(_bb, new InventoryCategoryDetail()); }
  public static InventoryCategoryDetail GetRootAsInventoryCategoryDetail(ByteBuffer _bb, InventoryCategoryDetail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InventoryCategoryDetail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.InventoryCategoryType InventoryCategoryType { get { int o = __p.__offset(4); return o != 0 ? (GDT.InventoryCategoryType)__p.bb.Get(o + __p.bb_pos) : GDT.InventoryCategoryType.ICT_None; } }
  public GDT.ItemSubType ItemSubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ItemSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemSubType.IST_None; } }

  public static Offset<GDT.InventoryCategoryDetail> CreateInventoryCategoryDetail(FlatBufferBuilder builder,
      GDT.InventoryCategoryType InventoryCategoryType = GDT.InventoryCategoryType.ICT_None,
      GDT.ItemSubType ItemSubTypeID = GDT.ItemSubType.IST_None) {
    builder.StartTable(2);
    InventoryCategoryDetail.AddItemSubTypeID(builder, ItemSubTypeID);
    InventoryCategoryDetail.AddInventoryCategoryType(builder, InventoryCategoryType);
    return InventoryCategoryDetail.EndInventoryCategoryDetail(builder);
  }

  public static void StartInventoryCategoryDetail(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddInventoryCategoryType(FlatBufferBuilder builder, GDT.InventoryCategoryType InventoryCategoryType) { builder.AddByte(0, (byte)InventoryCategoryType, 0); }
  public static void AddItemSubTypeID(FlatBufferBuilder builder, GDT.ItemSubType ItemSubTypeID) { builder.AddByte(1, (byte)ItemSubTypeID, 0); }
  public static Offset<GDT.InventoryCategoryDetail> EndInventoryCategoryDetail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.InventoryCategoryDetail>(o);
  }
  public InventoryCategoryDetailT UnPack() {
    var _o = new InventoryCategoryDetailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InventoryCategoryDetailT _o) {
    _o.InventoryCategoryType = this.InventoryCategoryType;
    _o.ItemSubTypeID = this.ItemSubTypeID;
  }
  public static Offset<GDT.InventoryCategoryDetail> Pack(FlatBufferBuilder builder, InventoryCategoryDetailT _o) {
    if (_o == null) return default(Offset<GDT.InventoryCategoryDetail>);
    return CreateInventoryCategoryDetail(
      builder,
      _o.InventoryCategoryType,
      _o.ItemSubTypeID);
  }
};

public class InventoryCategoryDetailT
{
  public GDT.InventoryCategoryType InventoryCategoryType { get; set; }
  public GDT.ItemSubType ItemSubTypeID { get; set; }

  public InventoryCategoryDetailT() {
    this.InventoryCategoryType = GDT.InventoryCategoryType.ICT_None;
    this.ItemSubTypeID = GDT.ItemSubType.IST_None;
  }
}

public struct InventoryCategoryDetailTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static InventoryCategoryDetailTable GetRootAsInventoryCategoryDetailTable(ByteBuffer _bb) { return GetRootAsInventoryCategoryDetailTable(_bb, new InventoryCategoryDetailTable()); }
  public static InventoryCategoryDetailTable GetRootAsInventoryCategoryDetailTable(ByteBuffer _bb, InventoryCategoryDetailTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public InventoryCategoryDetailTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.InventoryCategoryDetail? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.InventoryCategoryDetail?)(new GDT.InventoryCategoryDetail()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.InventoryCategoryDetailTable> CreateInventoryCategoryDetailTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    InventoryCategoryDetailTable.AddRows(builder, RowsOffset);
    return InventoryCategoryDetailTable.EndInventoryCategoryDetailTable(builder);
  }

  public static void StartInventoryCategoryDetailTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.InventoryCategoryDetail>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.InventoryCategoryDetail>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.InventoryCategoryDetailTable> EndInventoryCategoryDetailTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.InventoryCategoryDetailTable>(o);
  }
  public InventoryCategoryDetailTableT UnPack() {
    var _o = new InventoryCategoryDetailTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(InventoryCategoryDetailTableT _o) {
    _o.Rows = new List<GDT.InventoryCategoryDetailT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.InventoryCategoryDetailTable> Pack(FlatBufferBuilder builder, InventoryCategoryDetailTableT _o) {
    if (_o == null) return default(Offset<GDT.InventoryCategoryDetailTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.InventoryCategoryDetail>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.InventoryCategoryDetail.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateInventoryCategoryDetailTable(
      builder,
      _Rows);
  }
};

public class InventoryCategoryDetailTableT
{
  public List<GDT.InventoryCategoryDetailT> Rows { get; set; }

  public InventoryCategoryDetailTableT() {
    this.Rows = null;
  }
}

/// Defined by Item.xlsx
public struct ItemInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemInfo GetRootAsItemInfo(ByteBuffer _bb) { return GetRootAsItemInfo(_bb, new ItemInfo()); }
  public static ItemInfo GetRootAsItemInfo(ByteBuffer _bb, ItemInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ItemName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetItemNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetItemNameArray() { return __p.__vector_as_array<byte>(6); }
  public string ItemDesc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetItemDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetItemDescArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.ItemMainType ItemMainTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.ItemMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemMainType.IMT_None; } }
  public GDT.ItemSubType ItemSubTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.ItemSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemSubType.IST_None; } }
  public GDT.ItemDetailsType ItemDetailsTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.ItemDetailsType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemDetailsType.IDT_None; } }
  public GDT.ItemGradeType ItemGradeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.ItemGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemGradeType.IGT_None; } }
  public GDT.CharacterType CharacterTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.CharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.CharacterType.CT_None; } }
  public int Weight { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemStackMax { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ApplicationType ApplicationTypeID { get { int o = __p.__offset(24); return o != 0 ? (GDT.ApplicationType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplicationType.AT_Account; } }
  public GDT.StorageType Storage { get { int o = __p.__offset(26); return o != 0 ? (GDT.StorageType)__p.bb.Get(o + __p.bb_pos) : GDT.StorageType.ST_None; } }
  public bool QuickSlot { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string ItemIconName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemIconNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetItemIconNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetItemIconNameArray() { return __p.__vector_as_array<byte>(30); }
  public string ItemPrefabName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemPrefabNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetItemPrefabNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetItemPrefabNameArray() { return __p.__vector_as_array<byte>(32); }
  public string ItemMeshName { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemMeshNameBytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetItemMeshNameBytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetItemMeshNameArray() { return __p.__vector_as_array<byte>(34); }
  public GDT.NFTPublishType NFTPublishTypeID { get { int o = __p.__offset(36); return o != 0 ? (GDT.NFTPublishType)__p.bb.Get(o + __p.bb_pos) : GDT.NFTPublishType.NPT_None; } }
  public bool NFTCheck { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int NFTTokenID { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string NFTTokenAddressID { get { int o = __p.__offset(42); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNFTTokenAddressIDBytes() { return __p.__vector_as_span<byte>(42, 1); }
#else
  public ArraySegment<byte>? GetNFTTokenAddressIDBytes() { return __p.__vector_as_arraysegment(42); }
#endif
  public byte[] GetNFTTokenAddressIDArray() { return __p.__vector_as_array<byte>(42); }
  public bool ItemSaleCheck { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SaleValue { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.datetime? ItemPeriodStart { get { int o = __p.__offset(48); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? ItemPeriodEnd { get { int o = __p.__offset(50); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool GetAlarm { get { int o = __p.__offset(52); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static void StartItemInfo(FlatBufferBuilder builder) { builder.StartTable(25); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(0, ItemID, 0); }
  public static void AddItemName(FlatBufferBuilder builder, StringOffset ItemNameOffset) { builder.AddOffset(1, ItemNameOffset.Value, 0); }
  public static void AddItemDesc(FlatBufferBuilder builder, StringOffset ItemDescOffset) { builder.AddOffset(2, ItemDescOffset.Value, 0); }
  public static void AddItemMainTypeID(FlatBufferBuilder builder, GDT.ItemMainType ItemMainTypeID) { builder.AddByte(3, (byte)ItemMainTypeID, 0); }
  public static void AddItemSubTypeID(FlatBufferBuilder builder, GDT.ItemSubType ItemSubTypeID) { builder.AddByte(4, (byte)ItemSubTypeID, 0); }
  public static void AddItemDetailsTypeID(FlatBufferBuilder builder, GDT.ItemDetailsType ItemDetailsTypeID) { builder.AddByte(5, (byte)ItemDetailsTypeID, 0); }
  public static void AddItemGradeID(FlatBufferBuilder builder, GDT.ItemGradeType ItemGradeID) { builder.AddByte(6, (byte)ItemGradeID, 0); }
  public static void AddCharacterTypeID(FlatBufferBuilder builder, GDT.CharacterType CharacterTypeID) { builder.AddByte(7, (byte)CharacterTypeID, 0); }
  public static void AddWeight(FlatBufferBuilder builder, int Weight) { builder.AddInt(8, Weight, 0); }
  public static void AddItemStackMax(FlatBufferBuilder builder, int ItemStackMax) { builder.AddInt(9, ItemStackMax, 0); }
  public static void AddApplicationTypeID(FlatBufferBuilder builder, GDT.ApplicationType ApplicationTypeID) { builder.AddByte(10, (byte)ApplicationTypeID, 0); }
  public static void AddStorage(FlatBufferBuilder builder, GDT.StorageType Storage) { builder.AddByte(11, (byte)Storage, 0); }
  public static void AddQuickSlot(FlatBufferBuilder builder, bool QuickSlot) { builder.AddBool(12, QuickSlot, false); }
  public static void AddItemIconName(FlatBufferBuilder builder, StringOffset ItemIconNameOffset) { builder.AddOffset(13, ItemIconNameOffset.Value, 0); }
  public static void AddItemPrefabName(FlatBufferBuilder builder, StringOffset ItemPrefabNameOffset) { builder.AddOffset(14, ItemPrefabNameOffset.Value, 0); }
  public static void AddItemMeshName(FlatBufferBuilder builder, StringOffset ItemMeshNameOffset) { builder.AddOffset(15, ItemMeshNameOffset.Value, 0); }
  public static void AddNFTPublishTypeID(FlatBufferBuilder builder, GDT.NFTPublishType NFTPublishTypeID) { builder.AddByte(16, (byte)NFTPublishTypeID, 0); }
  public static void AddNFTCheck(FlatBufferBuilder builder, bool NFTCheck) { builder.AddBool(17, NFTCheck, false); }
  public static void AddNFTTokenID(FlatBufferBuilder builder, int NFTTokenID) { builder.AddInt(18, NFTTokenID, 0); }
  public static void AddNFTTokenAddressID(FlatBufferBuilder builder, StringOffset NFTTokenAddressIDOffset) { builder.AddOffset(19, NFTTokenAddressIDOffset.Value, 0); }
  public static void AddItemSaleCheck(FlatBufferBuilder builder, bool ItemSaleCheck) { builder.AddBool(20, ItemSaleCheck, false); }
  public static void AddSaleValue(FlatBufferBuilder builder, int SaleValue) { builder.AddInt(21, SaleValue, 0); }
  public static void AddItemPeriodStart(FlatBufferBuilder builder, Offset<GDT.datetime> ItemPeriodStartOffset) { builder.AddStruct(22, ItemPeriodStartOffset.Value, 0); }
  public static void AddItemPeriodEnd(FlatBufferBuilder builder, Offset<GDT.datetime> ItemPeriodEndOffset) { builder.AddStruct(23, ItemPeriodEndOffset.Value, 0); }
  public static void AddGetAlarm(FlatBufferBuilder builder, bool GetAlarm) { builder.AddBool(24, GetAlarm, false); }
  public static Offset<GDT.ItemInfo> EndItemInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemInfo>(o);
  }
  public ItemInfoT UnPack() {
    var _o = new ItemInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemInfoT _o) {
    _o.ItemID = this.ItemID;
    _o.ItemName = this.ItemName;
    _o.ItemDesc = this.ItemDesc;
    _o.ItemMainTypeID = this.ItemMainTypeID;
    _o.ItemSubTypeID = this.ItemSubTypeID;
    _o.ItemDetailsTypeID = this.ItemDetailsTypeID;
    _o.ItemGradeID = this.ItemGradeID;
    _o.CharacterTypeID = this.CharacterTypeID;
    _o.Weight = this.Weight;
    _o.ItemStackMax = this.ItemStackMax;
    _o.ApplicationTypeID = this.ApplicationTypeID;
    _o.Storage = this.Storage;
    _o.QuickSlot = this.QuickSlot;
    _o.ItemIconName = this.ItemIconName;
    _o.ItemPrefabName = this.ItemPrefabName;
    _o.ItemMeshName = this.ItemMeshName;
    _o.NFTPublishTypeID = this.NFTPublishTypeID;
    _o.NFTCheck = this.NFTCheck;
    _o.NFTTokenID = this.NFTTokenID;
    _o.NFTTokenAddressID = this.NFTTokenAddressID;
    _o.ItemSaleCheck = this.ItemSaleCheck;
    _o.SaleValue = this.SaleValue;
    _o.ItemPeriodStart = this.ItemPeriodStart.HasValue ? this.ItemPeriodStart.Value.UnPack() : null;
    _o.ItemPeriodEnd = this.ItemPeriodEnd.HasValue ? this.ItemPeriodEnd.Value.UnPack() : null;
    _o.GetAlarm = this.GetAlarm;
  }
  public static Offset<GDT.ItemInfo> Pack(FlatBufferBuilder builder, ItemInfoT _o) {
    if (_o == null) return default(Offset<GDT.ItemInfo>);
    var _ItemName = _o.ItemName == null ? default(StringOffset) : builder.CreateString(_o.ItemName);
    var _ItemDesc = _o.ItemDesc == null ? default(StringOffset) : builder.CreateString(_o.ItemDesc);
    var _ItemIconName = _o.ItemIconName == null ? default(StringOffset) : builder.CreateString(_o.ItemIconName);
    var _ItemPrefabName = _o.ItemPrefabName == null ? default(StringOffset) : builder.CreateString(_o.ItemPrefabName);
    var _ItemMeshName = _o.ItemMeshName == null ? default(StringOffset) : builder.CreateString(_o.ItemMeshName);
    var _NFTTokenAddressID = _o.NFTTokenAddressID == null ? default(StringOffset) : builder.CreateString(_o.NFTTokenAddressID);
    StartItemInfo(builder);
    AddItemID(builder, _o.ItemID);
    AddItemName(builder, _ItemName);
    AddItemDesc(builder, _ItemDesc);
    AddItemMainTypeID(builder, _o.ItemMainTypeID);
    AddItemSubTypeID(builder, _o.ItemSubTypeID);
    AddItemDetailsTypeID(builder, _o.ItemDetailsTypeID);
    AddItemGradeID(builder, _o.ItemGradeID);
    AddCharacterTypeID(builder, _o.CharacterTypeID);
    AddWeight(builder, _o.Weight);
    AddItemStackMax(builder, _o.ItemStackMax);
    AddApplicationTypeID(builder, _o.ApplicationTypeID);
    AddStorage(builder, _o.Storage);
    AddQuickSlot(builder, _o.QuickSlot);
    AddItemIconName(builder, _ItemIconName);
    AddItemPrefabName(builder, _ItemPrefabName);
    AddItemMeshName(builder, _ItemMeshName);
    AddNFTPublishTypeID(builder, _o.NFTPublishTypeID);
    AddNFTCheck(builder, _o.NFTCheck);
    AddNFTTokenID(builder, _o.NFTTokenID);
    AddNFTTokenAddressID(builder, _NFTTokenAddressID);
    AddItemSaleCheck(builder, _o.ItemSaleCheck);
    AddSaleValue(builder, _o.SaleValue);
    AddItemPeriodStart(builder, GDT.datetime.Pack(builder, _o.ItemPeriodStart));
    AddItemPeriodEnd(builder, GDT.datetime.Pack(builder, _o.ItemPeriodEnd));
    AddGetAlarm(builder, _o.GetAlarm);
    return EndItemInfo(builder);
  }
};

public class ItemInfoT
{
  public int ItemID { get; set; }
  public string ItemName { get; set; }
  public string ItemDesc { get; set; }
  public GDT.ItemMainType ItemMainTypeID { get; set; }
  public GDT.ItemSubType ItemSubTypeID { get; set; }
  public GDT.ItemDetailsType ItemDetailsTypeID { get; set; }
  public GDT.ItemGradeType ItemGradeID { get; set; }
  public GDT.CharacterType CharacterTypeID { get; set; }
  public int Weight { get; set; }
  public int ItemStackMax { get; set; }
  public GDT.ApplicationType ApplicationTypeID { get; set; }
  public GDT.StorageType Storage { get; set; }
  public bool QuickSlot { get; set; }
  public string ItemIconName { get; set; }
  public string ItemPrefabName { get; set; }
  public string ItemMeshName { get; set; }
  public GDT.NFTPublishType NFTPublishTypeID { get; set; }
  public bool NFTCheck { get; set; }
  public int NFTTokenID { get; set; }
  public string NFTTokenAddressID { get; set; }
  public bool ItemSaleCheck { get; set; }
  public int SaleValue { get; set; }
  public GDT.datetimeT ItemPeriodStart { get; set; }
  public GDT.datetimeT ItemPeriodEnd { get; set; }
  public bool GetAlarm { get; set; }

  public ItemInfoT() {
    this.ItemID = 0;
    this.ItemName = null;
    this.ItemDesc = null;
    this.ItemMainTypeID = GDT.ItemMainType.IMT_None;
    this.ItemSubTypeID = GDT.ItemSubType.IST_None;
    this.ItemDetailsTypeID = GDT.ItemDetailsType.IDT_None;
    this.ItemGradeID = GDT.ItemGradeType.IGT_None;
    this.CharacterTypeID = GDT.CharacterType.CT_None;
    this.Weight = 0;
    this.ItemStackMax = 0;
    this.ApplicationTypeID = GDT.ApplicationType.AT_Account;
    this.Storage = GDT.StorageType.ST_None;
    this.QuickSlot = false;
    this.ItemIconName = null;
    this.ItemPrefabName = null;
    this.ItemMeshName = null;
    this.NFTPublishTypeID = GDT.NFTPublishType.NPT_None;
    this.NFTCheck = false;
    this.NFTTokenID = 0;
    this.NFTTokenAddressID = null;
    this.ItemSaleCheck = false;
    this.SaleValue = 0;
    this.ItemPeriodStart = new GDT.datetimeT();
    this.ItemPeriodEnd = new GDT.datetimeT();
    this.GetAlarm = false;
  }
}

public struct ItemInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemInfoTable GetRootAsItemInfoTable(ByteBuffer _bb) { return GetRootAsItemInfoTable(_bb, new ItemInfoTable()); }
  public static ItemInfoTable GetRootAsItemInfoTable(ByteBuffer _bb, ItemInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemInfo?)(new GDT.ItemInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemInfoTable> CreateItemInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemInfoTable.AddRows(builder, RowsOffset);
    return ItemInfoTable.EndItemInfoTable(builder);
  }

  public static void StartItemInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemInfoTable> EndItemInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemInfoTable>(o);
  }
  public ItemInfoTableT UnPack() {
    var _o = new ItemInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemInfoTableT _o) {
    _o.Rows = new List<GDT.ItemInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemInfoTable> Pack(FlatBufferBuilder builder, ItemInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemInfoTable(
      builder,
      _Rows);
  }
};

public class ItemInfoTableT
{
  public List<GDT.ItemInfoT> Rows { get; set; }

  public ItemInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Item.xlsx
public struct ItemGrade : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemGrade GetRootAsItemGrade(ByteBuffer _bb) { return GetRootAsItemGrade(_bb, new ItemGrade()); }
  public static ItemGrade GetRootAsItemGrade(ByteBuffer _bb, ItemGrade obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemGrade __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemGradeType ItemGradeTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.ItemGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemGradeType.IGT_None; } }
  public string GradeIcon { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGradeIconBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGradeIconBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGradeIconArray() { return __p.__vector_as_array<byte>(6); }
  public string GradeColor { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGradeColorBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGradeColorBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGradeColorArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GDT.ItemGrade> CreateItemGrade(FlatBufferBuilder builder,
      GDT.ItemGradeType ItemGradeTypeID = GDT.ItemGradeType.IGT_None,
      StringOffset GradeIconOffset = default(StringOffset),
      StringOffset GradeColorOffset = default(StringOffset)) {
    builder.StartTable(3);
    ItemGrade.AddGradeColor(builder, GradeColorOffset);
    ItemGrade.AddGradeIcon(builder, GradeIconOffset);
    ItemGrade.AddItemGradeTypeID(builder, ItemGradeTypeID);
    return ItemGrade.EndItemGrade(builder);
  }

  public static void StartItemGrade(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddItemGradeTypeID(FlatBufferBuilder builder, GDT.ItemGradeType ItemGradeTypeID) { builder.AddByte(0, (byte)ItemGradeTypeID, 0); }
  public static void AddGradeIcon(FlatBufferBuilder builder, StringOffset GradeIconOffset) { builder.AddOffset(1, GradeIconOffset.Value, 0); }
  public static void AddGradeColor(FlatBufferBuilder builder, StringOffset GradeColorOffset) { builder.AddOffset(2, GradeColorOffset.Value, 0); }
  public static Offset<GDT.ItemGrade> EndItemGrade(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemGrade>(o);
  }
  public ItemGradeT UnPack() {
    var _o = new ItemGradeT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemGradeT _o) {
    _o.ItemGradeTypeID = this.ItemGradeTypeID;
    _o.GradeIcon = this.GradeIcon;
    _o.GradeColor = this.GradeColor;
  }
  public static Offset<GDT.ItemGrade> Pack(FlatBufferBuilder builder, ItemGradeT _o) {
    if (_o == null) return default(Offset<GDT.ItemGrade>);
    var _GradeIcon = _o.GradeIcon == null ? default(StringOffset) : builder.CreateString(_o.GradeIcon);
    var _GradeColor = _o.GradeColor == null ? default(StringOffset) : builder.CreateString(_o.GradeColor);
    return CreateItemGrade(
      builder,
      _o.ItemGradeTypeID,
      _GradeIcon,
      _GradeColor);
  }
};

public class ItemGradeT
{
  public GDT.ItemGradeType ItemGradeTypeID { get; set; }
  public string GradeIcon { get; set; }
  public string GradeColor { get; set; }

  public ItemGradeT() {
    this.ItemGradeTypeID = GDT.ItemGradeType.IGT_None;
    this.GradeIcon = null;
    this.GradeColor = null;
  }
}

public struct ItemGradeTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemGradeTable GetRootAsItemGradeTable(ByteBuffer _bb) { return GetRootAsItemGradeTable(_bb, new ItemGradeTable()); }
  public static ItemGradeTable GetRootAsItemGradeTable(ByteBuffer _bb, ItemGradeTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemGradeTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemGrade? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemGrade?)(new GDT.ItemGrade()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemGradeTable> CreateItemGradeTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemGradeTable.AddRows(builder, RowsOffset);
    return ItemGradeTable.EndItemGradeTable(builder);
  }

  public static void StartItemGradeTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemGrade>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemGrade>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemGradeTable> EndItemGradeTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemGradeTable>(o);
  }
  public ItemGradeTableT UnPack() {
    var _o = new ItemGradeTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemGradeTableT _o) {
    _o.Rows = new List<GDT.ItemGradeT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemGradeTable> Pack(FlatBufferBuilder builder, ItemGradeTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemGradeTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemGrade>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemGrade.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemGradeTable(
      builder,
      _Rows);
  }
};

public class ItemGradeTableT
{
  public List<GDT.ItemGradeT> Rows { get; set; }

  public ItemGradeTableT() {
    this.Rows = null;
  }
}

/// Defined by Item.xlsx
public struct ItemEquip : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemEquip GetRootAsItemEquip(ByteBuffer _bb) { return GetRootAsItemEquip(_bb, new ItemEquip()); }
  public static ItemEquip GetRootAsItemEquip(ByteBuffer _bb, ItemEquip obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemEquip __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReqTier { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReqLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EquipSlot EquipSlot { get { int o = __p.__offset(10); return o != 0 ? (GDT.EquipSlot)__p.bb.Get(o + __p.bb_pos) : GDT.EquipSlot.ES_None; } }
  public GDT.CustomizingSubType CustomizingSubTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.CustomizingSubType)__p.bb.Get(o + __p.bb_pos) : GDT.CustomizingSubType.CST_None; } }
  public GDT.EquipType EquipTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.EquipType)__p.bb.Get(o + __p.bb_pos) : GDT.EquipType.ET_None; } }
  public bool LvUpEnable { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool GradeEnable { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int OptionSlotCount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreviousGradeItemID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextGradeItemID { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.ItemEquip> CreateItemEquip(FlatBufferBuilder builder,
      int ItemID = 0,
      int ReqTier = 0,
      int ReqLevel = 0,
      GDT.EquipSlot EquipSlot = GDT.EquipSlot.ES_None,
      GDT.CustomizingSubType CustomizingSubTypeID = GDT.CustomizingSubType.CST_None,
      GDT.EquipType EquipTypeID = GDT.EquipType.ET_None,
      bool LvUpEnable = false,
      bool GradeEnable = false,
      int OptionSlotCount = 0,
      int PreviousGradeItemID = 0,
      int NextGradeItemID = 0) {
    builder.StartTable(11);
    ItemEquip.AddNextGradeItemID(builder, NextGradeItemID);
    ItemEquip.AddPreviousGradeItemID(builder, PreviousGradeItemID);
    ItemEquip.AddOptionSlotCount(builder, OptionSlotCount);
    ItemEquip.AddReqLevel(builder, ReqLevel);
    ItemEquip.AddReqTier(builder, ReqTier);
    ItemEquip.AddItemID(builder, ItemID);
    ItemEquip.AddGradeEnable(builder, GradeEnable);
    ItemEquip.AddLvUpEnable(builder, LvUpEnable);
    ItemEquip.AddEquipTypeID(builder, EquipTypeID);
    ItemEquip.AddCustomizingSubTypeID(builder, CustomizingSubTypeID);
    ItemEquip.AddEquipSlot(builder, EquipSlot);
    return ItemEquip.EndItemEquip(builder);
  }

  public static void StartItemEquip(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(0, ItemID, 0); }
  public static void AddReqTier(FlatBufferBuilder builder, int ReqTier) { builder.AddInt(1, ReqTier, 0); }
  public static void AddReqLevel(FlatBufferBuilder builder, int ReqLevel) { builder.AddInt(2, ReqLevel, 0); }
  public static void AddEquipSlot(FlatBufferBuilder builder, GDT.EquipSlot EquipSlot) { builder.AddByte(3, (byte)EquipSlot, 0); }
  public static void AddCustomizingSubTypeID(FlatBufferBuilder builder, GDT.CustomizingSubType CustomizingSubTypeID) { builder.AddByte(4, (byte)CustomizingSubTypeID, 0); }
  public static void AddEquipTypeID(FlatBufferBuilder builder, GDT.EquipType EquipTypeID) { builder.AddByte(5, (byte)EquipTypeID, 0); }
  public static void AddLvUpEnable(FlatBufferBuilder builder, bool LvUpEnable) { builder.AddBool(6, LvUpEnable, false); }
  public static void AddGradeEnable(FlatBufferBuilder builder, bool GradeEnable) { builder.AddBool(7, GradeEnable, false); }
  public static void AddOptionSlotCount(FlatBufferBuilder builder, int OptionSlotCount) { builder.AddInt(8, OptionSlotCount, 0); }
  public static void AddPreviousGradeItemID(FlatBufferBuilder builder, int PreviousGradeItemID) { builder.AddInt(9, PreviousGradeItemID, 0); }
  public static void AddNextGradeItemID(FlatBufferBuilder builder, int NextGradeItemID) { builder.AddInt(10, NextGradeItemID, 0); }
  public static Offset<GDT.ItemEquip> EndItemEquip(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemEquip>(o);
  }
  public ItemEquipT UnPack() {
    var _o = new ItemEquipT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemEquipT _o) {
    _o.ItemID = this.ItemID;
    _o.ReqTier = this.ReqTier;
    _o.ReqLevel = this.ReqLevel;
    _o.EquipSlot = this.EquipSlot;
    _o.CustomizingSubTypeID = this.CustomizingSubTypeID;
    _o.EquipTypeID = this.EquipTypeID;
    _o.LvUpEnable = this.LvUpEnable;
    _o.GradeEnable = this.GradeEnable;
    _o.OptionSlotCount = this.OptionSlotCount;
    _o.PreviousGradeItemID = this.PreviousGradeItemID;
    _o.NextGradeItemID = this.NextGradeItemID;
  }
  public static Offset<GDT.ItemEquip> Pack(FlatBufferBuilder builder, ItemEquipT _o) {
    if (_o == null) return default(Offset<GDT.ItemEquip>);
    return CreateItemEquip(
      builder,
      _o.ItemID,
      _o.ReqTier,
      _o.ReqLevel,
      _o.EquipSlot,
      _o.CustomizingSubTypeID,
      _o.EquipTypeID,
      _o.LvUpEnable,
      _o.GradeEnable,
      _o.OptionSlotCount,
      _o.PreviousGradeItemID,
      _o.NextGradeItemID);
  }
};

public class ItemEquipT
{
  public int ItemID { get; set; }
  public int ReqTier { get; set; }
  public int ReqLevel { get; set; }
  public GDT.EquipSlot EquipSlot { get; set; }
  public GDT.CustomizingSubType CustomizingSubTypeID { get; set; }
  public GDT.EquipType EquipTypeID { get; set; }
  public bool LvUpEnable { get; set; }
  public bool GradeEnable { get; set; }
  public int OptionSlotCount { get; set; }
  public int PreviousGradeItemID { get; set; }
  public int NextGradeItemID { get; set; }

  public ItemEquipT() {
    this.ItemID = 0;
    this.ReqTier = 0;
    this.ReqLevel = 0;
    this.EquipSlot = GDT.EquipSlot.ES_None;
    this.CustomizingSubTypeID = GDT.CustomizingSubType.CST_None;
    this.EquipTypeID = GDT.EquipType.ET_None;
    this.LvUpEnable = false;
    this.GradeEnable = false;
    this.OptionSlotCount = 0;
    this.PreviousGradeItemID = 0;
    this.NextGradeItemID = 0;
  }
}

public struct ItemEquipTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemEquipTable GetRootAsItemEquipTable(ByteBuffer _bb) { return GetRootAsItemEquipTable(_bb, new ItemEquipTable()); }
  public static ItemEquipTable GetRootAsItemEquipTable(ByteBuffer _bb, ItemEquipTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemEquipTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemEquip? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemEquip?)(new GDT.ItemEquip()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemEquipTable> CreateItemEquipTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemEquipTable.AddRows(builder, RowsOffset);
    return ItemEquipTable.EndItemEquipTable(builder);
  }

  public static void StartItemEquipTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemEquip>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemEquip>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemEquipTable> EndItemEquipTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemEquipTable>(o);
  }
  public ItemEquipTableT UnPack() {
    var _o = new ItemEquipTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemEquipTableT _o) {
    _o.Rows = new List<GDT.ItemEquipT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemEquipTable> Pack(FlatBufferBuilder builder, ItemEquipTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemEquipTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemEquip>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemEquip.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemEquipTable(
      builder,
      _Rows);
  }
};

public class ItemEquipTableT
{
  public List<GDT.ItemEquipT> Rows { get; set; }

  public ItemEquipTableT() {
    this.Rows = null;
  }
}

/// Defined by Item.xlsx
public struct ItemResource : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemResource GetRootAsItemResource(ByteBuffer _bb) { return GetRootAsItemResource(_bb, new ItemResource()); }
  public static ItemResource GetRootAsItemResource(ByteBuffer _bb, ItemResource obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemResource __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterForm { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ItemPrefabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemPrefabNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetItemPrefabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetItemPrefabNameArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GDT.ItemResource> CreateItemResource(FlatBufferBuilder builder,
      int ItemID = 0,
      int CharacterForm = 0,
      StringOffset ItemPrefabNameOffset = default(StringOffset)) {
    builder.StartTable(3);
    ItemResource.AddItemPrefabName(builder, ItemPrefabNameOffset);
    ItemResource.AddCharacterForm(builder, CharacterForm);
    ItemResource.AddItemID(builder, ItemID);
    return ItemResource.EndItemResource(builder);
  }

  public static void StartItemResource(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(0, ItemID, 0); }
  public static void AddCharacterForm(FlatBufferBuilder builder, int CharacterForm) { builder.AddInt(1, CharacterForm, 0); }
  public static void AddItemPrefabName(FlatBufferBuilder builder, StringOffset ItemPrefabNameOffset) { builder.AddOffset(2, ItemPrefabNameOffset.Value, 0); }
  public static Offset<GDT.ItemResource> EndItemResource(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemResource>(o);
  }
  public ItemResourceT UnPack() {
    var _o = new ItemResourceT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemResourceT _o) {
    _o.ItemID = this.ItemID;
    _o.CharacterForm = this.CharacterForm;
    _o.ItemPrefabName = this.ItemPrefabName;
  }
  public static Offset<GDT.ItemResource> Pack(FlatBufferBuilder builder, ItemResourceT _o) {
    if (_o == null) return default(Offset<GDT.ItemResource>);
    var _ItemPrefabName = _o.ItemPrefabName == null ? default(StringOffset) : builder.CreateString(_o.ItemPrefabName);
    return CreateItemResource(
      builder,
      _o.ItemID,
      _o.CharacterForm,
      _ItemPrefabName);
  }
};

public class ItemResourceT
{
  public int ItemID { get; set; }
  public int CharacterForm { get; set; }
  public string ItemPrefabName { get; set; }

  public ItemResourceT() {
    this.ItemID = 0;
    this.CharacterForm = 0;
    this.ItemPrefabName = null;
  }
}

public struct ItemResourceTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemResourceTable GetRootAsItemResourceTable(ByteBuffer _bb) { return GetRootAsItemResourceTable(_bb, new ItemResourceTable()); }
  public static ItemResourceTable GetRootAsItemResourceTable(ByteBuffer _bb, ItemResourceTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemResourceTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemResource? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemResource?)(new GDT.ItemResource()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemResourceTable> CreateItemResourceTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemResourceTable.AddRows(builder, RowsOffset);
    return ItemResourceTable.EndItemResourceTable(builder);
  }

  public static void StartItemResourceTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemResource>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemResource>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemResourceTable> EndItemResourceTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemResourceTable>(o);
  }
  public ItemResourceTableT UnPack() {
    var _o = new ItemResourceTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemResourceTableT _o) {
    _o.Rows = new List<GDT.ItemResourceT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemResourceTable> Pack(FlatBufferBuilder builder, ItemResourceTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemResourceTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemResource>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemResource.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemResourceTable(
      builder,
      _Rows);
  }
};

public class ItemResourceTableT
{
  public List<GDT.ItemResourceT> Rows { get; set; }

  public ItemResourceTableT() {
    this.Rows = null;
  }
}

/// Defined by Item.xlsx
public struct ItemUsing : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemUsing GetRootAsItemUsing(ByteBuffer _bb) { return GetRootAsItemUsing(_bb, new ItemUsing()); }
  public static ItemUsing GetRootAsItemUsing(ByteBuffer _bb, ItemUsing obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemUsing __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ReqLevel { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoolTimeGroup { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoolTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ItemEffectDesc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemEffectDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetItemEffectDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetItemEffectDescArray() { return __p.__vector_as_array<byte>(12); }
  public int BuffID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CalculationType StatID { get { int o = __p.__offset(16); return o != 0 ? (GDT.CalculationType)__p.bb.Get(o + __p.bb_pos) : GDT.CalculationType.none; } }
  public int StatValue { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectID { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EffectSync { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int BoxTypeValue { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ItemBoxAnimationName { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetItemBoxAnimationNameBytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetItemBoxAnimationNameBytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetItemBoxAnimationNameArray() { return __p.__vector_as_array<byte>(26); }
  public int EmotionID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.ItemUsing> CreateItemUsing(FlatBufferBuilder builder,
      int ItemID = 0,
      int ReqLevel = 0,
      int CoolTimeGroup = 0,
      int CoolTime = 0,
      StringOffset ItemEffectDescOffset = default(StringOffset),
      int BuffID = 0,
      GDT.CalculationType StatID = GDT.CalculationType.none,
      int StatValue = 0,
      int EffectID = 0,
      bool EffectSync = false,
      int BoxTypeValue = 0,
      StringOffset ItemBoxAnimationNameOffset = default(StringOffset),
      int EmotionID = 0) {
    builder.StartTable(13);
    ItemUsing.AddEmotionID(builder, EmotionID);
    ItemUsing.AddItemBoxAnimationName(builder, ItemBoxAnimationNameOffset);
    ItemUsing.AddBoxTypeValue(builder, BoxTypeValue);
    ItemUsing.AddEffectID(builder, EffectID);
    ItemUsing.AddStatValue(builder, StatValue);
    ItemUsing.AddBuffID(builder, BuffID);
    ItemUsing.AddItemEffectDesc(builder, ItemEffectDescOffset);
    ItemUsing.AddCoolTime(builder, CoolTime);
    ItemUsing.AddCoolTimeGroup(builder, CoolTimeGroup);
    ItemUsing.AddReqLevel(builder, ReqLevel);
    ItemUsing.AddItemID(builder, ItemID);
    ItemUsing.AddEffectSync(builder, EffectSync);
    ItemUsing.AddStatID(builder, StatID);
    return ItemUsing.EndItemUsing(builder);
  }

  public static void StartItemUsing(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(0, ItemID, 0); }
  public static void AddReqLevel(FlatBufferBuilder builder, int ReqLevel) { builder.AddInt(1, ReqLevel, 0); }
  public static void AddCoolTimeGroup(FlatBufferBuilder builder, int CoolTimeGroup) { builder.AddInt(2, CoolTimeGroup, 0); }
  public static void AddCoolTime(FlatBufferBuilder builder, int CoolTime) { builder.AddInt(3, CoolTime, 0); }
  public static void AddItemEffectDesc(FlatBufferBuilder builder, StringOffset ItemEffectDescOffset) { builder.AddOffset(4, ItemEffectDescOffset.Value, 0); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(5, BuffID, 0); }
  public static void AddStatID(FlatBufferBuilder builder, GDT.CalculationType StatID) { builder.AddByte(6, (byte)StatID, 0); }
  public static void AddStatValue(FlatBufferBuilder builder, int StatValue) { builder.AddInt(7, StatValue, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(8, EffectID, 0); }
  public static void AddEffectSync(FlatBufferBuilder builder, bool EffectSync) { builder.AddBool(9, EffectSync, false); }
  public static void AddBoxTypeValue(FlatBufferBuilder builder, int BoxTypeValue) { builder.AddInt(10, BoxTypeValue, 0); }
  public static void AddItemBoxAnimationName(FlatBufferBuilder builder, StringOffset ItemBoxAnimationNameOffset) { builder.AddOffset(11, ItemBoxAnimationNameOffset.Value, 0); }
  public static void AddEmotionID(FlatBufferBuilder builder, int EmotionID) { builder.AddInt(12, EmotionID, 0); }
  public static Offset<GDT.ItemUsing> EndItemUsing(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemUsing>(o);
  }
  public ItemUsingT UnPack() {
    var _o = new ItemUsingT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemUsingT _o) {
    _o.ItemID = this.ItemID;
    _o.ReqLevel = this.ReqLevel;
    _o.CoolTimeGroup = this.CoolTimeGroup;
    _o.CoolTime = this.CoolTime;
    _o.ItemEffectDesc = this.ItemEffectDesc;
    _o.BuffID = this.BuffID;
    _o.StatID = this.StatID;
    _o.StatValue = this.StatValue;
    _o.EffectID = this.EffectID;
    _o.EffectSync = this.EffectSync;
    _o.BoxTypeValue = this.BoxTypeValue;
    _o.ItemBoxAnimationName = this.ItemBoxAnimationName;
    _o.EmotionID = this.EmotionID;
  }
  public static Offset<GDT.ItemUsing> Pack(FlatBufferBuilder builder, ItemUsingT _o) {
    if (_o == null) return default(Offset<GDT.ItemUsing>);
    var _ItemEffectDesc = _o.ItemEffectDesc == null ? default(StringOffset) : builder.CreateString(_o.ItemEffectDesc);
    var _ItemBoxAnimationName = _o.ItemBoxAnimationName == null ? default(StringOffset) : builder.CreateString(_o.ItemBoxAnimationName);
    return CreateItemUsing(
      builder,
      _o.ItemID,
      _o.ReqLevel,
      _o.CoolTimeGroup,
      _o.CoolTime,
      _ItemEffectDesc,
      _o.BuffID,
      _o.StatID,
      _o.StatValue,
      _o.EffectID,
      _o.EffectSync,
      _o.BoxTypeValue,
      _ItemBoxAnimationName,
      _o.EmotionID);
  }
};

public class ItemUsingT
{
  public int ItemID { get; set; }
  public int ReqLevel { get; set; }
  public int CoolTimeGroup { get; set; }
  public int CoolTime { get; set; }
  public string ItemEffectDesc { get; set; }
  public int BuffID { get; set; }
  public GDT.CalculationType StatID { get; set; }
  public int StatValue { get; set; }
  public int EffectID { get; set; }
  public bool EffectSync { get; set; }
  public int BoxTypeValue { get; set; }
  public string ItemBoxAnimationName { get; set; }
  public int EmotionID { get; set; }

  public ItemUsingT() {
    this.ItemID = 0;
    this.ReqLevel = 0;
    this.CoolTimeGroup = 0;
    this.CoolTime = 0;
    this.ItemEffectDesc = null;
    this.BuffID = 0;
    this.StatID = GDT.CalculationType.none;
    this.StatValue = 0;
    this.EffectID = 0;
    this.EffectSync = false;
    this.BoxTypeValue = 0;
    this.ItemBoxAnimationName = null;
    this.EmotionID = 0;
  }
}

public struct ItemUsingTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemUsingTable GetRootAsItemUsingTable(ByteBuffer _bb) { return GetRootAsItemUsingTable(_bb, new ItemUsingTable()); }
  public static ItemUsingTable GetRootAsItemUsingTable(ByteBuffer _bb, ItemUsingTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemUsingTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemUsing? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemUsing?)(new GDT.ItemUsing()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemUsingTable> CreateItemUsingTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemUsingTable.AddRows(builder, RowsOffset);
    return ItemUsingTable.EndItemUsingTable(builder);
  }

  public static void StartItemUsingTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemUsing>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemUsing>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemUsingTable> EndItemUsingTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemUsingTable>(o);
  }
  public ItemUsingTableT UnPack() {
    var _o = new ItemUsingTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemUsingTableT _o) {
    _o.Rows = new List<GDT.ItemUsingT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemUsingTable> Pack(FlatBufferBuilder builder, ItemUsingTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemUsingTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemUsing>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemUsing.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemUsingTable(
      builder,
      _Rows);
  }
};

public class ItemUsingTableT
{
  public List<GDT.ItemUsingT> Rows { get; set; }

  public ItemUsingTableT() {
    this.Rows = null;
  }
}

/// Defined by ItemFunction.xlsx
public struct ItemGrowthInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemGrowthInfo GetRootAsItemGrowthInfo(ByteBuffer _bb) { return GetRootAsItemGrowthInfo(_bb, new ItemGrowthInfo()); }
  public static ItemGrowthInfo GetRootAsItemGrowthInfo(ByteBuffer _bb, ItemGrowthInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemGrowthInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemSubType GroupID { get { int o = __p.__offset(4); return o != 0 ? (GDT.ItemSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemSubType.IST_None; } }
  public GDT.ItemGradeType ItemGradeTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ItemGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemGradeType.IGT_None; } }
  public string GradeFrameIcon { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGradeFrameIconBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGradeFrameIconBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGradeFrameIconArray() { return __p.__vector_as_array<byte>(8); }
  public int ItemMaxLevel { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ItemSubType GradeUpMaterialItemSubTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.ItemSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemSubType.IST_None; } }
  public int PreservationItemID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreservationItemCnt { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType GradeUpCurrencyMainTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType GradeCurrencyTypeID { get { int o = __p.__offset(20); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int GradeCurrencyCost { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AddOptionItemID { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AddOptionItemCnt { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType AddOptionCurrencyMainTypeID { get { int o = __p.__offset(28); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType AddOptionCurrencyTypeID { get { int o = __p.__offset(30); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int AddOptionCurrencyCost { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ChangeOptionItemID { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ChangeOptionItemCnt { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType ChangeOptionCurrencyMainTypeID { get { int o = __p.__offset(38); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType ChangeOptionCurrencyTypeID { get { int o = __p.__offset(40); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int ChangeOptionCurrencyCost { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.ItemGrowthInfo> CreateItemGrowthInfo(FlatBufferBuilder builder,
      GDT.ItemSubType GroupID = GDT.ItemSubType.IST_None,
      GDT.ItemGradeType ItemGradeTypeID = GDT.ItemGradeType.IGT_None,
      StringOffset GradeFrameIconOffset = default(StringOffset),
      int ItemMaxLevel = 0,
      GDT.ItemSubType GradeUpMaterialItemSubTypeID = GDT.ItemSubType.IST_None,
      int PreservationItemID = 0,
      int PreservationItemCnt = 0,
      GDT.CurrencyMainType GradeUpCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType GradeCurrencyTypeID = GDT.CurrencySubType.CST_None,
      int GradeCurrencyCost = 0,
      int AddOptionItemID = 0,
      int AddOptionItemCnt = 0,
      GDT.CurrencyMainType AddOptionCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType AddOptionCurrencyTypeID = GDT.CurrencySubType.CST_None,
      int AddOptionCurrencyCost = 0,
      int ChangeOptionItemID = 0,
      int ChangeOptionItemCnt = 0,
      GDT.CurrencyMainType ChangeOptionCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType ChangeOptionCurrencyTypeID = GDT.CurrencySubType.CST_None,
      int ChangeOptionCurrencyCost = 0) {
    builder.StartTable(20);
    ItemGrowthInfo.AddChangeOptionCurrencyCost(builder, ChangeOptionCurrencyCost);
    ItemGrowthInfo.AddChangeOptionItemCnt(builder, ChangeOptionItemCnt);
    ItemGrowthInfo.AddChangeOptionItemID(builder, ChangeOptionItemID);
    ItemGrowthInfo.AddAddOptionCurrencyCost(builder, AddOptionCurrencyCost);
    ItemGrowthInfo.AddAddOptionItemCnt(builder, AddOptionItemCnt);
    ItemGrowthInfo.AddAddOptionItemID(builder, AddOptionItemID);
    ItemGrowthInfo.AddGradeCurrencyCost(builder, GradeCurrencyCost);
    ItemGrowthInfo.AddPreservationItemCnt(builder, PreservationItemCnt);
    ItemGrowthInfo.AddPreservationItemID(builder, PreservationItemID);
    ItemGrowthInfo.AddItemMaxLevel(builder, ItemMaxLevel);
    ItemGrowthInfo.AddGradeFrameIcon(builder, GradeFrameIconOffset);
    ItemGrowthInfo.AddChangeOptionCurrencyTypeID(builder, ChangeOptionCurrencyTypeID);
    ItemGrowthInfo.AddChangeOptionCurrencyMainTypeID(builder, ChangeOptionCurrencyMainTypeID);
    ItemGrowthInfo.AddAddOptionCurrencyTypeID(builder, AddOptionCurrencyTypeID);
    ItemGrowthInfo.AddAddOptionCurrencyMainTypeID(builder, AddOptionCurrencyMainTypeID);
    ItemGrowthInfo.AddGradeCurrencyTypeID(builder, GradeCurrencyTypeID);
    ItemGrowthInfo.AddGradeUpCurrencyMainTypeID(builder, GradeUpCurrencyMainTypeID);
    ItemGrowthInfo.AddGradeUpMaterialItemSubTypeID(builder, GradeUpMaterialItemSubTypeID);
    ItemGrowthInfo.AddItemGradeTypeID(builder, ItemGradeTypeID);
    ItemGrowthInfo.AddGroupID(builder, GroupID);
    return ItemGrowthInfo.EndItemGrowthInfo(builder);
  }

  public static void StartItemGrowthInfo(FlatBufferBuilder builder) { builder.StartTable(20); }
  public static void AddGroupID(FlatBufferBuilder builder, GDT.ItemSubType GroupID) { builder.AddByte(0, (byte)GroupID, 0); }
  public static void AddItemGradeTypeID(FlatBufferBuilder builder, GDT.ItemGradeType ItemGradeTypeID) { builder.AddByte(1, (byte)ItemGradeTypeID, 0); }
  public static void AddGradeFrameIcon(FlatBufferBuilder builder, StringOffset GradeFrameIconOffset) { builder.AddOffset(2, GradeFrameIconOffset.Value, 0); }
  public static void AddItemMaxLevel(FlatBufferBuilder builder, int ItemMaxLevel) { builder.AddInt(3, ItemMaxLevel, 0); }
  public static void AddGradeUpMaterialItemSubTypeID(FlatBufferBuilder builder, GDT.ItemSubType GradeUpMaterialItemSubTypeID) { builder.AddByte(4, (byte)GradeUpMaterialItemSubTypeID, 0); }
  public static void AddPreservationItemID(FlatBufferBuilder builder, int PreservationItemID) { builder.AddInt(5, PreservationItemID, 0); }
  public static void AddPreservationItemCnt(FlatBufferBuilder builder, int PreservationItemCnt) { builder.AddInt(6, PreservationItemCnt, 0); }
  public static void AddGradeUpCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType GradeUpCurrencyMainTypeID) { builder.AddByte(7, (byte)GradeUpCurrencyMainTypeID, 0); }
  public static void AddGradeCurrencyTypeID(FlatBufferBuilder builder, GDT.CurrencySubType GradeCurrencyTypeID) { builder.AddByte(8, (byte)GradeCurrencyTypeID, 0); }
  public static void AddGradeCurrencyCost(FlatBufferBuilder builder, int GradeCurrencyCost) { builder.AddInt(9, GradeCurrencyCost, 0); }
  public static void AddAddOptionItemID(FlatBufferBuilder builder, int AddOptionItemID) { builder.AddInt(10, AddOptionItemID, 0); }
  public static void AddAddOptionItemCnt(FlatBufferBuilder builder, int AddOptionItemCnt) { builder.AddInt(11, AddOptionItemCnt, 0); }
  public static void AddAddOptionCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType AddOptionCurrencyMainTypeID) { builder.AddByte(12, (byte)AddOptionCurrencyMainTypeID, 0); }
  public static void AddAddOptionCurrencyTypeID(FlatBufferBuilder builder, GDT.CurrencySubType AddOptionCurrencyTypeID) { builder.AddByte(13, (byte)AddOptionCurrencyTypeID, 0); }
  public static void AddAddOptionCurrencyCost(FlatBufferBuilder builder, int AddOptionCurrencyCost) { builder.AddInt(14, AddOptionCurrencyCost, 0); }
  public static void AddChangeOptionItemID(FlatBufferBuilder builder, int ChangeOptionItemID) { builder.AddInt(15, ChangeOptionItemID, 0); }
  public static void AddChangeOptionItemCnt(FlatBufferBuilder builder, int ChangeOptionItemCnt) { builder.AddInt(16, ChangeOptionItemCnt, 0); }
  public static void AddChangeOptionCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType ChangeOptionCurrencyMainTypeID) { builder.AddByte(17, (byte)ChangeOptionCurrencyMainTypeID, 0); }
  public static void AddChangeOptionCurrencyTypeID(FlatBufferBuilder builder, GDT.CurrencySubType ChangeOptionCurrencyTypeID) { builder.AddByte(18, (byte)ChangeOptionCurrencyTypeID, 0); }
  public static void AddChangeOptionCurrencyCost(FlatBufferBuilder builder, int ChangeOptionCurrencyCost) { builder.AddInt(19, ChangeOptionCurrencyCost, 0); }
  public static Offset<GDT.ItemGrowthInfo> EndItemGrowthInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemGrowthInfo>(o);
  }
  public ItemGrowthInfoT UnPack() {
    var _o = new ItemGrowthInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemGrowthInfoT _o) {
    _o.GroupID = this.GroupID;
    _o.ItemGradeTypeID = this.ItemGradeTypeID;
    _o.GradeFrameIcon = this.GradeFrameIcon;
    _o.ItemMaxLevel = this.ItemMaxLevel;
    _o.GradeUpMaterialItemSubTypeID = this.GradeUpMaterialItemSubTypeID;
    _o.PreservationItemID = this.PreservationItemID;
    _o.PreservationItemCnt = this.PreservationItemCnt;
    _o.GradeUpCurrencyMainTypeID = this.GradeUpCurrencyMainTypeID;
    _o.GradeCurrencyTypeID = this.GradeCurrencyTypeID;
    _o.GradeCurrencyCost = this.GradeCurrencyCost;
    _o.AddOptionItemID = this.AddOptionItemID;
    _o.AddOptionItemCnt = this.AddOptionItemCnt;
    _o.AddOptionCurrencyMainTypeID = this.AddOptionCurrencyMainTypeID;
    _o.AddOptionCurrencyTypeID = this.AddOptionCurrencyTypeID;
    _o.AddOptionCurrencyCost = this.AddOptionCurrencyCost;
    _o.ChangeOptionItemID = this.ChangeOptionItemID;
    _o.ChangeOptionItemCnt = this.ChangeOptionItemCnt;
    _o.ChangeOptionCurrencyMainTypeID = this.ChangeOptionCurrencyMainTypeID;
    _o.ChangeOptionCurrencyTypeID = this.ChangeOptionCurrencyTypeID;
    _o.ChangeOptionCurrencyCost = this.ChangeOptionCurrencyCost;
  }
  public static Offset<GDT.ItemGrowthInfo> Pack(FlatBufferBuilder builder, ItemGrowthInfoT _o) {
    if (_o == null) return default(Offset<GDT.ItemGrowthInfo>);
    var _GradeFrameIcon = _o.GradeFrameIcon == null ? default(StringOffset) : builder.CreateString(_o.GradeFrameIcon);
    return CreateItemGrowthInfo(
      builder,
      _o.GroupID,
      _o.ItemGradeTypeID,
      _GradeFrameIcon,
      _o.ItemMaxLevel,
      _o.GradeUpMaterialItemSubTypeID,
      _o.PreservationItemID,
      _o.PreservationItemCnt,
      _o.GradeUpCurrencyMainTypeID,
      _o.GradeCurrencyTypeID,
      _o.GradeCurrencyCost,
      _o.AddOptionItemID,
      _o.AddOptionItemCnt,
      _o.AddOptionCurrencyMainTypeID,
      _o.AddOptionCurrencyTypeID,
      _o.AddOptionCurrencyCost,
      _o.ChangeOptionItemID,
      _o.ChangeOptionItemCnt,
      _o.ChangeOptionCurrencyMainTypeID,
      _o.ChangeOptionCurrencyTypeID,
      _o.ChangeOptionCurrencyCost);
  }
};

public class ItemGrowthInfoT
{
  public GDT.ItemSubType GroupID { get; set; }
  public GDT.ItemGradeType ItemGradeTypeID { get; set; }
  public string GradeFrameIcon { get; set; }
  public int ItemMaxLevel { get; set; }
  public GDT.ItemSubType GradeUpMaterialItemSubTypeID { get; set; }
  public int PreservationItemID { get; set; }
  public int PreservationItemCnt { get; set; }
  public GDT.CurrencyMainType GradeUpCurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType GradeCurrencyTypeID { get; set; }
  public int GradeCurrencyCost { get; set; }
  public int AddOptionItemID { get; set; }
  public int AddOptionItemCnt { get; set; }
  public GDT.CurrencyMainType AddOptionCurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType AddOptionCurrencyTypeID { get; set; }
  public int AddOptionCurrencyCost { get; set; }
  public int ChangeOptionItemID { get; set; }
  public int ChangeOptionItemCnt { get; set; }
  public GDT.CurrencyMainType ChangeOptionCurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType ChangeOptionCurrencyTypeID { get; set; }
  public int ChangeOptionCurrencyCost { get; set; }

  public ItemGrowthInfoT() {
    this.GroupID = GDT.ItemSubType.IST_None;
    this.ItemGradeTypeID = GDT.ItemGradeType.IGT_None;
    this.GradeFrameIcon = null;
    this.ItemMaxLevel = 0;
    this.GradeUpMaterialItemSubTypeID = GDT.ItemSubType.IST_None;
    this.PreservationItemID = 0;
    this.PreservationItemCnt = 0;
    this.GradeUpCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.GradeCurrencyTypeID = GDT.CurrencySubType.CST_None;
    this.GradeCurrencyCost = 0;
    this.AddOptionItemID = 0;
    this.AddOptionItemCnt = 0;
    this.AddOptionCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.AddOptionCurrencyTypeID = GDT.CurrencySubType.CST_None;
    this.AddOptionCurrencyCost = 0;
    this.ChangeOptionItemID = 0;
    this.ChangeOptionItemCnt = 0;
    this.ChangeOptionCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.ChangeOptionCurrencyTypeID = GDT.CurrencySubType.CST_None;
    this.ChangeOptionCurrencyCost = 0;
  }
}

public struct ItemGrowthInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemGrowthInfoTable GetRootAsItemGrowthInfoTable(ByteBuffer _bb) { return GetRootAsItemGrowthInfoTable(_bb, new ItemGrowthInfoTable()); }
  public static ItemGrowthInfoTable GetRootAsItemGrowthInfoTable(ByteBuffer _bb, ItemGrowthInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemGrowthInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemGrowthInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemGrowthInfo?)(new GDT.ItemGrowthInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemGrowthInfoTable> CreateItemGrowthInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemGrowthInfoTable.AddRows(builder, RowsOffset);
    return ItemGrowthInfoTable.EndItemGrowthInfoTable(builder);
  }

  public static void StartItemGrowthInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemGrowthInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemGrowthInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemGrowthInfoTable> EndItemGrowthInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemGrowthInfoTable>(o);
  }
  public ItemGrowthInfoTableT UnPack() {
    var _o = new ItemGrowthInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemGrowthInfoTableT _o) {
    _o.Rows = new List<GDT.ItemGrowthInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemGrowthInfoTable> Pack(FlatBufferBuilder builder, ItemGrowthInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemGrowthInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemGrowthInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemGrowthInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemGrowthInfoTable(
      builder,
      _Rows);
  }
};

public class ItemGrowthInfoTableT
{
  public List<GDT.ItemGrowthInfoT> Rows { get; set; }

  public ItemGrowthInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by ItemFunction.xlsx
public struct ItemGrowthData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemGrowthData GetRootAsItemGrowthData(ByteBuffer _bb) { return GetRootAsItemGrowthData(_bb, new ItemGrowthData()); }
  public static ItemGrowthData GetRootAsItemGrowthData(ByteBuffer _bb, ItemGrowthData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemGrowthData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemSubType GroupID { get { int o = __p.__offset(4); return o != 0 ? (GDT.ItemSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemSubType.IST_None; } }
  public GDT.ItemGradeType GradeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ItemGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemGradeType.IGT_None; } }
  public int ItemLevel { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelExpMax { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelUpMaterialItemExp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LevelUpMaterialSameItemExp { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType LevelUpCurrencyMainTypeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType LevelUpCurrencyTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int LevelUpCurrencyCost { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GradeUpGreatFailureProb { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GradeUpFailedProb { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GradeUpSuccessProb { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.ItemGrowthData> CreateItemGrowthData(FlatBufferBuilder builder,
      GDT.ItemSubType GroupID = GDT.ItemSubType.IST_None,
      GDT.ItemGradeType GradeID = GDT.ItemGradeType.IGT_None,
      int ItemLevel = 0,
      int LevelExpMax = 0,
      int LevelUpMaterialItemExp = 0,
      int LevelUpMaterialSameItemExp = 0,
      GDT.CurrencyMainType LevelUpCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType LevelUpCurrencyTypeID = GDT.CurrencySubType.CST_None,
      int LevelUpCurrencyCost = 0,
      int GradeUpGreatFailureProb = 0,
      int GradeUpFailedProb = 0,
      int GradeUpSuccessProb = 0) {
    builder.StartTable(12);
    ItemGrowthData.AddGradeUpSuccessProb(builder, GradeUpSuccessProb);
    ItemGrowthData.AddGradeUpFailedProb(builder, GradeUpFailedProb);
    ItemGrowthData.AddGradeUpGreatFailureProb(builder, GradeUpGreatFailureProb);
    ItemGrowthData.AddLevelUpCurrencyCost(builder, LevelUpCurrencyCost);
    ItemGrowthData.AddLevelUpMaterialSameItemExp(builder, LevelUpMaterialSameItemExp);
    ItemGrowthData.AddLevelUpMaterialItemExp(builder, LevelUpMaterialItemExp);
    ItemGrowthData.AddLevelExpMax(builder, LevelExpMax);
    ItemGrowthData.AddItemLevel(builder, ItemLevel);
    ItemGrowthData.AddLevelUpCurrencyTypeID(builder, LevelUpCurrencyTypeID);
    ItemGrowthData.AddLevelUpCurrencyMainTypeID(builder, LevelUpCurrencyMainTypeID);
    ItemGrowthData.AddGradeID(builder, GradeID);
    ItemGrowthData.AddGroupID(builder, GroupID);
    return ItemGrowthData.EndItemGrowthData(builder);
  }

  public static void StartItemGrowthData(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddGroupID(FlatBufferBuilder builder, GDT.ItemSubType GroupID) { builder.AddByte(0, (byte)GroupID, 0); }
  public static void AddGradeID(FlatBufferBuilder builder, GDT.ItemGradeType GradeID) { builder.AddByte(1, (byte)GradeID, 0); }
  public static void AddItemLevel(FlatBufferBuilder builder, int ItemLevel) { builder.AddInt(2, ItemLevel, 0); }
  public static void AddLevelExpMax(FlatBufferBuilder builder, int LevelExpMax) { builder.AddInt(3, LevelExpMax, 0); }
  public static void AddLevelUpMaterialItemExp(FlatBufferBuilder builder, int LevelUpMaterialItemExp) { builder.AddInt(4, LevelUpMaterialItemExp, 0); }
  public static void AddLevelUpMaterialSameItemExp(FlatBufferBuilder builder, int LevelUpMaterialSameItemExp) { builder.AddInt(5, LevelUpMaterialSameItemExp, 0); }
  public static void AddLevelUpCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType LevelUpCurrencyMainTypeID) { builder.AddByte(6, (byte)LevelUpCurrencyMainTypeID, 0); }
  public static void AddLevelUpCurrencyTypeID(FlatBufferBuilder builder, GDT.CurrencySubType LevelUpCurrencyTypeID) { builder.AddByte(7, (byte)LevelUpCurrencyTypeID, 0); }
  public static void AddLevelUpCurrencyCost(FlatBufferBuilder builder, int LevelUpCurrencyCost) { builder.AddInt(8, LevelUpCurrencyCost, 0); }
  public static void AddGradeUpGreatFailureProb(FlatBufferBuilder builder, int GradeUpGreatFailureProb) { builder.AddInt(9, GradeUpGreatFailureProb, 0); }
  public static void AddGradeUpFailedProb(FlatBufferBuilder builder, int GradeUpFailedProb) { builder.AddInt(10, GradeUpFailedProb, 0); }
  public static void AddGradeUpSuccessProb(FlatBufferBuilder builder, int GradeUpSuccessProb) { builder.AddInt(11, GradeUpSuccessProb, 0); }
  public static Offset<GDT.ItemGrowthData> EndItemGrowthData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemGrowthData>(o);
  }
  public ItemGrowthDataT UnPack() {
    var _o = new ItemGrowthDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemGrowthDataT _o) {
    _o.GroupID = this.GroupID;
    _o.GradeID = this.GradeID;
    _o.ItemLevel = this.ItemLevel;
    _o.LevelExpMax = this.LevelExpMax;
    _o.LevelUpMaterialItemExp = this.LevelUpMaterialItemExp;
    _o.LevelUpMaterialSameItemExp = this.LevelUpMaterialSameItemExp;
    _o.LevelUpCurrencyMainTypeID = this.LevelUpCurrencyMainTypeID;
    _o.LevelUpCurrencyTypeID = this.LevelUpCurrencyTypeID;
    _o.LevelUpCurrencyCost = this.LevelUpCurrencyCost;
    _o.GradeUpGreatFailureProb = this.GradeUpGreatFailureProb;
    _o.GradeUpFailedProb = this.GradeUpFailedProb;
    _o.GradeUpSuccessProb = this.GradeUpSuccessProb;
  }
  public static Offset<GDT.ItemGrowthData> Pack(FlatBufferBuilder builder, ItemGrowthDataT _o) {
    if (_o == null) return default(Offset<GDT.ItemGrowthData>);
    return CreateItemGrowthData(
      builder,
      _o.GroupID,
      _o.GradeID,
      _o.ItemLevel,
      _o.LevelExpMax,
      _o.LevelUpMaterialItemExp,
      _o.LevelUpMaterialSameItemExp,
      _o.LevelUpCurrencyMainTypeID,
      _o.LevelUpCurrencyTypeID,
      _o.LevelUpCurrencyCost,
      _o.GradeUpGreatFailureProb,
      _o.GradeUpFailedProb,
      _o.GradeUpSuccessProb);
  }
};

public class ItemGrowthDataT
{
  public GDT.ItemSubType GroupID { get; set; }
  public GDT.ItemGradeType GradeID { get; set; }
  public int ItemLevel { get; set; }
  public int LevelExpMax { get; set; }
  public int LevelUpMaterialItemExp { get; set; }
  public int LevelUpMaterialSameItemExp { get; set; }
  public GDT.CurrencyMainType LevelUpCurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType LevelUpCurrencyTypeID { get; set; }
  public int LevelUpCurrencyCost { get; set; }
  public int GradeUpGreatFailureProb { get; set; }
  public int GradeUpFailedProb { get; set; }
  public int GradeUpSuccessProb { get; set; }

  public ItemGrowthDataT() {
    this.GroupID = GDT.ItemSubType.IST_None;
    this.GradeID = GDT.ItemGradeType.IGT_None;
    this.ItemLevel = 0;
    this.LevelExpMax = 0;
    this.LevelUpMaterialItemExp = 0;
    this.LevelUpMaterialSameItemExp = 0;
    this.LevelUpCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.LevelUpCurrencyTypeID = GDT.CurrencySubType.CST_None;
    this.LevelUpCurrencyCost = 0;
    this.GradeUpGreatFailureProb = 0;
    this.GradeUpFailedProb = 0;
    this.GradeUpSuccessProb = 0;
  }
}

public struct ItemGrowthDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemGrowthDataTable GetRootAsItemGrowthDataTable(ByteBuffer _bb) { return GetRootAsItemGrowthDataTable(_bb, new ItemGrowthDataTable()); }
  public static ItemGrowthDataTable GetRootAsItemGrowthDataTable(ByteBuffer _bb, ItemGrowthDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemGrowthDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemGrowthData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemGrowthData?)(new GDT.ItemGrowthData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemGrowthDataTable> CreateItemGrowthDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemGrowthDataTable.AddRows(builder, RowsOffset);
    return ItemGrowthDataTable.EndItemGrowthDataTable(builder);
  }

  public static void StartItemGrowthDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemGrowthData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemGrowthData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemGrowthDataTable> EndItemGrowthDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemGrowthDataTable>(o);
  }
  public ItemGrowthDataTableT UnPack() {
    var _o = new ItemGrowthDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemGrowthDataTableT _o) {
    _o.Rows = new List<GDT.ItemGrowthDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemGrowthDataTable> Pack(FlatBufferBuilder builder, ItemGrowthDataTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemGrowthDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemGrowthData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemGrowthData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemGrowthDataTable(
      builder,
      _Rows);
  }
};

public class ItemGrowthDataTableT
{
  public List<GDT.ItemGrowthDataT> Rows { get; set; }

  public ItemGrowthDataTableT() {
    this.Rows = null;
  }
}

/// Defined by ItemFunction.xlsx
public struct ItemOptionData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemOptionData GetRootAsItemOptionData(ByteBuffer _bb) { return GetRootAsItemOptionData(_bb, new ItemOptionData()); }
  public static ItemOptionData GetRootAsItemOptionData(ByteBuffer _bb, ItemOptionData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemOptionData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemSubType GroupID { get { int o = __p.__offset(4); return o != 0 ? (GDT.ItemSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemSubType.IST_None; } }
  public GDT.ItemGradeType ItemGradeTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ItemGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemGradeType.IGT_None; } }
  public GDT.CalculationType CalculationTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.CalculationType)__p.bb.Get(o + __p.bb_pos) : GDT.CalculationType.none; } }
  public int OptionTypeProb { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinValue { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxValue { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.ItemOptionData> CreateItemOptionData(FlatBufferBuilder builder,
      GDT.ItemSubType GroupID = GDT.ItemSubType.IST_None,
      GDT.ItemGradeType ItemGradeTypeID = GDT.ItemGradeType.IGT_None,
      GDT.CalculationType CalculationTypeID = GDT.CalculationType.none,
      int OptionTypeProb = 0,
      int MinValue = 0,
      int MaxValue = 0) {
    builder.StartTable(6);
    ItemOptionData.AddMaxValue(builder, MaxValue);
    ItemOptionData.AddMinValue(builder, MinValue);
    ItemOptionData.AddOptionTypeProb(builder, OptionTypeProb);
    ItemOptionData.AddCalculationTypeID(builder, CalculationTypeID);
    ItemOptionData.AddItemGradeTypeID(builder, ItemGradeTypeID);
    ItemOptionData.AddGroupID(builder, GroupID);
    return ItemOptionData.EndItemOptionData(builder);
  }

  public static void StartItemOptionData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddGroupID(FlatBufferBuilder builder, GDT.ItemSubType GroupID) { builder.AddByte(0, (byte)GroupID, 0); }
  public static void AddItemGradeTypeID(FlatBufferBuilder builder, GDT.ItemGradeType ItemGradeTypeID) { builder.AddByte(1, (byte)ItemGradeTypeID, 0); }
  public static void AddCalculationTypeID(FlatBufferBuilder builder, GDT.CalculationType CalculationTypeID) { builder.AddByte(2, (byte)CalculationTypeID, 0); }
  public static void AddOptionTypeProb(FlatBufferBuilder builder, int OptionTypeProb) { builder.AddInt(3, OptionTypeProb, 0); }
  public static void AddMinValue(FlatBufferBuilder builder, int MinValue) { builder.AddInt(4, MinValue, 0); }
  public static void AddMaxValue(FlatBufferBuilder builder, int MaxValue) { builder.AddInt(5, MaxValue, 0); }
  public static Offset<GDT.ItemOptionData> EndItemOptionData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemOptionData>(o);
  }
  public ItemOptionDataT UnPack() {
    var _o = new ItemOptionDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemOptionDataT _o) {
    _o.GroupID = this.GroupID;
    _o.ItemGradeTypeID = this.ItemGradeTypeID;
    _o.CalculationTypeID = this.CalculationTypeID;
    _o.OptionTypeProb = this.OptionTypeProb;
    _o.MinValue = this.MinValue;
    _o.MaxValue = this.MaxValue;
  }
  public static Offset<GDT.ItemOptionData> Pack(FlatBufferBuilder builder, ItemOptionDataT _o) {
    if (_o == null) return default(Offset<GDT.ItemOptionData>);
    return CreateItemOptionData(
      builder,
      _o.GroupID,
      _o.ItemGradeTypeID,
      _o.CalculationTypeID,
      _o.OptionTypeProb,
      _o.MinValue,
      _o.MaxValue);
  }
};

public class ItemOptionDataT
{
  public GDT.ItemSubType GroupID { get; set; }
  public GDT.ItemGradeType ItemGradeTypeID { get; set; }
  public GDT.CalculationType CalculationTypeID { get; set; }
  public int OptionTypeProb { get; set; }
  public int MinValue { get; set; }
  public int MaxValue { get; set; }

  public ItemOptionDataT() {
    this.GroupID = GDT.ItemSubType.IST_None;
    this.ItemGradeTypeID = GDT.ItemGradeType.IGT_None;
    this.CalculationTypeID = GDT.CalculationType.none;
    this.OptionTypeProb = 0;
    this.MinValue = 0;
    this.MaxValue = 0;
  }
}

public struct ItemOptionDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ItemOptionDataTable GetRootAsItemOptionDataTable(ByteBuffer _bb) { return GetRootAsItemOptionDataTable(_bb, new ItemOptionDataTable()); }
  public static ItemOptionDataTable GetRootAsItemOptionDataTable(ByteBuffer _bb, ItemOptionDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ItemOptionDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ItemOptionData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ItemOptionData?)(new GDT.ItemOptionData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ItemOptionDataTable> CreateItemOptionDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ItemOptionDataTable.AddRows(builder, RowsOffset);
    return ItemOptionDataTable.EndItemOptionDataTable(builder);
  }

  public static void StartItemOptionDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ItemOptionData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ItemOptionData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ItemOptionDataTable> EndItemOptionDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ItemOptionDataTable>(o);
  }
  public ItemOptionDataTableT UnPack() {
    var _o = new ItemOptionDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ItemOptionDataTableT _o) {
    _o.Rows = new List<GDT.ItemOptionDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ItemOptionDataTable> Pack(FlatBufferBuilder builder, ItemOptionDataTableT _o) {
    if (_o == null) return default(Offset<GDT.ItemOptionDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ItemOptionData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ItemOptionData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateItemOptionDataTable(
      builder,
      _Rows);
  }
};

public class ItemOptionDataTableT
{
  public List<GDT.ItemOptionDataT> Rows { get; set; }

  public ItemOptionDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Language.xlsx
public struct LanguageUI : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageUI GetRootAsLanguageUI(ByteBuffer _bb) { return GetRootAsLanguageUI(_bb, new LanguageUI()); }
  public static LanguageUI GetRootAsLanguageUI(ByteBuffer _bb, LanguageUI obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageUI __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StringKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStringKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStringKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string DescriptionKor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionKorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionKorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionKorArray() { return __p.__vector_as_array<byte>(6); }
  public string DescriptionEng { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionEngBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionEngBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionEngArray() { return __p.__vector_as_array<byte>(8); }
  public string DescriptionCN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionCNBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionCNBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionCNArray() { return __p.__vector_as_array<byte>(10); }
  public string DescriptionTWN { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionTWNBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionTWNBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionTWNArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.LanguageUI> CreateLanguageUI(FlatBufferBuilder builder,
      StringOffset StringKeyOffset = default(StringOffset),
      StringOffset DescriptionKorOffset = default(StringOffset),
      StringOffset DescriptionEngOffset = default(StringOffset),
      StringOffset DescriptionCNOffset = default(StringOffset),
      StringOffset DescriptionTWNOffset = default(StringOffset)) {
    builder.StartTable(5);
    LanguageUI.AddDescriptionTWN(builder, DescriptionTWNOffset);
    LanguageUI.AddDescriptionCN(builder, DescriptionCNOffset);
    LanguageUI.AddDescriptionEng(builder, DescriptionEngOffset);
    LanguageUI.AddDescriptionKor(builder, DescriptionKorOffset);
    LanguageUI.AddStringKey(builder, StringKeyOffset);
    return LanguageUI.EndLanguageUI(builder);
  }

  public static void StartLanguageUI(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStringKey(FlatBufferBuilder builder, StringOffset StringKeyOffset) { builder.AddOffset(0, StringKeyOffset.Value, 0); }
  public static void AddDescriptionKor(FlatBufferBuilder builder, StringOffset DescriptionKorOffset) { builder.AddOffset(1, DescriptionKorOffset.Value, 0); }
  public static void AddDescriptionEng(FlatBufferBuilder builder, StringOffset DescriptionEngOffset) { builder.AddOffset(2, DescriptionEngOffset.Value, 0); }
  public static void AddDescriptionCN(FlatBufferBuilder builder, StringOffset DescriptionCNOffset) { builder.AddOffset(3, DescriptionCNOffset.Value, 0); }
  public static void AddDescriptionTWN(FlatBufferBuilder builder, StringOffset DescriptionTWNOffset) { builder.AddOffset(4, DescriptionTWNOffset.Value, 0); }
  public static Offset<GDT.LanguageUI> EndLanguageUI(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageUI>(o);
  }
  public LanguageUIT UnPack() {
    var _o = new LanguageUIT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageUIT _o) {
    _o.StringKey = this.StringKey;
    _o.DescriptionKor = this.DescriptionKor;
    _o.DescriptionEng = this.DescriptionEng;
    _o.DescriptionCN = this.DescriptionCN;
    _o.DescriptionTWN = this.DescriptionTWN;
  }
  public static Offset<GDT.LanguageUI> Pack(FlatBufferBuilder builder, LanguageUIT _o) {
    if (_o == null) return default(Offset<GDT.LanguageUI>);
    var _StringKey = _o.StringKey == null ? default(StringOffset) : builder.CreateString(_o.StringKey);
    var _DescriptionKor = _o.DescriptionKor == null ? default(StringOffset) : builder.CreateString(_o.DescriptionKor);
    var _DescriptionEng = _o.DescriptionEng == null ? default(StringOffset) : builder.CreateString(_o.DescriptionEng);
    var _DescriptionCN = _o.DescriptionCN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionCN);
    var _DescriptionTWN = _o.DescriptionTWN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionTWN);
    return CreateLanguageUI(
      builder,
      _StringKey,
      _DescriptionKor,
      _DescriptionEng,
      _DescriptionCN,
      _DescriptionTWN);
  }
};

public class LanguageUIT
{
  public string StringKey { get; set; }
  public string DescriptionKor { get; set; }
  public string DescriptionEng { get; set; }
  public string DescriptionCN { get; set; }
  public string DescriptionTWN { get; set; }

  public LanguageUIT() {
    this.StringKey = null;
    this.DescriptionKor = null;
    this.DescriptionEng = null;
    this.DescriptionCN = null;
    this.DescriptionTWN = null;
  }
}

public struct LanguageUITable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageUITable GetRootAsLanguageUITable(ByteBuffer _bb) { return GetRootAsLanguageUITable(_bb, new LanguageUITable()); }
  public static LanguageUITable GetRootAsLanguageUITable(ByteBuffer _bb, LanguageUITable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageUITable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LanguageUI? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LanguageUI?)(new GDT.LanguageUI()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LanguageUITable> CreateLanguageUITable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LanguageUITable.AddRows(builder, RowsOffset);
    return LanguageUITable.EndLanguageUITable(builder);
  }

  public static void StartLanguageUITable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LanguageUI>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LanguageUI>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LanguageUITable> EndLanguageUITable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageUITable>(o);
  }
  public LanguageUITableT UnPack() {
    var _o = new LanguageUITableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageUITableT _o) {
    _o.Rows = new List<GDT.LanguageUIT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LanguageUITable> Pack(FlatBufferBuilder builder, LanguageUITableT _o) {
    if (_o == null) return default(Offset<GDT.LanguageUITable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LanguageUI>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LanguageUI.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLanguageUITable(
      builder,
      _Rows);
  }
};

public class LanguageUITableT
{
  public List<GDT.LanguageUIT> Rows { get; set; }

  public LanguageUITableT() {
    this.Rows = null;
  }
}

/// Defined by Language.xlsx
public struct LanguageItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageItem GetRootAsLanguageItem(ByteBuffer _bb) { return GetRootAsLanguageItem(_bb, new LanguageItem()); }
  public static LanguageItem GetRootAsLanguageItem(ByteBuffer _bb, LanguageItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StringKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStringKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStringKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string DescriptionKor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionKorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionKorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionKorArray() { return __p.__vector_as_array<byte>(6); }
  public string DescriptionEng { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionEngBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionEngBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionEngArray() { return __p.__vector_as_array<byte>(8); }
  public string DescriptionCN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionCNBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionCNBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionCNArray() { return __p.__vector_as_array<byte>(10); }
  public string DescriptionTWN { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionTWNBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionTWNBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionTWNArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.LanguageItem> CreateLanguageItem(FlatBufferBuilder builder,
      StringOffset StringKeyOffset = default(StringOffset),
      StringOffset DescriptionKorOffset = default(StringOffset),
      StringOffset DescriptionEngOffset = default(StringOffset),
      StringOffset DescriptionCNOffset = default(StringOffset),
      StringOffset DescriptionTWNOffset = default(StringOffset)) {
    builder.StartTable(5);
    LanguageItem.AddDescriptionTWN(builder, DescriptionTWNOffset);
    LanguageItem.AddDescriptionCN(builder, DescriptionCNOffset);
    LanguageItem.AddDescriptionEng(builder, DescriptionEngOffset);
    LanguageItem.AddDescriptionKor(builder, DescriptionKorOffset);
    LanguageItem.AddStringKey(builder, StringKeyOffset);
    return LanguageItem.EndLanguageItem(builder);
  }

  public static void StartLanguageItem(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStringKey(FlatBufferBuilder builder, StringOffset StringKeyOffset) { builder.AddOffset(0, StringKeyOffset.Value, 0); }
  public static void AddDescriptionKor(FlatBufferBuilder builder, StringOffset DescriptionKorOffset) { builder.AddOffset(1, DescriptionKorOffset.Value, 0); }
  public static void AddDescriptionEng(FlatBufferBuilder builder, StringOffset DescriptionEngOffset) { builder.AddOffset(2, DescriptionEngOffset.Value, 0); }
  public static void AddDescriptionCN(FlatBufferBuilder builder, StringOffset DescriptionCNOffset) { builder.AddOffset(3, DescriptionCNOffset.Value, 0); }
  public static void AddDescriptionTWN(FlatBufferBuilder builder, StringOffset DescriptionTWNOffset) { builder.AddOffset(4, DescriptionTWNOffset.Value, 0); }
  public static Offset<GDT.LanguageItem> EndLanguageItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageItem>(o);
  }
  public LanguageItemT UnPack() {
    var _o = new LanguageItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageItemT _o) {
    _o.StringKey = this.StringKey;
    _o.DescriptionKor = this.DescriptionKor;
    _o.DescriptionEng = this.DescriptionEng;
    _o.DescriptionCN = this.DescriptionCN;
    _o.DescriptionTWN = this.DescriptionTWN;
  }
  public static Offset<GDT.LanguageItem> Pack(FlatBufferBuilder builder, LanguageItemT _o) {
    if (_o == null) return default(Offset<GDT.LanguageItem>);
    var _StringKey = _o.StringKey == null ? default(StringOffset) : builder.CreateString(_o.StringKey);
    var _DescriptionKor = _o.DescriptionKor == null ? default(StringOffset) : builder.CreateString(_o.DescriptionKor);
    var _DescriptionEng = _o.DescriptionEng == null ? default(StringOffset) : builder.CreateString(_o.DescriptionEng);
    var _DescriptionCN = _o.DescriptionCN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionCN);
    var _DescriptionTWN = _o.DescriptionTWN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionTWN);
    return CreateLanguageItem(
      builder,
      _StringKey,
      _DescriptionKor,
      _DescriptionEng,
      _DescriptionCN,
      _DescriptionTWN);
  }
};

public class LanguageItemT
{
  public string StringKey { get; set; }
  public string DescriptionKor { get; set; }
  public string DescriptionEng { get; set; }
  public string DescriptionCN { get; set; }
  public string DescriptionTWN { get; set; }

  public LanguageItemT() {
    this.StringKey = null;
    this.DescriptionKor = null;
    this.DescriptionEng = null;
    this.DescriptionCN = null;
    this.DescriptionTWN = null;
  }
}

public struct LanguageItemTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageItemTable GetRootAsLanguageItemTable(ByteBuffer _bb) { return GetRootAsLanguageItemTable(_bb, new LanguageItemTable()); }
  public static LanguageItemTable GetRootAsLanguageItemTable(ByteBuffer _bb, LanguageItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LanguageItem? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LanguageItem?)(new GDT.LanguageItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LanguageItemTable> CreateLanguageItemTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LanguageItemTable.AddRows(builder, RowsOffset);
    return LanguageItemTable.EndLanguageItemTable(builder);
  }

  public static void StartLanguageItemTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LanguageItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LanguageItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LanguageItemTable> EndLanguageItemTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageItemTable>(o);
  }
  public LanguageItemTableT UnPack() {
    var _o = new LanguageItemTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageItemTableT _o) {
    _o.Rows = new List<GDT.LanguageItemT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LanguageItemTable> Pack(FlatBufferBuilder builder, LanguageItemTableT _o) {
    if (_o == null) return default(Offset<GDT.LanguageItemTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LanguageItem>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LanguageItem.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLanguageItemTable(
      builder,
      _Rows);
  }
};

public class LanguageItemTableT
{
  public List<GDT.LanguageItemT> Rows { get; set; }

  public LanguageItemTableT() {
    this.Rows = null;
  }
}

/// Defined by Language.xlsx
public struct LanguageShop : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageShop GetRootAsLanguageShop(ByteBuffer _bb) { return GetRootAsLanguageShop(_bb, new LanguageShop()); }
  public static LanguageShop GetRootAsLanguageShop(ByteBuffer _bb, LanguageShop obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageShop __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StringKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStringKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStringKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string DescriptionKor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionKorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionKorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionKorArray() { return __p.__vector_as_array<byte>(6); }
  public string DescriptionEng { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionEngBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionEngBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionEngArray() { return __p.__vector_as_array<byte>(8); }
  public string DescriptionCN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionCNBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionCNBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionCNArray() { return __p.__vector_as_array<byte>(10); }
  public string DescriptionTWN { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionTWNBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionTWNBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionTWNArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.LanguageShop> CreateLanguageShop(FlatBufferBuilder builder,
      StringOffset StringKeyOffset = default(StringOffset),
      StringOffset DescriptionKorOffset = default(StringOffset),
      StringOffset DescriptionEngOffset = default(StringOffset),
      StringOffset DescriptionCNOffset = default(StringOffset),
      StringOffset DescriptionTWNOffset = default(StringOffset)) {
    builder.StartTable(5);
    LanguageShop.AddDescriptionTWN(builder, DescriptionTWNOffset);
    LanguageShop.AddDescriptionCN(builder, DescriptionCNOffset);
    LanguageShop.AddDescriptionEng(builder, DescriptionEngOffset);
    LanguageShop.AddDescriptionKor(builder, DescriptionKorOffset);
    LanguageShop.AddStringKey(builder, StringKeyOffset);
    return LanguageShop.EndLanguageShop(builder);
  }

  public static void StartLanguageShop(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStringKey(FlatBufferBuilder builder, StringOffset StringKeyOffset) { builder.AddOffset(0, StringKeyOffset.Value, 0); }
  public static void AddDescriptionKor(FlatBufferBuilder builder, StringOffset DescriptionKorOffset) { builder.AddOffset(1, DescriptionKorOffset.Value, 0); }
  public static void AddDescriptionEng(FlatBufferBuilder builder, StringOffset DescriptionEngOffset) { builder.AddOffset(2, DescriptionEngOffset.Value, 0); }
  public static void AddDescriptionCN(FlatBufferBuilder builder, StringOffset DescriptionCNOffset) { builder.AddOffset(3, DescriptionCNOffset.Value, 0); }
  public static void AddDescriptionTWN(FlatBufferBuilder builder, StringOffset DescriptionTWNOffset) { builder.AddOffset(4, DescriptionTWNOffset.Value, 0); }
  public static Offset<GDT.LanguageShop> EndLanguageShop(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageShop>(o);
  }
  public LanguageShopT UnPack() {
    var _o = new LanguageShopT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageShopT _o) {
    _o.StringKey = this.StringKey;
    _o.DescriptionKor = this.DescriptionKor;
    _o.DescriptionEng = this.DescriptionEng;
    _o.DescriptionCN = this.DescriptionCN;
    _o.DescriptionTWN = this.DescriptionTWN;
  }
  public static Offset<GDT.LanguageShop> Pack(FlatBufferBuilder builder, LanguageShopT _o) {
    if (_o == null) return default(Offset<GDT.LanguageShop>);
    var _StringKey = _o.StringKey == null ? default(StringOffset) : builder.CreateString(_o.StringKey);
    var _DescriptionKor = _o.DescriptionKor == null ? default(StringOffset) : builder.CreateString(_o.DescriptionKor);
    var _DescriptionEng = _o.DescriptionEng == null ? default(StringOffset) : builder.CreateString(_o.DescriptionEng);
    var _DescriptionCN = _o.DescriptionCN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionCN);
    var _DescriptionTWN = _o.DescriptionTWN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionTWN);
    return CreateLanguageShop(
      builder,
      _StringKey,
      _DescriptionKor,
      _DescriptionEng,
      _DescriptionCN,
      _DescriptionTWN);
  }
};

public class LanguageShopT
{
  public string StringKey { get; set; }
  public string DescriptionKor { get; set; }
  public string DescriptionEng { get; set; }
  public string DescriptionCN { get; set; }
  public string DescriptionTWN { get; set; }

  public LanguageShopT() {
    this.StringKey = null;
    this.DescriptionKor = null;
    this.DescriptionEng = null;
    this.DescriptionCN = null;
    this.DescriptionTWN = null;
  }
}

public struct LanguageShopTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageShopTable GetRootAsLanguageShopTable(ByteBuffer _bb) { return GetRootAsLanguageShopTable(_bb, new LanguageShopTable()); }
  public static LanguageShopTable GetRootAsLanguageShopTable(ByteBuffer _bb, LanguageShopTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageShopTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LanguageShop? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LanguageShop?)(new GDT.LanguageShop()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LanguageShopTable> CreateLanguageShopTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LanguageShopTable.AddRows(builder, RowsOffset);
    return LanguageShopTable.EndLanguageShopTable(builder);
  }

  public static void StartLanguageShopTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LanguageShop>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LanguageShop>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LanguageShopTable> EndLanguageShopTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageShopTable>(o);
  }
  public LanguageShopTableT UnPack() {
    var _o = new LanguageShopTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageShopTableT _o) {
    _o.Rows = new List<GDT.LanguageShopT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LanguageShopTable> Pack(FlatBufferBuilder builder, LanguageShopTableT _o) {
    if (_o == null) return default(Offset<GDT.LanguageShopTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LanguageShop>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LanguageShop.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLanguageShopTable(
      builder,
      _Rows);
  }
};

public class LanguageShopTableT
{
  public List<GDT.LanguageShopT> Rows { get; set; }

  public LanguageShopTableT() {
    this.Rows = null;
  }
}

/// Defined by Language.xlsx
public struct LanguageQuest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageQuest GetRootAsLanguageQuest(ByteBuffer _bb) { return GetRootAsLanguageQuest(_bb, new LanguageQuest()); }
  public static LanguageQuest GetRootAsLanguageQuest(ByteBuffer _bb, LanguageQuest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageQuest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StringKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStringKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStringKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string DescriptionKor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionKorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionKorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionKorArray() { return __p.__vector_as_array<byte>(6); }
  public string DescriptionEng { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionEngBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionEngBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionEngArray() { return __p.__vector_as_array<byte>(8); }
  public string DescriptionCN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionCNBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionCNBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionCNArray() { return __p.__vector_as_array<byte>(10); }
  public string DescriptionTWN { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionTWNBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionTWNBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionTWNArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.LanguageQuest> CreateLanguageQuest(FlatBufferBuilder builder,
      StringOffset StringKeyOffset = default(StringOffset),
      StringOffset DescriptionKorOffset = default(StringOffset),
      StringOffset DescriptionEngOffset = default(StringOffset),
      StringOffset DescriptionCNOffset = default(StringOffset),
      StringOffset DescriptionTWNOffset = default(StringOffset)) {
    builder.StartTable(5);
    LanguageQuest.AddDescriptionTWN(builder, DescriptionTWNOffset);
    LanguageQuest.AddDescriptionCN(builder, DescriptionCNOffset);
    LanguageQuest.AddDescriptionEng(builder, DescriptionEngOffset);
    LanguageQuest.AddDescriptionKor(builder, DescriptionKorOffset);
    LanguageQuest.AddStringKey(builder, StringKeyOffset);
    return LanguageQuest.EndLanguageQuest(builder);
  }

  public static void StartLanguageQuest(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStringKey(FlatBufferBuilder builder, StringOffset StringKeyOffset) { builder.AddOffset(0, StringKeyOffset.Value, 0); }
  public static void AddDescriptionKor(FlatBufferBuilder builder, StringOffset DescriptionKorOffset) { builder.AddOffset(1, DescriptionKorOffset.Value, 0); }
  public static void AddDescriptionEng(FlatBufferBuilder builder, StringOffset DescriptionEngOffset) { builder.AddOffset(2, DescriptionEngOffset.Value, 0); }
  public static void AddDescriptionCN(FlatBufferBuilder builder, StringOffset DescriptionCNOffset) { builder.AddOffset(3, DescriptionCNOffset.Value, 0); }
  public static void AddDescriptionTWN(FlatBufferBuilder builder, StringOffset DescriptionTWNOffset) { builder.AddOffset(4, DescriptionTWNOffset.Value, 0); }
  public static Offset<GDT.LanguageQuest> EndLanguageQuest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageQuest>(o);
  }
  public LanguageQuestT UnPack() {
    var _o = new LanguageQuestT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageQuestT _o) {
    _o.StringKey = this.StringKey;
    _o.DescriptionKor = this.DescriptionKor;
    _o.DescriptionEng = this.DescriptionEng;
    _o.DescriptionCN = this.DescriptionCN;
    _o.DescriptionTWN = this.DescriptionTWN;
  }
  public static Offset<GDT.LanguageQuest> Pack(FlatBufferBuilder builder, LanguageQuestT _o) {
    if (_o == null) return default(Offset<GDT.LanguageQuest>);
    var _StringKey = _o.StringKey == null ? default(StringOffset) : builder.CreateString(_o.StringKey);
    var _DescriptionKor = _o.DescriptionKor == null ? default(StringOffset) : builder.CreateString(_o.DescriptionKor);
    var _DescriptionEng = _o.DescriptionEng == null ? default(StringOffset) : builder.CreateString(_o.DescriptionEng);
    var _DescriptionCN = _o.DescriptionCN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionCN);
    var _DescriptionTWN = _o.DescriptionTWN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionTWN);
    return CreateLanguageQuest(
      builder,
      _StringKey,
      _DescriptionKor,
      _DescriptionEng,
      _DescriptionCN,
      _DescriptionTWN);
  }
};

public class LanguageQuestT
{
  public string StringKey { get; set; }
  public string DescriptionKor { get; set; }
  public string DescriptionEng { get; set; }
  public string DescriptionCN { get; set; }
  public string DescriptionTWN { get; set; }

  public LanguageQuestT() {
    this.StringKey = null;
    this.DescriptionKor = null;
    this.DescriptionEng = null;
    this.DescriptionCN = null;
    this.DescriptionTWN = null;
  }
}

public struct LanguageQuestTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageQuestTable GetRootAsLanguageQuestTable(ByteBuffer _bb) { return GetRootAsLanguageQuestTable(_bb, new LanguageQuestTable()); }
  public static LanguageQuestTable GetRootAsLanguageQuestTable(ByteBuffer _bb, LanguageQuestTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageQuestTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LanguageQuest? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LanguageQuest?)(new GDT.LanguageQuest()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LanguageQuestTable> CreateLanguageQuestTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LanguageQuestTable.AddRows(builder, RowsOffset);
    return LanguageQuestTable.EndLanguageQuestTable(builder);
  }

  public static void StartLanguageQuestTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LanguageQuest>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LanguageQuest>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LanguageQuestTable> EndLanguageQuestTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageQuestTable>(o);
  }
  public LanguageQuestTableT UnPack() {
    var _o = new LanguageQuestTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageQuestTableT _o) {
    _o.Rows = new List<GDT.LanguageQuestT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LanguageQuestTable> Pack(FlatBufferBuilder builder, LanguageQuestTableT _o) {
    if (_o == null) return default(Offset<GDT.LanguageQuestTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LanguageQuest>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LanguageQuest.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLanguageQuestTable(
      builder,
      _Rows);
  }
};

public class LanguageQuestTableT
{
  public List<GDT.LanguageQuestT> Rows { get; set; }

  public LanguageQuestTableT() {
    this.Rows = null;
  }
}

/// Defined by Language.xlsx
public struct LanguageSkill : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageSkill GetRootAsLanguageSkill(ByteBuffer _bb) { return GetRootAsLanguageSkill(_bb, new LanguageSkill()); }
  public static LanguageSkill GetRootAsLanguageSkill(ByteBuffer _bb, LanguageSkill obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageSkill __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string StringKey { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringKeyBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetStringKeyBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetStringKeyArray() { return __p.__vector_as_array<byte>(4); }
  public string DescriptionKor { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionKorBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetDescriptionKorBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetDescriptionKorArray() { return __p.__vector_as_array<byte>(6); }
  public string DescriptionEng { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionEngBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetDescriptionEngBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetDescriptionEngArray() { return __p.__vector_as_array<byte>(8); }
  public string DescriptionCN { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionCNBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetDescriptionCNBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionCNArray() { return __p.__vector_as_array<byte>(10); }
  public string DescriptionTWN { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionTWNBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetDescriptionTWNBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionTWNArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<GDT.LanguageSkill> CreateLanguageSkill(FlatBufferBuilder builder,
      StringOffset StringKeyOffset = default(StringOffset),
      StringOffset DescriptionKorOffset = default(StringOffset),
      StringOffset DescriptionEngOffset = default(StringOffset),
      StringOffset DescriptionCNOffset = default(StringOffset),
      StringOffset DescriptionTWNOffset = default(StringOffset)) {
    builder.StartTable(5);
    LanguageSkill.AddDescriptionTWN(builder, DescriptionTWNOffset);
    LanguageSkill.AddDescriptionCN(builder, DescriptionCNOffset);
    LanguageSkill.AddDescriptionEng(builder, DescriptionEngOffset);
    LanguageSkill.AddDescriptionKor(builder, DescriptionKorOffset);
    LanguageSkill.AddStringKey(builder, StringKeyOffset);
    return LanguageSkill.EndLanguageSkill(builder);
  }

  public static void StartLanguageSkill(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddStringKey(FlatBufferBuilder builder, StringOffset StringKeyOffset) { builder.AddOffset(0, StringKeyOffset.Value, 0); }
  public static void AddDescriptionKor(FlatBufferBuilder builder, StringOffset DescriptionKorOffset) { builder.AddOffset(1, DescriptionKorOffset.Value, 0); }
  public static void AddDescriptionEng(FlatBufferBuilder builder, StringOffset DescriptionEngOffset) { builder.AddOffset(2, DescriptionEngOffset.Value, 0); }
  public static void AddDescriptionCN(FlatBufferBuilder builder, StringOffset DescriptionCNOffset) { builder.AddOffset(3, DescriptionCNOffset.Value, 0); }
  public static void AddDescriptionTWN(FlatBufferBuilder builder, StringOffset DescriptionTWNOffset) { builder.AddOffset(4, DescriptionTWNOffset.Value, 0); }
  public static Offset<GDT.LanguageSkill> EndLanguageSkill(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageSkill>(o);
  }
  public LanguageSkillT UnPack() {
    var _o = new LanguageSkillT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageSkillT _o) {
    _o.StringKey = this.StringKey;
    _o.DescriptionKor = this.DescriptionKor;
    _o.DescriptionEng = this.DescriptionEng;
    _o.DescriptionCN = this.DescriptionCN;
    _o.DescriptionTWN = this.DescriptionTWN;
  }
  public static Offset<GDT.LanguageSkill> Pack(FlatBufferBuilder builder, LanguageSkillT _o) {
    if (_o == null) return default(Offset<GDT.LanguageSkill>);
    var _StringKey = _o.StringKey == null ? default(StringOffset) : builder.CreateString(_o.StringKey);
    var _DescriptionKor = _o.DescriptionKor == null ? default(StringOffset) : builder.CreateString(_o.DescriptionKor);
    var _DescriptionEng = _o.DescriptionEng == null ? default(StringOffset) : builder.CreateString(_o.DescriptionEng);
    var _DescriptionCN = _o.DescriptionCN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionCN);
    var _DescriptionTWN = _o.DescriptionTWN == null ? default(StringOffset) : builder.CreateString(_o.DescriptionTWN);
    return CreateLanguageSkill(
      builder,
      _StringKey,
      _DescriptionKor,
      _DescriptionEng,
      _DescriptionCN,
      _DescriptionTWN);
  }
};

public class LanguageSkillT
{
  public string StringKey { get; set; }
  public string DescriptionKor { get; set; }
  public string DescriptionEng { get; set; }
  public string DescriptionCN { get; set; }
  public string DescriptionTWN { get; set; }

  public LanguageSkillT() {
    this.StringKey = null;
    this.DescriptionKor = null;
    this.DescriptionEng = null;
    this.DescriptionCN = null;
    this.DescriptionTWN = null;
  }
}

public struct LanguageSkillTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LanguageSkillTable GetRootAsLanguageSkillTable(ByteBuffer _bb) { return GetRootAsLanguageSkillTable(_bb, new LanguageSkillTable()); }
  public static LanguageSkillTable GetRootAsLanguageSkillTable(ByteBuffer _bb, LanguageSkillTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LanguageSkillTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LanguageSkill? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LanguageSkill?)(new GDT.LanguageSkill()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LanguageSkillTable> CreateLanguageSkillTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LanguageSkillTable.AddRows(builder, RowsOffset);
    return LanguageSkillTable.EndLanguageSkillTable(builder);
  }

  public static void StartLanguageSkillTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LanguageSkill>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LanguageSkill>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LanguageSkillTable> EndLanguageSkillTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LanguageSkillTable>(o);
  }
  public LanguageSkillTableT UnPack() {
    var _o = new LanguageSkillTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LanguageSkillTableT _o) {
    _o.Rows = new List<GDT.LanguageSkillT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LanguageSkillTable> Pack(FlatBufferBuilder builder, LanguageSkillTableT _o) {
    if (_o == null) return default(Offset<GDT.LanguageSkillTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LanguageSkill>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LanguageSkill.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLanguageSkillTable(
      builder,
      _Rows);
  }
};

public class LanguageSkillTableT
{
  public List<GDT.LanguageSkillT> Rows { get; set; }

  public LanguageSkillTableT() {
    this.Rows = null;
  }
}

/// Defined by LevelData_10001.xlsx
public struct NpcSpawner : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NpcSpawner GetRootAsNpcSpawner(ByteBuffer _bb) { return GetRootAsNpcSpawner(_bb, new NpcSpawner()); }
  public static NpcSpawner GetRootAsNpcSpawner(ByteBuffer _bb, NpcSpawner obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NpcSpawner __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(8); }
  public int CharacterID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotate { get { int o = __p.__offset(14); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string MinimapIcon { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinimapIconBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMinimapIconBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMinimapIconArray() { return __p.__vector_as_array<byte>(16); }
  public int ID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartNpcSpawner(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(0, ObjectID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(1, MapID, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset CommentOffset) { builder.AddOffset(2, CommentOffset.Value, 0); }
  public static void AddCharacterID(FlatBufferBuilder builder, int CharacterID) { builder.AddInt(3, CharacterID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(4, PositionOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<GDT.vector3> RotateOffset) { builder.AddStruct(5, RotateOffset.Value, 0); }
  public static void AddMinimapIcon(FlatBufferBuilder builder, StringOffset MinimapIconOffset) { builder.AddOffset(6, MinimapIconOffset.Value, 0); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(7, ID, 0); }
  public static Offset<GDT.NpcSpawner> EndNpcSpawner(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.NpcSpawner>(o);
  }
  public NpcSpawnerT UnPack() {
    var _o = new NpcSpawnerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NpcSpawnerT _o) {
    _o.ObjectID = this.ObjectID;
    _o.MapID = this.MapID;
    _o.Comment = this.Comment;
    _o.CharacterID = this.CharacterID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotate = this.Rotate.HasValue ? this.Rotate.Value.UnPack() : null;
    _o.MinimapIcon = this.MinimapIcon;
    _o.ID = this.ID;
  }
  public static Offset<GDT.NpcSpawner> Pack(FlatBufferBuilder builder, NpcSpawnerT _o) {
    if (_o == null) return default(Offset<GDT.NpcSpawner>);
    var _Comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _MinimapIcon = _o.MinimapIcon == null ? default(StringOffset) : builder.CreateString(_o.MinimapIcon);
    StartNpcSpawner(builder);
    AddObjectID(builder, _o.ObjectID);
    AddMapID(builder, _o.MapID);
    AddComment(builder, _Comment);
    AddCharacterID(builder, _o.CharacterID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotate(builder, GDT.vector3.Pack(builder, _o.Rotate));
    AddMinimapIcon(builder, _MinimapIcon);
    AddID(builder, _o.ID);
    return EndNpcSpawner(builder);
  }
};

public class NpcSpawnerT
{
  public int ObjectID { get; set; }
  public int MapID { get; set; }
  public string Comment { get; set; }
  public int CharacterID { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotate { get; set; }
  public string MinimapIcon { get; set; }
  public int ID { get; set; }

  public NpcSpawnerT() {
    this.ObjectID = 0;
    this.MapID = 0;
    this.Comment = null;
    this.CharacterID = 0;
    this.Position = new GDT.vector3T();
    this.Rotate = new GDT.vector3T();
    this.MinimapIcon = null;
    this.ID = 0;
  }
}

public struct NpcSpawnerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NpcSpawnerTable GetRootAsNpcSpawnerTable(ByteBuffer _bb) { return GetRootAsNpcSpawnerTable(_bb, new NpcSpawnerTable()); }
  public static NpcSpawnerTable GetRootAsNpcSpawnerTable(ByteBuffer _bb, NpcSpawnerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NpcSpawnerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.NpcSpawner? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.NpcSpawner?)(new GDT.NpcSpawner()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.NpcSpawnerTable> CreateNpcSpawnerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    NpcSpawnerTable.AddRows(builder, RowsOffset);
    return NpcSpawnerTable.EndNpcSpawnerTable(builder);
  }

  public static void StartNpcSpawnerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.NpcSpawner>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.NpcSpawner>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.NpcSpawnerTable> EndNpcSpawnerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.NpcSpawnerTable>(o);
  }
  public NpcSpawnerTableT UnPack() {
    var _o = new NpcSpawnerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NpcSpawnerTableT _o) {
    _o.Rows = new List<GDT.NpcSpawnerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.NpcSpawnerTable> Pack(FlatBufferBuilder builder, NpcSpawnerTableT _o) {
    if (_o == null) return default(Offset<GDT.NpcSpawnerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.NpcSpawner>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.NpcSpawner.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateNpcSpawnerTable(
      builder,
      _Rows);
  }
};

public class NpcSpawnerTableT
{
  public List<GDT.NpcSpawnerT> Rows { get; set; }

  public NpcSpawnerTableT() {
    this.Rows = null;
  }
}

/// Defined by LevelData_10001.xlsx
public struct DrawCard : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DrawCard GetRootAsDrawCard(ByteBuffer _bb) { return GetRootAsDrawCard(_bb, new DrawCard()); }
  public static DrawCard GetRootAsDrawCard(ByteBuffer _bb, DrawCard obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DrawCard __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.vector3? Position { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotate { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.InteractionType InteractionTypeEnum { get { int o = __p.__offset(14); return o != 0 ? (GDT.InteractionType)__p.bb.Get(o + __p.bb_pos) : GDT.InteractionType.INTER_None; } }
  public float InteractionRadius { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string MinimapIcon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinimapIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMinimapIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMinimapIconArray() { return __p.__vector_as_array<byte>(18); }
  public string ResourceName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(20); }

  public static void StartDrawCard(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(0, ObjectID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(1, MapID, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset CommentOffset) { builder.AddOffset(2, CommentOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(3, PositionOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<GDT.vector3> RotateOffset) { builder.AddStruct(4, RotateOffset.Value, 0); }
  public static void AddInteractionTypeEnum(FlatBufferBuilder builder, GDT.InteractionType InteractionTypeEnum) { builder.AddByte(5, (byte)InteractionTypeEnum, 0); }
  public static void AddInteractionRadius(FlatBufferBuilder builder, float InteractionRadius) { builder.AddFloat(6, InteractionRadius, 0.0f); }
  public static void AddMinimapIcon(FlatBufferBuilder builder, StringOffset MinimapIconOffset) { builder.AddOffset(7, MinimapIconOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(8, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.DrawCard> EndDrawCard(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.DrawCard>(o);
  }
  public DrawCardT UnPack() {
    var _o = new DrawCardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DrawCardT _o) {
    _o.ObjectID = this.ObjectID;
    _o.MapID = this.MapID;
    _o.Comment = this.Comment;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotate = this.Rotate.HasValue ? this.Rotate.Value.UnPack() : null;
    _o.InteractionTypeEnum = this.InteractionTypeEnum;
    _o.InteractionRadius = this.InteractionRadius;
    _o.MinimapIcon = this.MinimapIcon;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.DrawCard> Pack(FlatBufferBuilder builder, DrawCardT _o) {
    if (_o == null) return default(Offset<GDT.DrawCard>);
    var _Comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _MinimapIcon = _o.MinimapIcon == null ? default(StringOffset) : builder.CreateString(_o.MinimapIcon);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartDrawCard(builder);
    AddObjectID(builder, _o.ObjectID);
    AddMapID(builder, _o.MapID);
    AddComment(builder, _Comment);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotate(builder, GDT.vector3.Pack(builder, _o.Rotate));
    AddInteractionTypeEnum(builder, _o.InteractionTypeEnum);
    AddInteractionRadius(builder, _o.InteractionRadius);
    AddMinimapIcon(builder, _MinimapIcon);
    AddResourceName(builder, _ResourceName);
    return EndDrawCard(builder);
  }
};

public class DrawCardT
{
  public int ObjectID { get; set; }
  public int MapID { get; set; }
  public string Comment { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotate { get; set; }
  public GDT.InteractionType InteractionTypeEnum { get; set; }
  public float InteractionRadius { get; set; }
  public string MinimapIcon { get; set; }
  public string ResourceName { get; set; }

  public DrawCardT() {
    this.ObjectID = 0;
    this.MapID = 0;
    this.Comment = null;
    this.Position = new GDT.vector3T();
    this.Rotate = new GDT.vector3T();
    this.InteractionTypeEnum = GDT.InteractionType.INTER_None;
    this.InteractionRadius = 0.0f;
    this.MinimapIcon = null;
    this.ResourceName = null;
  }
}

public struct DrawCardTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DrawCardTable GetRootAsDrawCardTable(ByteBuffer _bb) { return GetRootAsDrawCardTable(_bb, new DrawCardTable()); }
  public static DrawCardTable GetRootAsDrawCardTable(ByteBuffer _bb, DrawCardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DrawCardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.DrawCard? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.DrawCard?)(new GDT.DrawCard()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.DrawCardTable> CreateDrawCardTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DrawCardTable.AddRows(builder, RowsOffset);
    return DrawCardTable.EndDrawCardTable(builder);
  }

  public static void StartDrawCardTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.DrawCard>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.DrawCard>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.DrawCardTable> EndDrawCardTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.DrawCardTable>(o);
  }
  public DrawCardTableT UnPack() {
    var _o = new DrawCardTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DrawCardTableT _o) {
    _o.Rows = new List<GDT.DrawCardT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.DrawCardTable> Pack(FlatBufferBuilder builder, DrawCardTableT _o) {
    if (_o == null) return default(Offset<GDT.DrawCardTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.DrawCard>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.DrawCard.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateDrawCardTable(
      builder,
      _Rows);
  }
};

public class DrawCardTableT
{
  public List<GDT.DrawCardT> Rows { get; set; }

  public DrawCardTableT() {
    this.Rows = null;
  }
}

/// Defined by LevelData_10001.xlsx
public struct Portal : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Portal GetRootAsPortal(ByteBuffer _bb) { return GetRootAsPortal(_bb, new Portal()); }
  public static Portal GetRootAsPortal(ByteBuffer _bb, Portal obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Portal __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.vector3? Position { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotate { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.InteractionType InteractionTypeEnum { get { int o = __p.__offset(14); return o != 0 ? (GDT.InteractionType)__p.bb.Get(o + __p.bb_pos) : GDT.InteractionType.INTER_None; } }
  public float InteractionRadius { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int WorldPositionID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PopupMessage { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPopupMessageBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPopupMessageBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPopupMessageArray() { return __p.__vector_as_array<byte>(20); }
  public GDT.ContentMainType ContentMainTypeID { get { int o = __p.__offset(22); return o != 0 ? (GDT.ContentMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentMainType.CT_None; } }
  public string PortalName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPortalNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetPortalNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetPortalNameArray() { return __p.__vector_as_array<byte>(24); }
  public float NameHeight { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string MinimapIcon { get { int o = __p.__offset(28); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinimapIconBytes() { return __p.__vector_as_span<byte>(28, 1); }
#else
  public ArraySegment<byte>? GetMinimapIconBytes() { return __p.__vector_as_arraysegment(28); }
#endif
  public byte[] GetMinimapIconArray() { return __p.__vector_as_array<byte>(28); }
  public string ResourceName { get { int o = __p.__offset(30); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(30, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(30); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(30); }

  public static void StartPortal(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(0, ObjectID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(1, MapID, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset CommentOffset) { builder.AddOffset(2, CommentOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(3, PositionOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<GDT.vector3> RotateOffset) { builder.AddStruct(4, RotateOffset.Value, 0); }
  public static void AddInteractionTypeEnum(FlatBufferBuilder builder, GDT.InteractionType InteractionTypeEnum) { builder.AddByte(5, (byte)InteractionTypeEnum, 0); }
  public static void AddInteractionRadius(FlatBufferBuilder builder, float InteractionRadius) { builder.AddFloat(6, InteractionRadius, 0.0f); }
  public static void AddWorldPositionID(FlatBufferBuilder builder, int WorldPositionID) { builder.AddInt(7, WorldPositionID, 0); }
  public static void AddPopupMessage(FlatBufferBuilder builder, StringOffset PopupMessageOffset) { builder.AddOffset(8, PopupMessageOffset.Value, 0); }
  public static void AddContentMainTypeID(FlatBufferBuilder builder, GDT.ContentMainType ContentMainTypeID) { builder.AddByte(9, (byte)ContentMainTypeID, 0); }
  public static void AddPortalName(FlatBufferBuilder builder, StringOffset PortalNameOffset) { builder.AddOffset(10, PortalNameOffset.Value, 0); }
  public static void AddNameHeight(FlatBufferBuilder builder, float NameHeight) { builder.AddFloat(11, NameHeight, 0.0f); }
  public static void AddMinimapIcon(FlatBufferBuilder builder, StringOffset MinimapIconOffset) { builder.AddOffset(12, MinimapIconOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(13, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.Portal> EndPortal(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Portal>(o);
  }
  public PortalT UnPack() {
    var _o = new PortalT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PortalT _o) {
    _o.ObjectID = this.ObjectID;
    _o.MapID = this.MapID;
    _o.Comment = this.Comment;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotate = this.Rotate.HasValue ? this.Rotate.Value.UnPack() : null;
    _o.InteractionTypeEnum = this.InteractionTypeEnum;
    _o.InteractionRadius = this.InteractionRadius;
    _o.WorldPositionID = this.WorldPositionID;
    _o.PopupMessage = this.PopupMessage;
    _o.ContentMainTypeID = this.ContentMainTypeID;
    _o.PortalName = this.PortalName;
    _o.NameHeight = this.NameHeight;
    _o.MinimapIcon = this.MinimapIcon;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.Portal> Pack(FlatBufferBuilder builder, PortalT _o) {
    if (_o == null) return default(Offset<GDT.Portal>);
    var _Comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _PopupMessage = _o.PopupMessage == null ? default(StringOffset) : builder.CreateString(_o.PopupMessage);
    var _PortalName = _o.PortalName == null ? default(StringOffset) : builder.CreateString(_o.PortalName);
    var _MinimapIcon = _o.MinimapIcon == null ? default(StringOffset) : builder.CreateString(_o.MinimapIcon);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartPortal(builder);
    AddObjectID(builder, _o.ObjectID);
    AddMapID(builder, _o.MapID);
    AddComment(builder, _Comment);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotate(builder, GDT.vector3.Pack(builder, _o.Rotate));
    AddInteractionTypeEnum(builder, _o.InteractionTypeEnum);
    AddInteractionRadius(builder, _o.InteractionRadius);
    AddWorldPositionID(builder, _o.WorldPositionID);
    AddPopupMessage(builder, _PopupMessage);
    AddContentMainTypeID(builder, _o.ContentMainTypeID);
    AddPortalName(builder, _PortalName);
    AddNameHeight(builder, _o.NameHeight);
    AddMinimapIcon(builder, _MinimapIcon);
    AddResourceName(builder, _ResourceName);
    return EndPortal(builder);
  }
};

public class PortalT
{
  public int ObjectID { get; set; }
  public int MapID { get; set; }
  public string Comment { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotate { get; set; }
  public GDT.InteractionType InteractionTypeEnum { get; set; }
  public float InteractionRadius { get; set; }
  public int WorldPositionID { get; set; }
  public string PopupMessage { get; set; }
  public GDT.ContentMainType ContentMainTypeID { get; set; }
  public string PortalName { get; set; }
  public float NameHeight { get; set; }
  public string MinimapIcon { get; set; }
  public string ResourceName { get; set; }

  public PortalT() {
    this.ObjectID = 0;
    this.MapID = 0;
    this.Comment = null;
    this.Position = new GDT.vector3T();
    this.Rotate = new GDT.vector3T();
    this.InteractionTypeEnum = GDT.InteractionType.INTER_None;
    this.InteractionRadius = 0.0f;
    this.WorldPositionID = 0;
    this.PopupMessage = null;
    this.ContentMainTypeID = GDT.ContentMainType.CT_None;
    this.PortalName = null;
    this.NameHeight = 0.0f;
    this.MinimapIcon = null;
    this.ResourceName = null;
  }
}

public struct PortalTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PortalTable GetRootAsPortalTable(ByteBuffer _bb) { return GetRootAsPortalTable(_bb, new PortalTable()); }
  public static PortalTable GetRootAsPortalTable(ByteBuffer _bb, PortalTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PortalTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Portal? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Portal?)(new GDT.Portal()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PortalTable> CreatePortalTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PortalTable.AddRows(builder, RowsOffset);
    return PortalTable.EndPortalTable(builder);
  }

  public static void StartPortalTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Portal>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Portal>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PortalTable> EndPortalTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PortalTable>(o);
  }
  public PortalTableT UnPack() {
    var _o = new PortalTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PortalTableT _o) {
    _o.Rows = new List<GDT.PortalT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PortalTable> Pack(FlatBufferBuilder builder, PortalTableT _o) {
    if (_o == null) return default(Offset<GDT.PortalTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Portal>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Portal.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePortalTable(
      builder,
      _Rows);
  }
};

public class PortalTableT
{
  public List<GDT.PortalT> Rows { get; set; }

  public PortalTableT() {
    this.Rows = null;
  }
}

/// Defined by LevelData_20001.xlsx
public struct ContentOpenObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentOpenObject GetRootAsContentOpenObject(ByteBuffer _bb) { return GetRootAsContentOpenObject(_bb, new ContentOpenObject()); }
  public static ContentOpenObject GetRootAsContentOpenObject(ByteBuffer _bb, ContentOpenObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentOpenObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Comment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCommentBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetCommentArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.vector3? Position { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotate { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.InteractionType InteractionTypeEnum { get { int o = __p.__offset(14); return o != 0 ? (GDT.InteractionType)__p.bb.Get(o + __p.bb_pos) : GDT.InteractionType.INTER_None; } }
  public float InteractionRadius { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string MinimapIcon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinimapIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetMinimapIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetMinimapIconArray() { return __p.__vector_as_array<byte>(18); }
  public GDT.ContentMainType ContentType { get { int o = __p.__offset(20); return o != 0 ? (GDT.ContentMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentMainType.CT_None; } }
  public string ResourceName { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(22); }

  public static void StartContentOpenObject(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(0, ObjectID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(1, MapID, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset CommentOffset) { builder.AddOffset(2, CommentOffset.Value, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(3, PositionOffset.Value, 0); }
  public static void AddRotate(FlatBufferBuilder builder, Offset<GDT.vector3> RotateOffset) { builder.AddStruct(4, RotateOffset.Value, 0); }
  public static void AddInteractionTypeEnum(FlatBufferBuilder builder, GDT.InteractionType InteractionTypeEnum) { builder.AddByte(5, (byte)InteractionTypeEnum, 0); }
  public static void AddInteractionRadius(FlatBufferBuilder builder, float InteractionRadius) { builder.AddFloat(6, InteractionRadius, 0.0f); }
  public static void AddMinimapIcon(FlatBufferBuilder builder, StringOffset MinimapIconOffset) { builder.AddOffset(7, MinimapIconOffset.Value, 0); }
  public static void AddContentType(FlatBufferBuilder builder, GDT.ContentMainType ContentType) { builder.AddByte(8, (byte)ContentType, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(9, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.ContentOpenObject> EndContentOpenObject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentOpenObject>(o);
  }
  public ContentOpenObjectT UnPack() {
    var _o = new ContentOpenObjectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentOpenObjectT _o) {
    _o.ObjectID = this.ObjectID;
    _o.MapID = this.MapID;
    _o.Comment = this.Comment;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotate = this.Rotate.HasValue ? this.Rotate.Value.UnPack() : null;
    _o.InteractionTypeEnum = this.InteractionTypeEnum;
    _o.InteractionRadius = this.InteractionRadius;
    _o.MinimapIcon = this.MinimapIcon;
    _o.ContentType = this.ContentType;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.ContentOpenObject> Pack(FlatBufferBuilder builder, ContentOpenObjectT _o) {
    if (_o == null) return default(Offset<GDT.ContentOpenObject>);
    var _Comment = _o.Comment == null ? default(StringOffset) : builder.CreateString(_o.Comment);
    var _MinimapIcon = _o.MinimapIcon == null ? default(StringOffset) : builder.CreateString(_o.MinimapIcon);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartContentOpenObject(builder);
    AddObjectID(builder, _o.ObjectID);
    AddMapID(builder, _o.MapID);
    AddComment(builder, _Comment);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotate(builder, GDT.vector3.Pack(builder, _o.Rotate));
    AddInteractionTypeEnum(builder, _o.InteractionTypeEnum);
    AddInteractionRadius(builder, _o.InteractionRadius);
    AddMinimapIcon(builder, _MinimapIcon);
    AddContentType(builder, _o.ContentType);
    AddResourceName(builder, _ResourceName);
    return EndContentOpenObject(builder);
  }
};

public class ContentOpenObjectT
{
  public int ObjectID { get; set; }
  public int MapID { get; set; }
  public string Comment { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotate { get; set; }
  public GDT.InteractionType InteractionTypeEnum { get; set; }
  public float InteractionRadius { get; set; }
  public string MinimapIcon { get; set; }
  public GDT.ContentMainType ContentType { get; set; }
  public string ResourceName { get; set; }

  public ContentOpenObjectT() {
    this.ObjectID = 0;
    this.MapID = 0;
    this.Comment = null;
    this.Position = new GDT.vector3T();
    this.Rotate = new GDT.vector3T();
    this.InteractionTypeEnum = GDT.InteractionType.INTER_None;
    this.InteractionRadius = 0.0f;
    this.MinimapIcon = null;
    this.ContentType = GDT.ContentMainType.CT_None;
    this.ResourceName = null;
  }
}

public struct ContentOpenObjectTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ContentOpenObjectTable GetRootAsContentOpenObjectTable(ByteBuffer _bb) { return GetRootAsContentOpenObjectTable(_bb, new ContentOpenObjectTable()); }
  public static ContentOpenObjectTable GetRootAsContentOpenObjectTable(ByteBuffer _bb, ContentOpenObjectTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ContentOpenObjectTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ContentOpenObject? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ContentOpenObject?)(new GDT.ContentOpenObject()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ContentOpenObjectTable> CreateContentOpenObjectTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ContentOpenObjectTable.AddRows(builder, RowsOffset);
    return ContentOpenObjectTable.EndContentOpenObjectTable(builder);
  }

  public static void StartContentOpenObjectTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ContentOpenObject>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ContentOpenObject>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ContentOpenObjectTable> EndContentOpenObjectTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ContentOpenObjectTable>(o);
  }
  public ContentOpenObjectTableT UnPack() {
    var _o = new ContentOpenObjectTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ContentOpenObjectTableT _o) {
    _o.Rows = new List<GDT.ContentOpenObjectT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ContentOpenObjectTable> Pack(FlatBufferBuilder builder, ContentOpenObjectTableT _o) {
    if (_o == null) return default(Offset<GDT.ContentOpenObjectTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ContentOpenObject>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ContentOpenObject.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateContentOpenObjectTable(
      builder,
      _Rows);
  }
};

public class ContentOpenObjectTableT
{
  public List<GDT.ContentOpenObjectT> Rows { get; set; }

  public ContentOpenObjectTableT() {
    this.Rows = null;
  }
}

/// Defined by LoadingScene.xlsx
public struct LoadingSceneInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadingSceneInfo GetRootAsLoadingSceneInfo(ByteBuffer _bb) { return GetRootAsLoadingSceneInfo(_bb, new LoadingSceneInfo()); }
  public static LoadingSceneInfo GetRootAsLoadingSceneInfo(ByteBuffer _bb, LoadingSceneInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadingSceneInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LoadingID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LoadingSceneID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SceneProbability { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.LoadingSceneInfo> CreateLoadingSceneInfo(FlatBufferBuilder builder,
      int LoadingID = 0,
      int LoadingSceneID = 0,
      int SceneProbability = 0) {
    builder.StartTable(3);
    LoadingSceneInfo.AddSceneProbability(builder, SceneProbability);
    LoadingSceneInfo.AddLoadingSceneID(builder, LoadingSceneID);
    LoadingSceneInfo.AddLoadingID(builder, LoadingID);
    return LoadingSceneInfo.EndLoadingSceneInfo(builder);
  }

  public static void StartLoadingSceneInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddLoadingID(FlatBufferBuilder builder, int LoadingID) { builder.AddInt(0, LoadingID, 0); }
  public static void AddLoadingSceneID(FlatBufferBuilder builder, int LoadingSceneID) { builder.AddInt(1, LoadingSceneID, 0); }
  public static void AddSceneProbability(FlatBufferBuilder builder, int SceneProbability) { builder.AddInt(2, SceneProbability, 0); }
  public static Offset<GDT.LoadingSceneInfo> EndLoadingSceneInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LoadingSceneInfo>(o);
  }
  public LoadingSceneInfoT UnPack() {
    var _o = new LoadingSceneInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadingSceneInfoT _o) {
    _o.LoadingID = this.LoadingID;
    _o.LoadingSceneID = this.LoadingSceneID;
    _o.SceneProbability = this.SceneProbability;
  }
  public static Offset<GDT.LoadingSceneInfo> Pack(FlatBufferBuilder builder, LoadingSceneInfoT _o) {
    if (_o == null) return default(Offset<GDT.LoadingSceneInfo>);
    return CreateLoadingSceneInfo(
      builder,
      _o.LoadingID,
      _o.LoadingSceneID,
      _o.SceneProbability);
  }
};

public class LoadingSceneInfoT
{
  public int LoadingID { get; set; }
  public int LoadingSceneID { get; set; }
  public int SceneProbability { get; set; }

  public LoadingSceneInfoT() {
    this.LoadingID = 0;
    this.LoadingSceneID = 0;
    this.SceneProbability = 0;
  }
}

public struct LoadingSceneInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadingSceneInfoTable GetRootAsLoadingSceneInfoTable(ByteBuffer _bb) { return GetRootAsLoadingSceneInfoTable(_bb, new LoadingSceneInfoTable()); }
  public static LoadingSceneInfoTable GetRootAsLoadingSceneInfoTable(ByteBuffer _bb, LoadingSceneInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadingSceneInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LoadingSceneInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LoadingSceneInfo?)(new GDT.LoadingSceneInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LoadingSceneInfoTable> CreateLoadingSceneInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LoadingSceneInfoTable.AddRows(builder, RowsOffset);
    return LoadingSceneInfoTable.EndLoadingSceneInfoTable(builder);
  }

  public static void StartLoadingSceneInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LoadingSceneInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LoadingSceneInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LoadingSceneInfoTable> EndLoadingSceneInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LoadingSceneInfoTable>(o);
  }
  public LoadingSceneInfoTableT UnPack() {
    var _o = new LoadingSceneInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadingSceneInfoTableT _o) {
    _o.Rows = new List<GDT.LoadingSceneInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LoadingSceneInfoTable> Pack(FlatBufferBuilder builder, LoadingSceneInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.LoadingSceneInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LoadingSceneInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LoadingSceneInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLoadingSceneInfoTable(
      builder,
      _Rows);
  }
};

public class LoadingSceneInfoTableT
{
  public List<GDT.LoadingSceneInfoT> Rows { get; set; }

  public LoadingSceneInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by LoadingScene.xlsx
public struct LoadingSceneData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadingSceneData GetRootAsLoadingSceneData(ByteBuffer _bb) { return GetRootAsLoadingSceneData(_bb, new LoadingSceneData()); }
  public static LoadingSceneData GetRootAsLoadingSceneData(ByteBuffer _bb, LoadingSceneData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadingSceneData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int LoadingDataID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.LoadingMainType LoadingMainTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.LoadingMainType)__p.bb.Get(o + __p.bb_pos) : GDT.LoadingMainType.LMT_None; } }
  public int OutputOrder { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string LoadingTitle { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetLoadingTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetLoadingTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string LoadingTip { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingTipBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetLoadingTipBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetLoadingTipArray() { return __p.__vector_as_array<byte>(12); }
  public string LoadingText { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLoadingTextBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetLoadingTextBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetLoadingTextArray() { return __p.__vector_as_array<byte>(14); }
  public string ResoureName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResoureNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetResoureNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetResoureNameArray() { return __p.__vector_as_array<byte>(16); }
  public string BGResoureName { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBGResoureNameBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetBGResoureNameBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetBGResoureNameArray() { return __p.__vector_as_array<byte>(18); }

  public static Offset<GDT.LoadingSceneData> CreateLoadingSceneData(FlatBufferBuilder builder,
      int LoadingDataID = 0,
      GDT.LoadingMainType LoadingMainTypeID = GDT.LoadingMainType.LMT_None,
      int OutputOrder = 0,
      StringOffset LoadingTitleOffset = default(StringOffset),
      StringOffset LoadingTipOffset = default(StringOffset),
      StringOffset LoadingTextOffset = default(StringOffset),
      StringOffset ResoureNameOffset = default(StringOffset),
      StringOffset BGResoureNameOffset = default(StringOffset)) {
    builder.StartTable(8);
    LoadingSceneData.AddBGResoureName(builder, BGResoureNameOffset);
    LoadingSceneData.AddResoureName(builder, ResoureNameOffset);
    LoadingSceneData.AddLoadingText(builder, LoadingTextOffset);
    LoadingSceneData.AddLoadingTip(builder, LoadingTipOffset);
    LoadingSceneData.AddLoadingTitle(builder, LoadingTitleOffset);
    LoadingSceneData.AddOutputOrder(builder, OutputOrder);
    LoadingSceneData.AddLoadingDataID(builder, LoadingDataID);
    LoadingSceneData.AddLoadingMainTypeID(builder, LoadingMainTypeID);
    return LoadingSceneData.EndLoadingSceneData(builder);
  }

  public static void StartLoadingSceneData(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddLoadingDataID(FlatBufferBuilder builder, int LoadingDataID) { builder.AddInt(0, LoadingDataID, 0); }
  public static void AddLoadingMainTypeID(FlatBufferBuilder builder, GDT.LoadingMainType LoadingMainTypeID) { builder.AddByte(1, (byte)LoadingMainTypeID, 0); }
  public static void AddOutputOrder(FlatBufferBuilder builder, int OutputOrder) { builder.AddInt(2, OutputOrder, 0); }
  public static void AddLoadingTitle(FlatBufferBuilder builder, StringOffset LoadingTitleOffset) { builder.AddOffset(3, LoadingTitleOffset.Value, 0); }
  public static void AddLoadingTip(FlatBufferBuilder builder, StringOffset LoadingTipOffset) { builder.AddOffset(4, LoadingTipOffset.Value, 0); }
  public static void AddLoadingText(FlatBufferBuilder builder, StringOffset LoadingTextOffset) { builder.AddOffset(5, LoadingTextOffset.Value, 0); }
  public static void AddResoureName(FlatBufferBuilder builder, StringOffset ResoureNameOffset) { builder.AddOffset(6, ResoureNameOffset.Value, 0); }
  public static void AddBGResoureName(FlatBufferBuilder builder, StringOffset BGResoureNameOffset) { builder.AddOffset(7, BGResoureNameOffset.Value, 0); }
  public static Offset<GDT.LoadingSceneData> EndLoadingSceneData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LoadingSceneData>(o);
  }
  public LoadingSceneDataT UnPack() {
    var _o = new LoadingSceneDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadingSceneDataT _o) {
    _o.LoadingDataID = this.LoadingDataID;
    _o.LoadingMainTypeID = this.LoadingMainTypeID;
    _o.OutputOrder = this.OutputOrder;
    _o.LoadingTitle = this.LoadingTitle;
    _o.LoadingTip = this.LoadingTip;
    _o.LoadingText = this.LoadingText;
    _o.ResoureName = this.ResoureName;
    _o.BGResoureName = this.BGResoureName;
  }
  public static Offset<GDT.LoadingSceneData> Pack(FlatBufferBuilder builder, LoadingSceneDataT _o) {
    if (_o == null) return default(Offset<GDT.LoadingSceneData>);
    var _LoadingTitle = _o.LoadingTitle == null ? default(StringOffset) : builder.CreateString(_o.LoadingTitle);
    var _LoadingTip = _o.LoadingTip == null ? default(StringOffset) : builder.CreateString(_o.LoadingTip);
    var _LoadingText = _o.LoadingText == null ? default(StringOffset) : builder.CreateString(_o.LoadingText);
    var _ResoureName = _o.ResoureName == null ? default(StringOffset) : builder.CreateString(_o.ResoureName);
    var _BGResoureName = _o.BGResoureName == null ? default(StringOffset) : builder.CreateString(_o.BGResoureName);
    return CreateLoadingSceneData(
      builder,
      _o.LoadingDataID,
      _o.LoadingMainTypeID,
      _o.OutputOrder,
      _LoadingTitle,
      _LoadingTip,
      _LoadingText,
      _ResoureName,
      _BGResoureName);
  }
};

public class LoadingSceneDataT
{
  public int LoadingDataID { get; set; }
  public GDT.LoadingMainType LoadingMainTypeID { get; set; }
  public int OutputOrder { get; set; }
  public string LoadingTitle { get; set; }
  public string LoadingTip { get; set; }
  public string LoadingText { get; set; }
  public string ResoureName { get; set; }
  public string BGResoureName { get; set; }

  public LoadingSceneDataT() {
    this.LoadingDataID = 0;
    this.LoadingMainTypeID = GDT.LoadingMainType.LMT_None;
    this.OutputOrder = 0;
    this.LoadingTitle = null;
    this.LoadingTip = null;
    this.LoadingText = null;
    this.ResoureName = null;
    this.BGResoureName = null;
  }
}

public struct LoadingSceneDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static LoadingSceneDataTable GetRootAsLoadingSceneDataTable(ByteBuffer _bb) { return GetRootAsLoadingSceneDataTable(_bb, new LoadingSceneDataTable()); }
  public static LoadingSceneDataTable GetRootAsLoadingSceneDataTable(ByteBuffer _bb, LoadingSceneDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public LoadingSceneDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.LoadingSceneData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.LoadingSceneData?)(new GDT.LoadingSceneData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.LoadingSceneDataTable> CreateLoadingSceneDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    LoadingSceneDataTable.AddRows(builder, RowsOffset);
    return LoadingSceneDataTable.EndLoadingSceneDataTable(builder);
  }

  public static void StartLoadingSceneDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.LoadingSceneData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.LoadingSceneData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.LoadingSceneDataTable> EndLoadingSceneDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.LoadingSceneDataTable>(o);
  }
  public LoadingSceneDataTableT UnPack() {
    var _o = new LoadingSceneDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(LoadingSceneDataTableT _o) {
    _o.Rows = new List<GDT.LoadingSceneDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.LoadingSceneDataTable> Pack(FlatBufferBuilder builder, LoadingSceneDataTableT _o) {
    if (_o == null) return default(Offset<GDT.LoadingSceneDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.LoadingSceneData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.LoadingSceneData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateLoadingSceneDataTable(
      builder,
      _Rows);
  }
};

public class LoadingSceneDataTableT
{
  public List<GDT.LoadingSceneDataT> Rows { get; set; }

  public LoadingSceneDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Mail.xlsx
public struct Mail : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Mail GetRootAsMail(ByteBuffer _bb) { return GetRootAsMail(_bb, new Mail()); }
  public static Mail GetRootAsMail(ByteBuffer _bb, Mail obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Mail __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.MailType MailTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.MailType)__p.bb.Get(o + __p.bb_pos) : GDT.MailType.MT_None; } }
  public GDT.MailSubType MailSubTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.MailSubType)__p.bb.Get(o + __p.bb_pos) : GDT.MailSubType.MST_None; } }
  public string MailTitle { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMailTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMailTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMailTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string MailText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMailTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetMailTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetMailTextArray() { return __p.__vector_as_array<byte>(12); }
  public int MailTerm { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.KeepType KeepTypeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.KeepType)__p.bb.Get(o + __p.bb_pos) : GDT.KeepType.KT_None; } }
  public GDT.ApplicationType MailAccountTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.ApplicationType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplicationType.AT_Account; } }
  public string MailFrom { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMailFromBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMailFromBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMailFromArray() { return __p.__vector_as_array<byte>(20); }

  public static Offset<GDT.Mail> CreateMail(FlatBufferBuilder builder,
      int Index = 0,
      GDT.MailType MailTypeID = GDT.MailType.MT_None,
      GDT.MailSubType MailSubTypeID = GDT.MailSubType.MST_None,
      StringOffset MailTitleOffset = default(StringOffset),
      StringOffset MailTextOffset = default(StringOffset),
      int MailTerm = 0,
      GDT.KeepType KeepTypeID = GDT.KeepType.KT_None,
      GDT.ApplicationType MailAccountTypeID = GDT.ApplicationType.AT_Account,
      StringOffset MailFromOffset = default(StringOffset)) {
    builder.StartTable(9);
    Mail.AddMailFrom(builder, MailFromOffset);
    Mail.AddMailTerm(builder, MailTerm);
    Mail.AddMailText(builder, MailTextOffset);
    Mail.AddMailTitle(builder, MailTitleOffset);
    Mail.AddIndex(builder, Index);
    Mail.AddMailAccountTypeID(builder, MailAccountTypeID);
    Mail.AddKeepTypeID(builder, KeepTypeID);
    Mail.AddMailSubTypeID(builder, MailSubTypeID);
    Mail.AddMailTypeID(builder, MailTypeID);
    return Mail.EndMail(builder);
  }

  public static void StartMail(FlatBufferBuilder builder) { builder.StartTable(9); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddMailTypeID(FlatBufferBuilder builder, GDT.MailType MailTypeID) { builder.AddByte(1, (byte)MailTypeID, 0); }
  public static void AddMailSubTypeID(FlatBufferBuilder builder, GDT.MailSubType MailSubTypeID) { builder.AddByte(2, (byte)MailSubTypeID, 0); }
  public static void AddMailTitle(FlatBufferBuilder builder, StringOffset MailTitleOffset) { builder.AddOffset(3, MailTitleOffset.Value, 0); }
  public static void AddMailText(FlatBufferBuilder builder, StringOffset MailTextOffset) { builder.AddOffset(4, MailTextOffset.Value, 0); }
  public static void AddMailTerm(FlatBufferBuilder builder, int MailTerm) { builder.AddInt(5, MailTerm, 0); }
  public static void AddKeepTypeID(FlatBufferBuilder builder, GDT.KeepType KeepTypeID) { builder.AddByte(6, (byte)KeepTypeID, 0); }
  public static void AddMailAccountTypeID(FlatBufferBuilder builder, GDT.ApplicationType MailAccountTypeID) { builder.AddByte(7, (byte)MailAccountTypeID, 0); }
  public static void AddMailFrom(FlatBufferBuilder builder, StringOffset MailFromOffset) { builder.AddOffset(8, MailFromOffset.Value, 0); }
  public static Offset<GDT.Mail> EndMail(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Mail>(o);
  }
  public MailT UnPack() {
    var _o = new MailT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MailT _o) {
    _o.Index = this.Index;
    _o.MailTypeID = this.MailTypeID;
    _o.MailSubTypeID = this.MailSubTypeID;
    _o.MailTitle = this.MailTitle;
    _o.MailText = this.MailText;
    _o.MailTerm = this.MailTerm;
    _o.KeepTypeID = this.KeepTypeID;
    _o.MailAccountTypeID = this.MailAccountTypeID;
    _o.MailFrom = this.MailFrom;
  }
  public static Offset<GDT.Mail> Pack(FlatBufferBuilder builder, MailT _o) {
    if (_o == null) return default(Offset<GDT.Mail>);
    var _MailTitle = _o.MailTitle == null ? default(StringOffset) : builder.CreateString(_o.MailTitle);
    var _MailText = _o.MailText == null ? default(StringOffset) : builder.CreateString(_o.MailText);
    var _MailFrom = _o.MailFrom == null ? default(StringOffset) : builder.CreateString(_o.MailFrom);
    return CreateMail(
      builder,
      _o.Index,
      _o.MailTypeID,
      _o.MailSubTypeID,
      _MailTitle,
      _MailText,
      _o.MailTerm,
      _o.KeepTypeID,
      _o.MailAccountTypeID,
      _MailFrom);
  }
};

public class MailT
{
  public int Index { get; set; }
  public GDT.MailType MailTypeID { get; set; }
  public GDT.MailSubType MailSubTypeID { get; set; }
  public string MailTitle { get; set; }
  public string MailText { get; set; }
  public int MailTerm { get; set; }
  public GDT.KeepType KeepTypeID { get; set; }
  public GDT.ApplicationType MailAccountTypeID { get; set; }
  public string MailFrom { get; set; }

  public MailT() {
    this.Index = 0;
    this.MailTypeID = GDT.MailType.MT_None;
    this.MailSubTypeID = GDT.MailSubType.MST_None;
    this.MailTitle = null;
    this.MailText = null;
    this.MailTerm = 0;
    this.KeepTypeID = GDT.KeepType.KT_None;
    this.MailAccountTypeID = GDT.ApplicationType.AT_Account;
    this.MailFrom = null;
  }
}

public struct MailTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MailTable GetRootAsMailTable(ByteBuffer _bb) { return GetRootAsMailTable(_bb, new MailTable()); }
  public static MailTable GetRootAsMailTable(ByteBuffer _bb, MailTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MailTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Mail? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Mail?)(new GDT.Mail()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.MailTable> CreateMailTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MailTable.AddRows(builder, RowsOffset);
    return MailTable.EndMailTable(builder);
  }

  public static void StartMailTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Mail>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Mail>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.MailTable> EndMailTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MailTable>(o);
  }
  public MailTableT UnPack() {
    var _o = new MailTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MailTableT _o) {
    _o.Rows = new List<GDT.MailT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.MailTable> Pack(FlatBufferBuilder builder, MailTableT _o) {
    if (_o == null) return default(Offset<GDT.MailTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Mail>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Mail.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateMailTable(
      builder,
      _Rows);
  }
};

public class MailTableT
{
  public List<GDT.MailT> Rows { get; set; }

  public MailTableT() {
    this.Rows = null;
  }
}

/// Defined by Making.xlsx
public struct MakingInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MakingInfo GetRootAsMakingInfo(ByteBuffer _bb) { return GetRootAsMakingInfo(_bb, new MakingInfo()); }
  public static MakingInfo GetRootAsMakingInfo(ByteBuffer _bb, MakingInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MakingInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Sort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TabName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTabNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetTabNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetTabNameArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GDT.MakingInfo> CreateMakingInfo(FlatBufferBuilder builder,
      int Index = 0,
      int Sort = 0,
      StringOffset TabNameOffset = default(StringOffset)) {
    builder.StartTable(3);
    MakingInfo.AddTabName(builder, TabNameOffset);
    MakingInfo.AddSort(builder, Sort);
    MakingInfo.AddIndex(builder, Index);
    return MakingInfo.EndMakingInfo(builder);
  }

  public static void StartMakingInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(1, Sort, 0); }
  public static void AddTabName(FlatBufferBuilder builder, StringOffset TabNameOffset) { builder.AddOffset(2, TabNameOffset.Value, 0); }
  public static Offset<GDT.MakingInfo> EndMakingInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MakingInfo>(o);
  }
  public MakingInfoT UnPack() {
    var _o = new MakingInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MakingInfoT _o) {
    _o.Index = this.Index;
    _o.Sort = this.Sort;
    _o.TabName = this.TabName;
  }
  public static Offset<GDT.MakingInfo> Pack(FlatBufferBuilder builder, MakingInfoT _o) {
    if (_o == null) return default(Offset<GDT.MakingInfo>);
    var _TabName = _o.TabName == null ? default(StringOffset) : builder.CreateString(_o.TabName);
    return CreateMakingInfo(
      builder,
      _o.Index,
      _o.Sort,
      _TabName);
  }
};

public class MakingInfoT
{
  public int Index { get; set; }
  public int Sort { get; set; }
  public string TabName { get; set; }

  public MakingInfoT() {
    this.Index = 0;
    this.Sort = 0;
    this.TabName = null;
  }
}

public struct MakingInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MakingInfoTable GetRootAsMakingInfoTable(ByteBuffer _bb) { return GetRootAsMakingInfoTable(_bb, new MakingInfoTable()); }
  public static MakingInfoTable GetRootAsMakingInfoTable(ByteBuffer _bb, MakingInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MakingInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.MakingInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.MakingInfo?)(new GDT.MakingInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.MakingInfoTable> CreateMakingInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MakingInfoTable.AddRows(builder, RowsOffset);
    return MakingInfoTable.EndMakingInfoTable(builder);
  }

  public static void StartMakingInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.MakingInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.MakingInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.MakingInfoTable> EndMakingInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MakingInfoTable>(o);
  }
  public MakingInfoTableT UnPack() {
    var _o = new MakingInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MakingInfoTableT _o) {
    _o.Rows = new List<GDT.MakingInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.MakingInfoTable> Pack(FlatBufferBuilder builder, MakingInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.MakingInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.MakingInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.MakingInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateMakingInfoTable(
      builder,
      _Rows);
  }
};

public class MakingInfoTableT
{
  public List<GDT.MakingInfoT> Rows { get; set; }

  public MakingInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Making.xlsx
public struct MakingListData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MakingListData GetRootAsMakingListData(ByteBuffer _bb) { return GetRootAsMakingListData(_bb, new MakingListData()); }
  public static MakingListData GetRootAsMakingListData(ByteBuffer _bb, MakingListData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MakingListData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MakingID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ListGroupKey { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.TierType TierTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.TierType)__p.bb.Get(o + __p.bb_pos) : GDT.TierType.TT_None; } }
  public int TierGrade { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType MakingCurrencyMainTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType MakingCurrencyTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int MakingCurrencyCost { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardDataID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string MakingName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMakingNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetMakingNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetMakingNameArray() { return __p.__vector_as_array<byte>(20); }
  public string MakingImg { get { int o = __p.__offset(22); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMakingImgBytes() { return __p.__vector_as_span<byte>(22, 1); }
#else
  public ArraySegment<byte>? GetMakingImgBytes() { return __p.__vector_as_arraysegment(22); }
#endif
  public byte[] GetMakingImgArray() { return __p.__vector_as_array<byte>(22); }

  public static Offset<GDT.MakingListData> CreateMakingListData(FlatBufferBuilder builder,
      int MakingID = 0,
      int ListGroupKey = 0,
      GDT.TierType TierTypeID = GDT.TierType.TT_None,
      int TierGrade = 0,
      GDT.CurrencyMainType MakingCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType MakingCurrencyTypeID = GDT.CurrencySubType.CST_None,
      int MakingCurrencyCost = 0,
      int RewardDataID = 0,
      StringOffset MakingNameOffset = default(StringOffset),
      StringOffset MakingImgOffset = default(StringOffset)) {
    builder.StartTable(10);
    MakingListData.AddMakingImg(builder, MakingImgOffset);
    MakingListData.AddMakingName(builder, MakingNameOffset);
    MakingListData.AddRewardDataID(builder, RewardDataID);
    MakingListData.AddMakingCurrencyCost(builder, MakingCurrencyCost);
    MakingListData.AddTierGrade(builder, TierGrade);
    MakingListData.AddListGroupKey(builder, ListGroupKey);
    MakingListData.AddMakingID(builder, MakingID);
    MakingListData.AddMakingCurrencyTypeID(builder, MakingCurrencyTypeID);
    MakingListData.AddMakingCurrencyMainTypeID(builder, MakingCurrencyMainTypeID);
    MakingListData.AddTierTypeID(builder, TierTypeID);
    return MakingListData.EndMakingListData(builder);
  }

  public static void StartMakingListData(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddMakingID(FlatBufferBuilder builder, int MakingID) { builder.AddInt(0, MakingID, 0); }
  public static void AddListGroupKey(FlatBufferBuilder builder, int ListGroupKey) { builder.AddInt(1, ListGroupKey, 0); }
  public static void AddTierTypeID(FlatBufferBuilder builder, GDT.TierType TierTypeID) { builder.AddByte(2, (byte)TierTypeID, 0); }
  public static void AddTierGrade(FlatBufferBuilder builder, int TierGrade) { builder.AddInt(3, TierGrade, 0); }
  public static void AddMakingCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType MakingCurrencyMainTypeID) { builder.AddByte(4, (byte)MakingCurrencyMainTypeID, 0); }
  public static void AddMakingCurrencyTypeID(FlatBufferBuilder builder, GDT.CurrencySubType MakingCurrencyTypeID) { builder.AddByte(5, (byte)MakingCurrencyTypeID, 0); }
  public static void AddMakingCurrencyCost(FlatBufferBuilder builder, int MakingCurrencyCost) { builder.AddInt(6, MakingCurrencyCost, 0); }
  public static void AddRewardDataID(FlatBufferBuilder builder, int RewardDataID) { builder.AddInt(7, RewardDataID, 0); }
  public static void AddMakingName(FlatBufferBuilder builder, StringOffset MakingNameOffset) { builder.AddOffset(8, MakingNameOffset.Value, 0); }
  public static void AddMakingImg(FlatBufferBuilder builder, StringOffset MakingImgOffset) { builder.AddOffset(9, MakingImgOffset.Value, 0); }
  public static Offset<GDT.MakingListData> EndMakingListData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MakingListData>(o);
  }
  public MakingListDataT UnPack() {
    var _o = new MakingListDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MakingListDataT _o) {
    _o.MakingID = this.MakingID;
    _o.ListGroupKey = this.ListGroupKey;
    _o.TierTypeID = this.TierTypeID;
    _o.TierGrade = this.TierGrade;
    _o.MakingCurrencyMainTypeID = this.MakingCurrencyMainTypeID;
    _o.MakingCurrencyTypeID = this.MakingCurrencyTypeID;
    _o.MakingCurrencyCost = this.MakingCurrencyCost;
    _o.RewardDataID = this.RewardDataID;
    _o.MakingName = this.MakingName;
    _o.MakingImg = this.MakingImg;
  }
  public static Offset<GDT.MakingListData> Pack(FlatBufferBuilder builder, MakingListDataT _o) {
    if (_o == null) return default(Offset<GDT.MakingListData>);
    var _MakingName = _o.MakingName == null ? default(StringOffset) : builder.CreateString(_o.MakingName);
    var _MakingImg = _o.MakingImg == null ? default(StringOffset) : builder.CreateString(_o.MakingImg);
    return CreateMakingListData(
      builder,
      _o.MakingID,
      _o.ListGroupKey,
      _o.TierTypeID,
      _o.TierGrade,
      _o.MakingCurrencyMainTypeID,
      _o.MakingCurrencyTypeID,
      _o.MakingCurrencyCost,
      _o.RewardDataID,
      _MakingName,
      _MakingImg);
  }
};

public class MakingListDataT
{
  public int MakingID { get; set; }
  public int ListGroupKey { get; set; }
  public GDT.TierType TierTypeID { get; set; }
  public int TierGrade { get; set; }
  public GDT.CurrencyMainType MakingCurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType MakingCurrencyTypeID { get; set; }
  public int MakingCurrencyCost { get; set; }
  public int RewardDataID { get; set; }
  public string MakingName { get; set; }
  public string MakingImg { get; set; }

  public MakingListDataT() {
    this.MakingID = 0;
    this.ListGroupKey = 0;
    this.TierTypeID = GDT.TierType.TT_None;
    this.TierGrade = 0;
    this.MakingCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.MakingCurrencyTypeID = GDT.CurrencySubType.CST_None;
    this.MakingCurrencyCost = 0;
    this.RewardDataID = 0;
    this.MakingName = null;
    this.MakingImg = null;
  }
}

public struct MakingListDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MakingListDataTable GetRootAsMakingListDataTable(ByteBuffer _bb) { return GetRootAsMakingListDataTable(_bb, new MakingListDataTable()); }
  public static MakingListDataTable GetRootAsMakingListDataTable(ByteBuffer _bb, MakingListDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MakingListDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.MakingListData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.MakingListData?)(new GDT.MakingListData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.MakingListDataTable> CreateMakingListDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MakingListDataTable.AddRows(builder, RowsOffset);
    return MakingListDataTable.EndMakingListDataTable(builder);
  }

  public static void StartMakingListDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.MakingListData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.MakingListData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.MakingListDataTable> EndMakingListDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MakingListDataTable>(o);
  }
  public MakingListDataTableT UnPack() {
    var _o = new MakingListDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MakingListDataTableT _o) {
    _o.Rows = new List<GDT.MakingListDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.MakingListDataTable> Pack(FlatBufferBuilder builder, MakingListDataTableT _o) {
    if (_o == null) return default(Offset<GDT.MakingListDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.MakingListData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.MakingListData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateMakingListDataTable(
      builder,
      _Rows);
  }
};

public class MakingListDataTableT
{
  public List<GDT.MakingListDataT> Rows { get; set; }

  public MakingListDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Making.xlsx
public struct MakingMaterialData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MakingMaterialData GetRootAsMakingMaterialData(ByteBuffer _bb) { return GetRootAsMakingMaterialData(_bb, new MakingMaterialData()); }
  public static MakingMaterialData GetRootAsMakingMaterialData(ByteBuffer _bb, MakingMaterialData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MakingMaterialData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MakingID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaterialID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaterialCnt { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.MakingMaterialData> CreateMakingMaterialData(FlatBufferBuilder builder,
      int MakingID = 0,
      int MaterialID = 0,
      int MaterialCnt = 0) {
    builder.StartTable(3);
    MakingMaterialData.AddMaterialCnt(builder, MaterialCnt);
    MakingMaterialData.AddMaterialID(builder, MaterialID);
    MakingMaterialData.AddMakingID(builder, MakingID);
    return MakingMaterialData.EndMakingMaterialData(builder);
  }

  public static void StartMakingMaterialData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddMakingID(FlatBufferBuilder builder, int MakingID) { builder.AddInt(0, MakingID, 0); }
  public static void AddMaterialID(FlatBufferBuilder builder, int MaterialID) { builder.AddInt(1, MaterialID, 0); }
  public static void AddMaterialCnt(FlatBufferBuilder builder, int MaterialCnt) { builder.AddInt(2, MaterialCnt, 0); }
  public static Offset<GDT.MakingMaterialData> EndMakingMaterialData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MakingMaterialData>(o);
  }
  public MakingMaterialDataT UnPack() {
    var _o = new MakingMaterialDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MakingMaterialDataT _o) {
    _o.MakingID = this.MakingID;
    _o.MaterialID = this.MaterialID;
    _o.MaterialCnt = this.MaterialCnt;
  }
  public static Offset<GDT.MakingMaterialData> Pack(FlatBufferBuilder builder, MakingMaterialDataT _o) {
    if (_o == null) return default(Offset<GDT.MakingMaterialData>);
    return CreateMakingMaterialData(
      builder,
      _o.MakingID,
      _o.MaterialID,
      _o.MaterialCnt);
  }
};

public class MakingMaterialDataT
{
  public int MakingID { get; set; }
  public int MaterialID { get; set; }
  public int MaterialCnt { get; set; }

  public MakingMaterialDataT() {
    this.MakingID = 0;
    this.MaterialID = 0;
    this.MaterialCnt = 0;
  }
}

public struct MakingMaterialDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MakingMaterialDataTable GetRootAsMakingMaterialDataTable(ByteBuffer _bb) { return GetRootAsMakingMaterialDataTable(_bb, new MakingMaterialDataTable()); }
  public static MakingMaterialDataTable GetRootAsMakingMaterialDataTable(ByteBuffer _bb, MakingMaterialDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MakingMaterialDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.MakingMaterialData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.MakingMaterialData?)(new GDT.MakingMaterialData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.MakingMaterialDataTable> CreateMakingMaterialDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MakingMaterialDataTable.AddRows(builder, RowsOffset);
    return MakingMaterialDataTable.EndMakingMaterialDataTable(builder);
  }

  public static void StartMakingMaterialDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.MakingMaterialData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.MakingMaterialData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.MakingMaterialDataTable> EndMakingMaterialDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MakingMaterialDataTable>(o);
  }
  public MakingMaterialDataTableT UnPack() {
    var _o = new MakingMaterialDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MakingMaterialDataTableT _o) {
    _o.Rows = new List<GDT.MakingMaterialDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.MakingMaterialDataTable> Pack(FlatBufferBuilder builder, MakingMaterialDataTableT _o) {
    if (_o == null) return default(Offset<GDT.MakingMaterialDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.MakingMaterialData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.MakingMaterialData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateMakingMaterialDataTable(
      builder,
      _Rows);
  }
};

public class MakingMaterialDataTableT
{
  public List<GDT.MakingMaterialDataT> Rows { get; set; }

  public MakingMaterialDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Map.xlsx
public struct MapInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MapInfo GetRootAsMapInfo(ByteBuffer _bb) { return GetRootAsMapInfo(_bb, new MapInfo()); }
  public static MapInfo GetRootAsMapInfo(ByteBuffer _bb, MapInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int MapID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.MapType MapTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.MapType)__p.bb.Get(o + __p.bb_pos) : GDT.MapType.MT_None; } }
  public string MapName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMapNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMapNameArray() { return __p.__vector_as_array<byte>(8); }
  public string MapSceneName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMapSceneNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetMapSceneNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetMapSceneNameArray() { return __p.__vector_as_array<byte>(10); }
  public float MinimapOffsetX { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MinimapOffsetY { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string MiniMapName { get { int o = __p.__offset(16); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMiniMapNameBytes() { return __p.__vector_as_span<byte>(16, 1); }
#else
  public ArraySegment<byte>? GetMiniMapNameBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public byte[] GetMiniMapNameArray() { return __p.__vector_as_array<byte>(16); }
  public int BgmSoundId { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapSizeX { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapSizeY { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool TouchMove { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int ArrivalSpawnGroupID { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EnvironmentGroupID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BasicChannel { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ChannelMax { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PopulationMax { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.MapInfo> CreateMapInfo(FlatBufferBuilder builder,
      int MapID = 0,
      GDT.MapType MapTypeID = GDT.MapType.MT_None,
      StringOffset MapNameOffset = default(StringOffset),
      StringOffset MapSceneNameOffset = default(StringOffset),
      float MinimapOffsetX = 0.0f,
      float MinimapOffsetY = 0.0f,
      StringOffset MiniMapNameOffset = default(StringOffset),
      int BgmSoundId = 0,
      int MapSizeX = 0,
      int MapSizeY = 0,
      bool TouchMove = false,
      int ArrivalSpawnGroupID = 0,
      int EnvironmentGroupID = 0,
      int BasicChannel = 0,
      int ChannelMax = 0,
      int PopulationMax = 0) {
    builder.StartTable(16);
    MapInfo.AddPopulationMax(builder, PopulationMax);
    MapInfo.AddChannelMax(builder, ChannelMax);
    MapInfo.AddBasicChannel(builder, BasicChannel);
    MapInfo.AddEnvironmentGroupID(builder, EnvironmentGroupID);
    MapInfo.AddArrivalSpawnGroupID(builder, ArrivalSpawnGroupID);
    MapInfo.AddMapSizeY(builder, MapSizeY);
    MapInfo.AddMapSizeX(builder, MapSizeX);
    MapInfo.AddBgmSoundId(builder, BgmSoundId);
    MapInfo.AddMiniMapName(builder, MiniMapNameOffset);
    MapInfo.AddMinimapOffsetY(builder, MinimapOffsetY);
    MapInfo.AddMinimapOffsetX(builder, MinimapOffsetX);
    MapInfo.AddMapSceneName(builder, MapSceneNameOffset);
    MapInfo.AddMapName(builder, MapNameOffset);
    MapInfo.AddMapID(builder, MapID);
    MapInfo.AddTouchMove(builder, TouchMove);
    MapInfo.AddMapTypeID(builder, MapTypeID);
    return MapInfo.EndMapInfo(builder);
  }

  public static void StartMapInfo(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(0, MapID, 0); }
  public static void AddMapTypeID(FlatBufferBuilder builder, GDT.MapType MapTypeID) { builder.AddByte(1, (byte)MapTypeID, 0); }
  public static void AddMapName(FlatBufferBuilder builder, StringOffset MapNameOffset) { builder.AddOffset(2, MapNameOffset.Value, 0); }
  public static void AddMapSceneName(FlatBufferBuilder builder, StringOffset MapSceneNameOffset) { builder.AddOffset(3, MapSceneNameOffset.Value, 0); }
  public static void AddMinimapOffsetX(FlatBufferBuilder builder, float MinimapOffsetX) { builder.AddFloat(4, MinimapOffsetX, 0.0f); }
  public static void AddMinimapOffsetY(FlatBufferBuilder builder, float MinimapOffsetY) { builder.AddFloat(5, MinimapOffsetY, 0.0f); }
  public static void AddMiniMapName(FlatBufferBuilder builder, StringOffset MiniMapNameOffset) { builder.AddOffset(6, MiniMapNameOffset.Value, 0); }
  public static void AddBgmSoundId(FlatBufferBuilder builder, int BgmSoundId) { builder.AddInt(7, BgmSoundId, 0); }
  public static void AddMapSizeX(FlatBufferBuilder builder, int MapSizeX) { builder.AddInt(8, MapSizeX, 0); }
  public static void AddMapSizeY(FlatBufferBuilder builder, int MapSizeY) { builder.AddInt(9, MapSizeY, 0); }
  public static void AddTouchMove(FlatBufferBuilder builder, bool TouchMove) { builder.AddBool(10, TouchMove, false); }
  public static void AddArrivalSpawnGroupID(FlatBufferBuilder builder, int ArrivalSpawnGroupID) { builder.AddInt(11, ArrivalSpawnGroupID, 0); }
  public static void AddEnvironmentGroupID(FlatBufferBuilder builder, int EnvironmentGroupID) { builder.AddInt(12, EnvironmentGroupID, 0); }
  public static void AddBasicChannel(FlatBufferBuilder builder, int BasicChannel) { builder.AddInt(13, BasicChannel, 0); }
  public static void AddChannelMax(FlatBufferBuilder builder, int ChannelMax) { builder.AddInt(14, ChannelMax, 0); }
  public static void AddPopulationMax(FlatBufferBuilder builder, int PopulationMax) { builder.AddInt(15, PopulationMax, 0); }
  public static Offset<GDT.MapInfo> EndMapInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MapInfo>(o);
  }
  public MapInfoT UnPack() {
    var _o = new MapInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapInfoT _o) {
    _o.MapID = this.MapID;
    _o.MapTypeID = this.MapTypeID;
    _o.MapName = this.MapName;
    _o.MapSceneName = this.MapSceneName;
    _o.MinimapOffsetX = this.MinimapOffsetX;
    _o.MinimapOffsetY = this.MinimapOffsetY;
    _o.MiniMapName = this.MiniMapName;
    _o.BgmSoundId = this.BgmSoundId;
    _o.MapSizeX = this.MapSizeX;
    _o.MapSizeY = this.MapSizeY;
    _o.TouchMove = this.TouchMove;
    _o.ArrivalSpawnGroupID = this.ArrivalSpawnGroupID;
    _o.EnvironmentGroupID = this.EnvironmentGroupID;
    _o.BasicChannel = this.BasicChannel;
    _o.ChannelMax = this.ChannelMax;
    _o.PopulationMax = this.PopulationMax;
  }
  public static Offset<GDT.MapInfo> Pack(FlatBufferBuilder builder, MapInfoT _o) {
    if (_o == null) return default(Offset<GDT.MapInfo>);
    var _MapName = _o.MapName == null ? default(StringOffset) : builder.CreateString(_o.MapName);
    var _MapSceneName = _o.MapSceneName == null ? default(StringOffset) : builder.CreateString(_o.MapSceneName);
    var _MiniMapName = _o.MiniMapName == null ? default(StringOffset) : builder.CreateString(_o.MiniMapName);
    return CreateMapInfo(
      builder,
      _o.MapID,
      _o.MapTypeID,
      _MapName,
      _MapSceneName,
      _o.MinimapOffsetX,
      _o.MinimapOffsetY,
      _MiniMapName,
      _o.BgmSoundId,
      _o.MapSizeX,
      _o.MapSizeY,
      _o.TouchMove,
      _o.ArrivalSpawnGroupID,
      _o.EnvironmentGroupID,
      _o.BasicChannel,
      _o.ChannelMax,
      _o.PopulationMax);
  }
};

public class MapInfoT
{
  public int MapID { get; set; }
  public GDT.MapType MapTypeID { get; set; }
  public string MapName { get; set; }
  public string MapSceneName { get; set; }
  public float MinimapOffsetX { get; set; }
  public float MinimapOffsetY { get; set; }
  public string MiniMapName { get; set; }
  public int BgmSoundId { get; set; }
  public int MapSizeX { get; set; }
  public int MapSizeY { get; set; }
  public bool TouchMove { get; set; }
  public int ArrivalSpawnGroupID { get; set; }
  public int EnvironmentGroupID { get; set; }
  public int BasicChannel { get; set; }
  public int ChannelMax { get; set; }
  public int PopulationMax { get; set; }

  public MapInfoT() {
    this.MapID = 0;
    this.MapTypeID = GDT.MapType.MT_None;
    this.MapName = null;
    this.MapSceneName = null;
    this.MinimapOffsetX = 0.0f;
    this.MinimapOffsetY = 0.0f;
    this.MiniMapName = null;
    this.BgmSoundId = 0;
    this.MapSizeX = 0;
    this.MapSizeY = 0;
    this.TouchMove = false;
    this.ArrivalSpawnGroupID = 0;
    this.EnvironmentGroupID = 0;
    this.BasicChannel = 0;
    this.ChannelMax = 0;
    this.PopulationMax = 0;
  }
}

public struct MapInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MapInfoTable GetRootAsMapInfoTable(ByteBuffer _bb) { return GetRootAsMapInfoTable(_bb, new MapInfoTable()); }
  public static MapInfoTable GetRootAsMapInfoTable(ByteBuffer _bb, MapInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MapInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.MapInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.MapInfo?)(new GDT.MapInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.MapInfoTable> CreateMapInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MapInfoTable.AddRows(builder, RowsOffset);
    return MapInfoTable.EndMapInfoTable(builder);
  }

  public static void StartMapInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.MapInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.MapInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.MapInfoTable> EndMapInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MapInfoTable>(o);
  }
  public MapInfoTableT UnPack() {
    var _o = new MapInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MapInfoTableT _o) {
    _o.Rows = new List<GDT.MapInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.MapInfoTable> Pack(FlatBufferBuilder builder, MapInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.MapInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.MapInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.MapInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateMapInfoTable(
      builder,
      _Rows);
  }
};

public class MapInfoTableT
{
  public List<GDT.MapInfoT> Rows { get; set; }

  public MapInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Map.xlsx
public struct ArrivalSpawnGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ArrivalSpawnGroup GetRootAsArrivalSpawnGroup(ByteBuffer _bb) { return GetRootAsArrivalSpawnGroup(_bb, new ArrivalSpawnGroup()); }
  public static ArrivalSpawnGroup GetRootAsArrivalSpawnGroup(ByteBuffer _bb, ArrivalSpawnGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArrivalSpawnGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SpawnGroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? SpawnPoint { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartArrivalSpawnGroup(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddSpawnGroupID(FlatBufferBuilder builder, int SpawnGroupID) { builder.AddInt(0, SpawnGroupID, 0); }
  public static void AddSpawnPoint(FlatBufferBuilder builder, Offset<GDT.vector3> SpawnPointOffset) { builder.AddStruct(1, SpawnPointOffset.Value, 0); }
  public static Offset<GDT.ArrivalSpawnGroup> EndArrivalSpawnGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ArrivalSpawnGroup>(o);
  }
  public ArrivalSpawnGroupT UnPack() {
    var _o = new ArrivalSpawnGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArrivalSpawnGroupT _o) {
    _o.SpawnGroupID = this.SpawnGroupID;
    _o.SpawnPoint = this.SpawnPoint.HasValue ? this.SpawnPoint.Value.UnPack() : null;
  }
  public static Offset<GDT.ArrivalSpawnGroup> Pack(FlatBufferBuilder builder, ArrivalSpawnGroupT _o) {
    if (_o == null) return default(Offset<GDT.ArrivalSpawnGroup>);
    StartArrivalSpawnGroup(builder);
    AddSpawnGroupID(builder, _o.SpawnGroupID);
    AddSpawnPoint(builder, GDT.vector3.Pack(builder, _o.SpawnPoint));
    return EndArrivalSpawnGroup(builder);
  }
};

public class ArrivalSpawnGroupT
{
  public int SpawnGroupID { get; set; }
  public GDT.vector3T SpawnPoint { get; set; }

  public ArrivalSpawnGroupT() {
    this.SpawnGroupID = 0;
    this.SpawnPoint = new GDT.vector3T();
  }
}

public struct ArrivalSpawnGroupTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ArrivalSpawnGroupTable GetRootAsArrivalSpawnGroupTable(ByteBuffer _bb) { return GetRootAsArrivalSpawnGroupTable(_bb, new ArrivalSpawnGroupTable()); }
  public static ArrivalSpawnGroupTable GetRootAsArrivalSpawnGroupTable(ByteBuffer _bb, ArrivalSpawnGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ArrivalSpawnGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ArrivalSpawnGroup? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ArrivalSpawnGroup?)(new GDT.ArrivalSpawnGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ArrivalSpawnGroupTable> CreateArrivalSpawnGroupTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ArrivalSpawnGroupTable.AddRows(builder, RowsOffset);
    return ArrivalSpawnGroupTable.EndArrivalSpawnGroupTable(builder);
  }

  public static void StartArrivalSpawnGroupTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ArrivalSpawnGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ArrivalSpawnGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ArrivalSpawnGroupTable> EndArrivalSpawnGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ArrivalSpawnGroupTable>(o);
  }
  public ArrivalSpawnGroupTableT UnPack() {
    var _o = new ArrivalSpawnGroupTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ArrivalSpawnGroupTableT _o) {
    _o.Rows = new List<GDT.ArrivalSpawnGroupT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ArrivalSpawnGroupTable> Pack(FlatBufferBuilder builder, ArrivalSpawnGroupTableT _o) {
    if (_o == null) return default(Offset<GDT.ArrivalSpawnGroupTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ArrivalSpawnGroup>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ArrivalSpawnGroup.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateArrivalSpawnGroupTable(
      builder,
      _Rows);
  }
};

public class ArrivalSpawnGroupTableT
{
  public List<GDT.ArrivalSpawnGroupT> Rows { get; set; }

  public ArrivalSpawnGroupTableT() {
    this.Rows = null;
  }
}

/// Defined by MapWarp.xlsx
public struct Warp : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Warp GetRootAsWarp(ByteBuffer _bb) { return GetRootAsWarp(_bb, new Warp()); }
  public static Warp GetRootAsWarp(ByteBuffer _bb, Warp obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Warp __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StartMapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int WorldPositionInfoID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool FeeCheck { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int TollFee { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.Warp> CreateWarp(FlatBufferBuilder builder,
      int Index = 0,
      int StartMapID = 0,
      int WorldPositionInfoID = 0,
      bool FeeCheck = false,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      int TollFee = 0) {
    builder.StartTable(7);
    Warp.AddTollFee(builder, TollFee);
    Warp.AddWorldPositionInfoID(builder, WorldPositionInfoID);
    Warp.AddStartMapID(builder, StartMapID);
    Warp.AddIndex(builder, Index);
    Warp.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    Warp.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    Warp.AddFeeCheck(builder, FeeCheck);
    return Warp.EndWarp(builder);
  }

  public static void StartWarp(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddStartMapID(FlatBufferBuilder builder, int StartMapID) { builder.AddInt(1, StartMapID, 0); }
  public static void AddWorldPositionInfoID(FlatBufferBuilder builder, int WorldPositionInfoID) { builder.AddInt(2, WorldPositionInfoID, 0); }
  public static void AddFeeCheck(FlatBufferBuilder builder, bool FeeCheck) { builder.AddBool(3, FeeCheck, false); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(4, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(5, (byte)CurrencySubTypeID, 0); }
  public static void AddTollFee(FlatBufferBuilder builder, int TollFee) { builder.AddInt(6, TollFee, 0); }
  public static Offset<GDT.Warp> EndWarp(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Warp>(o);
  }
  public WarpT UnPack() {
    var _o = new WarpT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WarpT _o) {
    _o.Index = this.Index;
    _o.StartMapID = this.StartMapID;
    _o.WorldPositionInfoID = this.WorldPositionInfoID;
    _o.FeeCheck = this.FeeCheck;
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.TollFee = this.TollFee;
  }
  public static Offset<GDT.Warp> Pack(FlatBufferBuilder builder, WarpT _o) {
    if (_o == null) return default(Offset<GDT.Warp>);
    return CreateWarp(
      builder,
      _o.Index,
      _o.StartMapID,
      _o.WorldPositionInfoID,
      _o.FeeCheck,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeID,
      _o.TollFee);
  }
};

public class WarpT
{
  public int Index { get; set; }
  public int StartMapID { get; set; }
  public int WorldPositionInfoID { get; set; }
  public bool FeeCheck { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public int TollFee { get; set; }

  public WarpT() {
    this.Index = 0;
    this.StartMapID = 0;
    this.WorldPositionInfoID = 0;
    this.FeeCheck = false;
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.TollFee = 0;
  }
}

public struct WarpTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static WarpTable GetRootAsWarpTable(ByteBuffer _bb) { return GetRootAsWarpTable(_bb, new WarpTable()); }
  public static WarpTable GetRootAsWarpTable(ByteBuffer _bb, WarpTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WarpTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Warp? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Warp?)(new GDT.Warp()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.WarpTable> CreateWarpTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    WarpTable.AddRows(builder, RowsOffset);
    return WarpTable.EndWarpTable(builder);
  }

  public static void StartWarpTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Warp>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Warp>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.WarpTable> EndWarpTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.WarpTable>(o);
  }
  public WarpTableT UnPack() {
    var _o = new WarpTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WarpTableT _o) {
    _o.Rows = new List<GDT.WarpT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.WarpTable> Pack(FlatBufferBuilder builder, WarpTableT _o) {
    if (_o == null) return default(Offset<GDT.WarpTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Warp>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Warp.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateWarpTable(
      builder,
      _Rows);
  }
};

public class WarpTableT
{
  public List<GDT.WarpT> Rows { get; set; }

  public WarpTableT() {
    this.Rows = null;
  }
}

/// Defined by Mission.xlsx
public struct QuestInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestInfo GetRootAsQuestInfo(ByteBuffer _bb) { return GetRootAsQuestInfo(_bb, new QuestInfo()); }
  public static QuestInfo GetRootAsQuestInfo(ByteBuffer _bb, QuestInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int QuestID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.QuestType QuestType { get { int o = __p.__offset(6); return o != 0 ? (GDT.QuestType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestType.QT_None; } }
  public GDT.ContentsResetType QuestReset { get { int o = __p.__offset(8); return o != 0 ? (GDT.ContentsResetType)__p.bb.Get(o + __p.bb_pos) : GDT.ContentsResetType.CRT_None; } }
  public string QuestTitle { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTitleBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetQuestTitleBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetQuestTitleArray() { return __p.__vector_as_array<byte>(10); }
  public string QuestText { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTextBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetQuestTextBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetQuestTextArray() { return __p.__vector_as_array<byte>(12); }
  public int StartScenarioID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndScenarioID { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ScriptSkip { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int QuestLevelMin { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestLevelMax { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestTabType { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestGroupID { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PreQuestID { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.QuestAcceptType QusetAcceptType { get { int o = __p.__offset(30); return o != 0 ? (GDT.QuestAcceptType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestAcceptType.QAT_None; } }
  public GDT.QuestConditionType QuestStartType { get { int o = __p.__offset(32); return o != 0 ? (GDT.QuestConditionType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestConditionType.QT_None; } }
  public int QuestStartValue01 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestStartValue02 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestStartValue03 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestStartValue04 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SupplyRewardDataID { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardDataID { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Show { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.QuestInfo> CreateQuestInfo(FlatBufferBuilder builder,
      int QuestID = 0,
      GDT.QuestType QuestType = GDT.QuestType.QT_None,
      GDT.ContentsResetType QuestReset = GDT.ContentsResetType.CRT_None,
      StringOffset QuestTitleOffset = default(StringOffset),
      StringOffset QuestTextOffset = default(StringOffset),
      int StartScenarioID = 0,
      int EndScenarioID = 0,
      bool ScriptSkip = false,
      int QuestLevelMin = 0,
      int QuestLevelMax = 0,
      int QuestTabType = 0,
      int QuestGroupID = 0,
      int PreQuestID = 0,
      GDT.QuestAcceptType QusetAcceptType = GDT.QuestAcceptType.QAT_None,
      GDT.QuestConditionType QuestStartType = GDT.QuestConditionType.QT_None,
      int QuestStartValue01 = 0,
      int QuestStartValue02 = 0,
      int QuestStartValue03 = 0,
      int QuestStartValue04 = 0,
      int SupplyRewardDataID = 0,
      int RewardDataID = 0,
      bool Show = false) {
    builder.StartTable(22);
    QuestInfo.AddRewardDataID(builder, RewardDataID);
    QuestInfo.AddSupplyRewardDataID(builder, SupplyRewardDataID);
    QuestInfo.AddQuestStartValue04(builder, QuestStartValue04);
    QuestInfo.AddQuestStartValue03(builder, QuestStartValue03);
    QuestInfo.AddQuestStartValue02(builder, QuestStartValue02);
    QuestInfo.AddQuestStartValue01(builder, QuestStartValue01);
    QuestInfo.AddPreQuestID(builder, PreQuestID);
    QuestInfo.AddQuestGroupID(builder, QuestGroupID);
    QuestInfo.AddQuestTabType(builder, QuestTabType);
    QuestInfo.AddQuestLevelMax(builder, QuestLevelMax);
    QuestInfo.AddQuestLevelMin(builder, QuestLevelMin);
    QuestInfo.AddEndScenarioID(builder, EndScenarioID);
    QuestInfo.AddStartScenarioID(builder, StartScenarioID);
    QuestInfo.AddQuestText(builder, QuestTextOffset);
    QuestInfo.AddQuestTitle(builder, QuestTitleOffset);
    QuestInfo.AddQuestID(builder, QuestID);
    QuestInfo.AddShow(builder, Show);
    QuestInfo.AddQuestStartType(builder, QuestStartType);
    QuestInfo.AddQusetAcceptType(builder, QusetAcceptType);
    QuestInfo.AddScriptSkip(builder, ScriptSkip);
    QuestInfo.AddQuestReset(builder, QuestReset);
    QuestInfo.AddQuestType(builder, QuestType);
    return QuestInfo.EndQuestInfo(builder);
  }

  public static void StartQuestInfo(FlatBufferBuilder builder) { builder.StartTable(22); }
  public static void AddQuestID(FlatBufferBuilder builder, int QuestID) { builder.AddInt(0, QuestID, 0); }
  public static void AddQuestType(FlatBufferBuilder builder, GDT.QuestType QuestType) { builder.AddByte(1, (byte)QuestType, 0); }
  public static void AddQuestReset(FlatBufferBuilder builder, GDT.ContentsResetType QuestReset) { builder.AddByte(2, (byte)QuestReset, 0); }
  public static void AddQuestTitle(FlatBufferBuilder builder, StringOffset QuestTitleOffset) { builder.AddOffset(3, QuestTitleOffset.Value, 0); }
  public static void AddQuestText(FlatBufferBuilder builder, StringOffset QuestTextOffset) { builder.AddOffset(4, QuestTextOffset.Value, 0); }
  public static void AddStartScenarioID(FlatBufferBuilder builder, int StartScenarioID) { builder.AddInt(5, StartScenarioID, 0); }
  public static void AddEndScenarioID(FlatBufferBuilder builder, int EndScenarioID) { builder.AddInt(6, EndScenarioID, 0); }
  public static void AddScriptSkip(FlatBufferBuilder builder, bool ScriptSkip) { builder.AddBool(7, ScriptSkip, false); }
  public static void AddQuestLevelMin(FlatBufferBuilder builder, int QuestLevelMin) { builder.AddInt(8, QuestLevelMin, 0); }
  public static void AddQuestLevelMax(FlatBufferBuilder builder, int QuestLevelMax) { builder.AddInt(9, QuestLevelMax, 0); }
  public static void AddQuestTabType(FlatBufferBuilder builder, int QuestTabType) { builder.AddInt(10, QuestTabType, 0); }
  public static void AddQuestGroupID(FlatBufferBuilder builder, int QuestGroupID) { builder.AddInt(11, QuestGroupID, 0); }
  public static void AddPreQuestID(FlatBufferBuilder builder, int PreQuestID) { builder.AddInt(12, PreQuestID, 0); }
  public static void AddQusetAcceptType(FlatBufferBuilder builder, GDT.QuestAcceptType QusetAcceptType) { builder.AddByte(13, (byte)QusetAcceptType, 0); }
  public static void AddQuestStartType(FlatBufferBuilder builder, GDT.QuestConditionType QuestStartType) { builder.AddByte(14, (byte)QuestStartType, 0); }
  public static void AddQuestStartValue01(FlatBufferBuilder builder, int QuestStartValue01) { builder.AddInt(15, QuestStartValue01, 0); }
  public static void AddQuestStartValue02(FlatBufferBuilder builder, int QuestStartValue02) { builder.AddInt(16, QuestStartValue02, 0); }
  public static void AddQuestStartValue03(FlatBufferBuilder builder, int QuestStartValue03) { builder.AddInt(17, QuestStartValue03, 0); }
  public static void AddQuestStartValue04(FlatBufferBuilder builder, int QuestStartValue04) { builder.AddInt(18, QuestStartValue04, 0); }
  public static void AddSupplyRewardDataID(FlatBufferBuilder builder, int SupplyRewardDataID) { builder.AddInt(19, SupplyRewardDataID, 0); }
  public static void AddRewardDataID(FlatBufferBuilder builder, int RewardDataID) { builder.AddInt(20, RewardDataID, 0); }
  public static void AddShow(FlatBufferBuilder builder, bool Show) { builder.AddBool(21, Show, false); }
  public static Offset<GDT.QuestInfo> EndQuestInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestInfo>(o);
  }
  public QuestInfoT UnPack() {
    var _o = new QuestInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestInfoT _o) {
    _o.QuestID = this.QuestID;
    _o.QuestType = this.QuestType;
    _o.QuestReset = this.QuestReset;
    _o.QuestTitle = this.QuestTitle;
    _o.QuestText = this.QuestText;
    _o.StartScenarioID = this.StartScenarioID;
    _o.EndScenarioID = this.EndScenarioID;
    _o.ScriptSkip = this.ScriptSkip;
    _o.QuestLevelMin = this.QuestLevelMin;
    _o.QuestLevelMax = this.QuestLevelMax;
    _o.QuestTabType = this.QuestTabType;
    _o.QuestGroupID = this.QuestGroupID;
    _o.PreQuestID = this.PreQuestID;
    _o.QusetAcceptType = this.QusetAcceptType;
    _o.QuestStartType = this.QuestStartType;
    _o.QuestStartValue01 = this.QuestStartValue01;
    _o.QuestStartValue02 = this.QuestStartValue02;
    _o.QuestStartValue03 = this.QuestStartValue03;
    _o.QuestStartValue04 = this.QuestStartValue04;
    _o.SupplyRewardDataID = this.SupplyRewardDataID;
    _o.RewardDataID = this.RewardDataID;
    _o.Show = this.Show;
  }
  public static Offset<GDT.QuestInfo> Pack(FlatBufferBuilder builder, QuestInfoT _o) {
    if (_o == null) return default(Offset<GDT.QuestInfo>);
    var _QuestTitle = _o.QuestTitle == null ? default(StringOffset) : builder.CreateString(_o.QuestTitle);
    var _QuestText = _o.QuestText == null ? default(StringOffset) : builder.CreateString(_o.QuestText);
    return CreateQuestInfo(
      builder,
      _o.QuestID,
      _o.QuestType,
      _o.QuestReset,
      _QuestTitle,
      _QuestText,
      _o.StartScenarioID,
      _o.EndScenarioID,
      _o.ScriptSkip,
      _o.QuestLevelMin,
      _o.QuestLevelMax,
      _o.QuestTabType,
      _o.QuestGroupID,
      _o.PreQuestID,
      _o.QusetAcceptType,
      _o.QuestStartType,
      _o.QuestStartValue01,
      _o.QuestStartValue02,
      _o.QuestStartValue03,
      _o.QuestStartValue04,
      _o.SupplyRewardDataID,
      _o.RewardDataID,
      _o.Show);
  }
};

public class QuestInfoT
{
  public int QuestID { get; set; }
  public GDT.QuestType QuestType { get; set; }
  public GDT.ContentsResetType QuestReset { get; set; }
  public string QuestTitle { get; set; }
  public string QuestText { get; set; }
  public int StartScenarioID { get; set; }
  public int EndScenarioID { get; set; }
  public bool ScriptSkip { get; set; }
  public int QuestLevelMin { get; set; }
  public int QuestLevelMax { get; set; }
  public int QuestTabType { get; set; }
  public int QuestGroupID { get; set; }
  public int PreQuestID { get; set; }
  public GDT.QuestAcceptType QusetAcceptType { get; set; }
  public GDT.QuestConditionType QuestStartType { get; set; }
  public int QuestStartValue01 { get; set; }
  public int QuestStartValue02 { get; set; }
  public int QuestStartValue03 { get; set; }
  public int QuestStartValue04 { get; set; }
  public int SupplyRewardDataID { get; set; }
  public int RewardDataID { get; set; }
  public bool Show { get; set; }

  public QuestInfoT() {
    this.QuestID = 0;
    this.QuestType = GDT.QuestType.QT_None;
    this.QuestReset = GDT.ContentsResetType.CRT_None;
    this.QuestTitle = null;
    this.QuestText = null;
    this.StartScenarioID = 0;
    this.EndScenarioID = 0;
    this.ScriptSkip = false;
    this.QuestLevelMin = 0;
    this.QuestLevelMax = 0;
    this.QuestTabType = 0;
    this.QuestGroupID = 0;
    this.PreQuestID = 0;
    this.QusetAcceptType = GDT.QuestAcceptType.QAT_None;
    this.QuestStartType = GDT.QuestConditionType.QT_None;
    this.QuestStartValue01 = 0;
    this.QuestStartValue02 = 0;
    this.QuestStartValue03 = 0;
    this.QuestStartValue04 = 0;
    this.SupplyRewardDataID = 0;
    this.RewardDataID = 0;
    this.Show = false;
  }
}

public struct QuestInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestInfoTable GetRootAsQuestInfoTable(ByteBuffer _bb) { return GetRootAsQuestInfoTable(_bb, new QuestInfoTable()); }
  public static QuestInfoTable GetRootAsQuestInfoTable(ByteBuffer _bb, QuestInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.QuestInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.QuestInfo?)(new GDT.QuestInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.QuestInfoTable> CreateQuestInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    QuestInfoTable.AddRows(builder, RowsOffset);
    return QuestInfoTable.EndQuestInfoTable(builder);
  }

  public static void StartQuestInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.QuestInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.QuestInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.QuestInfoTable> EndQuestInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestInfoTable>(o);
  }
  public QuestInfoTableT UnPack() {
    var _o = new QuestInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestInfoTableT _o) {
    _o.Rows = new List<GDT.QuestInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.QuestInfoTable> Pack(FlatBufferBuilder builder, QuestInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.QuestInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.QuestInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.QuestInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateQuestInfoTable(
      builder,
      _Rows);
  }
};

public class QuestInfoTableT
{
  public List<GDT.QuestInfoT> Rows { get; set; }

  public QuestInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Mission.xlsx
public struct QuestComplete : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestComplete GetRootAsQuestComplete(ByteBuffer _bb) { return GetRootAsQuestComplete(_bb, new QuestComplete()); }
  public static QuestComplete GetRootAsQuestComplete(ByteBuffer _bb, QuestComplete obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestComplete __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int QuestCompleteID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string QuestHudText { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestHudTextBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetQuestHudTextBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetQuestHudTextArray() { return __p.__vector_as_array<byte>(8); }
  public int SideTalk { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.QuestConditionType QuestConditionType { get { int o = __p.__offset(12); return o != 0 ? (GDT.QuestConditionType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestConditionType.QT_None; } }
  public int QuestCompleteValue01 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestCompleteValue02 { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestCompleteValue03 { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestCompleteValue04 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestCompleteCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.QuestFailType QuestFailType { get { int o = __p.__offset(24); return o != 0 ? (GDT.QuestFailType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestFailType.QFT_None; } }
  public int QuestFailValue01 { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int QuestFailValue02 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SupplyItemID { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SupplyItemCnt { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float QuestDestinationRange { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GDT.QuestComplete> CreateQuestComplete(FlatBufferBuilder builder,
      int QuestCompleteID = 0,
      int QuestID = 0,
      StringOffset QuestHudTextOffset = default(StringOffset),
      int SideTalk = 0,
      GDT.QuestConditionType QuestConditionType = GDT.QuestConditionType.QT_None,
      int QuestCompleteValue01 = 0,
      int QuestCompleteValue02 = 0,
      int QuestCompleteValue03 = 0,
      int QuestCompleteValue04 = 0,
      int QuestCompleteCount = 0,
      GDT.QuestFailType QuestFailType = GDT.QuestFailType.QFT_None,
      int QuestFailValue01 = 0,
      int QuestFailValue02 = 0,
      int SupplyItemID = 0,
      int SupplyItemCnt = 0,
      float QuestDestinationRange = 0.0f) {
    builder.StartTable(16);
    QuestComplete.AddQuestDestinationRange(builder, QuestDestinationRange);
    QuestComplete.AddSupplyItemCnt(builder, SupplyItemCnt);
    QuestComplete.AddSupplyItemID(builder, SupplyItemID);
    QuestComplete.AddQuestFailValue02(builder, QuestFailValue02);
    QuestComplete.AddQuestFailValue01(builder, QuestFailValue01);
    QuestComplete.AddQuestCompleteCount(builder, QuestCompleteCount);
    QuestComplete.AddQuestCompleteValue04(builder, QuestCompleteValue04);
    QuestComplete.AddQuestCompleteValue03(builder, QuestCompleteValue03);
    QuestComplete.AddQuestCompleteValue02(builder, QuestCompleteValue02);
    QuestComplete.AddQuestCompleteValue01(builder, QuestCompleteValue01);
    QuestComplete.AddSideTalk(builder, SideTalk);
    QuestComplete.AddQuestHudText(builder, QuestHudTextOffset);
    QuestComplete.AddQuestID(builder, QuestID);
    QuestComplete.AddQuestCompleteID(builder, QuestCompleteID);
    QuestComplete.AddQuestFailType(builder, QuestFailType);
    QuestComplete.AddQuestConditionType(builder, QuestConditionType);
    return QuestComplete.EndQuestComplete(builder);
  }

  public static void StartQuestComplete(FlatBufferBuilder builder) { builder.StartTable(16); }
  public static void AddQuestCompleteID(FlatBufferBuilder builder, int QuestCompleteID) { builder.AddInt(0, QuestCompleteID, 0); }
  public static void AddQuestID(FlatBufferBuilder builder, int QuestID) { builder.AddInt(1, QuestID, 0); }
  public static void AddQuestHudText(FlatBufferBuilder builder, StringOffset QuestHudTextOffset) { builder.AddOffset(2, QuestHudTextOffset.Value, 0); }
  public static void AddSideTalk(FlatBufferBuilder builder, int SideTalk) { builder.AddInt(3, SideTalk, 0); }
  public static void AddQuestConditionType(FlatBufferBuilder builder, GDT.QuestConditionType QuestConditionType) { builder.AddByte(4, (byte)QuestConditionType, 0); }
  public static void AddQuestCompleteValue01(FlatBufferBuilder builder, int QuestCompleteValue01) { builder.AddInt(5, QuestCompleteValue01, 0); }
  public static void AddQuestCompleteValue02(FlatBufferBuilder builder, int QuestCompleteValue02) { builder.AddInt(6, QuestCompleteValue02, 0); }
  public static void AddQuestCompleteValue03(FlatBufferBuilder builder, int QuestCompleteValue03) { builder.AddInt(7, QuestCompleteValue03, 0); }
  public static void AddQuestCompleteValue04(FlatBufferBuilder builder, int QuestCompleteValue04) { builder.AddInt(8, QuestCompleteValue04, 0); }
  public static void AddQuestCompleteCount(FlatBufferBuilder builder, int QuestCompleteCount) { builder.AddInt(9, QuestCompleteCount, 0); }
  public static void AddQuestFailType(FlatBufferBuilder builder, GDT.QuestFailType QuestFailType) { builder.AddByte(10, (byte)QuestFailType, 0); }
  public static void AddQuestFailValue01(FlatBufferBuilder builder, int QuestFailValue01) { builder.AddInt(11, QuestFailValue01, 0); }
  public static void AddQuestFailValue02(FlatBufferBuilder builder, int QuestFailValue02) { builder.AddInt(12, QuestFailValue02, 0); }
  public static void AddSupplyItemID(FlatBufferBuilder builder, int SupplyItemID) { builder.AddInt(13, SupplyItemID, 0); }
  public static void AddSupplyItemCnt(FlatBufferBuilder builder, int SupplyItemCnt) { builder.AddInt(14, SupplyItemCnt, 0); }
  public static void AddQuestDestinationRange(FlatBufferBuilder builder, float QuestDestinationRange) { builder.AddFloat(15, QuestDestinationRange, 0.0f); }
  public static Offset<GDT.QuestComplete> EndQuestComplete(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestComplete>(o);
  }
  public QuestCompleteT UnPack() {
    var _o = new QuestCompleteT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestCompleteT _o) {
    _o.QuestCompleteID = this.QuestCompleteID;
    _o.QuestID = this.QuestID;
    _o.QuestHudText = this.QuestHudText;
    _o.SideTalk = this.SideTalk;
    _o.QuestConditionType = this.QuestConditionType;
    _o.QuestCompleteValue01 = this.QuestCompleteValue01;
    _o.QuestCompleteValue02 = this.QuestCompleteValue02;
    _o.QuestCompleteValue03 = this.QuestCompleteValue03;
    _o.QuestCompleteValue04 = this.QuestCompleteValue04;
    _o.QuestCompleteCount = this.QuestCompleteCount;
    _o.QuestFailType = this.QuestFailType;
    _o.QuestFailValue01 = this.QuestFailValue01;
    _o.QuestFailValue02 = this.QuestFailValue02;
    _o.SupplyItemID = this.SupplyItemID;
    _o.SupplyItemCnt = this.SupplyItemCnt;
    _o.QuestDestinationRange = this.QuestDestinationRange;
  }
  public static Offset<GDT.QuestComplete> Pack(FlatBufferBuilder builder, QuestCompleteT _o) {
    if (_o == null) return default(Offset<GDT.QuestComplete>);
    var _QuestHudText = _o.QuestHudText == null ? default(StringOffset) : builder.CreateString(_o.QuestHudText);
    return CreateQuestComplete(
      builder,
      _o.QuestCompleteID,
      _o.QuestID,
      _QuestHudText,
      _o.SideTalk,
      _o.QuestConditionType,
      _o.QuestCompleteValue01,
      _o.QuestCompleteValue02,
      _o.QuestCompleteValue03,
      _o.QuestCompleteValue04,
      _o.QuestCompleteCount,
      _o.QuestFailType,
      _o.QuestFailValue01,
      _o.QuestFailValue02,
      _o.SupplyItemID,
      _o.SupplyItemCnt,
      _o.QuestDestinationRange);
  }
};

public class QuestCompleteT
{
  public int QuestCompleteID { get; set; }
  public int QuestID { get; set; }
  public string QuestHudText { get; set; }
  public int SideTalk { get; set; }
  public GDT.QuestConditionType QuestConditionType { get; set; }
  public int QuestCompleteValue01 { get; set; }
  public int QuestCompleteValue02 { get; set; }
  public int QuestCompleteValue03 { get; set; }
  public int QuestCompleteValue04 { get; set; }
  public int QuestCompleteCount { get; set; }
  public GDT.QuestFailType QuestFailType { get; set; }
  public int QuestFailValue01 { get; set; }
  public int QuestFailValue02 { get; set; }
  public int SupplyItemID { get; set; }
  public int SupplyItemCnt { get; set; }
  public float QuestDestinationRange { get; set; }

  public QuestCompleteT() {
    this.QuestCompleteID = 0;
    this.QuestID = 0;
    this.QuestHudText = null;
    this.SideTalk = 0;
    this.QuestConditionType = GDT.QuestConditionType.QT_None;
    this.QuestCompleteValue01 = 0;
    this.QuestCompleteValue02 = 0;
    this.QuestCompleteValue03 = 0;
    this.QuestCompleteValue04 = 0;
    this.QuestCompleteCount = 0;
    this.QuestFailType = GDT.QuestFailType.QFT_None;
    this.QuestFailValue01 = 0;
    this.QuestFailValue02 = 0;
    this.SupplyItemID = 0;
    this.SupplyItemCnt = 0;
    this.QuestDestinationRange = 0.0f;
  }
}

public struct QuestCompleteTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestCompleteTable GetRootAsQuestCompleteTable(ByteBuffer _bb) { return GetRootAsQuestCompleteTable(_bb, new QuestCompleteTable()); }
  public static QuestCompleteTable GetRootAsQuestCompleteTable(ByteBuffer _bb, QuestCompleteTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestCompleteTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.QuestComplete? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.QuestComplete?)(new GDT.QuestComplete()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.QuestCompleteTable> CreateQuestCompleteTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    QuestCompleteTable.AddRows(builder, RowsOffset);
    return QuestCompleteTable.EndQuestCompleteTable(builder);
  }

  public static void StartQuestCompleteTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.QuestComplete>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.QuestComplete>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.QuestCompleteTable> EndQuestCompleteTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestCompleteTable>(o);
  }
  public QuestCompleteTableT UnPack() {
    var _o = new QuestCompleteTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestCompleteTableT _o) {
    _o.Rows = new List<GDT.QuestCompleteT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.QuestCompleteTable> Pack(FlatBufferBuilder builder, QuestCompleteTableT _o) {
    if (_o == null) return default(Offset<GDT.QuestCompleteTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.QuestComplete>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.QuestComplete.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateQuestCompleteTable(
      builder,
      _Rows);
  }
};

public class QuestCompleteTableT
{
  public List<GDT.QuestCompleteT> Rows { get; set; }

  public QuestCompleteTableT() {
    this.Rows = null;
  }
}

/// Defined by MoveEffect.xlsx
public struct MoveEffectInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MoveEffectInfo GetRootAsMoveEffectInfo(ByteBuffer _bb) { return GetRootAsMoveEffectInfo(_bb, new MoveEffectInfo()); }
  public static MoveEffectInfo GetRootAsMoveEffectInfo(ByteBuffer _bb, MoveEffectInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveEffectInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.MaterialType MaterialTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.MaterialType)__p.bb.Get(o + __p.bb_pos) : GDT.MaterialType.MT_Default; } }
  public int SoundID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.MoveEffectInfo> CreateMoveEffectInfo(FlatBufferBuilder builder,
      int Index = 0,
      GDT.MaterialType MaterialTypeID = GDT.MaterialType.MT_Default,
      int SoundID = 0,
      int EffectID = 0) {
    builder.StartTable(4);
    MoveEffectInfo.AddEffectID(builder, EffectID);
    MoveEffectInfo.AddSoundID(builder, SoundID);
    MoveEffectInfo.AddIndex(builder, Index);
    MoveEffectInfo.AddMaterialTypeID(builder, MaterialTypeID);
    return MoveEffectInfo.EndMoveEffectInfo(builder);
  }

  public static void StartMoveEffectInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddMaterialTypeID(FlatBufferBuilder builder, GDT.MaterialType MaterialTypeID) { builder.AddByte(1, (byte)MaterialTypeID, 0); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(2, SoundID, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(3, EffectID, 0); }
  public static Offset<GDT.MoveEffectInfo> EndMoveEffectInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MoveEffectInfo>(o);
  }
  public MoveEffectInfoT UnPack() {
    var _o = new MoveEffectInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoveEffectInfoT _o) {
    _o.Index = this.Index;
    _o.MaterialTypeID = this.MaterialTypeID;
    _o.SoundID = this.SoundID;
    _o.EffectID = this.EffectID;
  }
  public static Offset<GDT.MoveEffectInfo> Pack(FlatBufferBuilder builder, MoveEffectInfoT _o) {
    if (_o == null) return default(Offset<GDT.MoveEffectInfo>);
    return CreateMoveEffectInfo(
      builder,
      _o.Index,
      _o.MaterialTypeID,
      _o.SoundID,
      _o.EffectID);
  }
};

public class MoveEffectInfoT
{
  public int Index { get; set; }
  public GDT.MaterialType MaterialTypeID { get; set; }
  public int SoundID { get; set; }
  public int EffectID { get; set; }

  public MoveEffectInfoT() {
    this.Index = 0;
    this.MaterialTypeID = GDT.MaterialType.MT_Default;
    this.SoundID = 0;
    this.EffectID = 0;
  }
}

public struct MoveEffectInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static MoveEffectInfoTable GetRootAsMoveEffectInfoTable(ByteBuffer _bb) { return GetRootAsMoveEffectInfoTable(_bb, new MoveEffectInfoTable()); }
  public static MoveEffectInfoTable GetRootAsMoveEffectInfoTable(ByteBuffer _bb, MoveEffectInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MoveEffectInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.MoveEffectInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.MoveEffectInfo?)(new GDT.MoveEffectInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.MoveEffectInfoTable> CreateMoveEffectInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    MoveEffectInfoTable.AddRows(builder, RowsOffset);
    return MoveEffectInfoTable.EndMoveEffectInfoTable(builder);
  }

  public static void StartMoveEffectInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.MoveEffectInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.MoveEffectInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.MoveEffectInfoTable> EndMoveEffectInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.MoveEffectInfoTable>(o);
  }
  public MoveEffectInfoTableT UnPack() {
    var _o = new MoveEffectInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MoveEffectInfoTableT _o) {
    _o.Rows = new List<GDT.MoveEffectInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.MoveEffectInfoTable> Pack(FlatBufferBuilder builder, MoveEffectInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.MoveEffectInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.MoveEffectInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.MoveEffectInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateMoveEffectInfoTable(
      builder,
      _Rows);
  }
};

public class MoveEffectInfoTableT
{
  public List<GDT.MoveEffectInfoT> Rows { get; set; }

  public MoveEffectInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by NpcAnimation.xlsx
public struct NpcAnimation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NpcAnimation GetRootAsNpcAnimation(ByteBuffer _bb) { return GetRootAsNpcAnimation(_bb, new NpcAnimation()); }
  public static NpcAnimation GetRootAsNpcAnimation(ByteBuffer _bb, NpcAnimation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NpcAnimation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NpcAnimationID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.NpcType NpcType { get { int o = __p.__offset(6); return o != 0 ? (GDT.NpcType)__p.bb.Get(o + __p.bb_pos) : GDT.NpcType.NT_None; } }
  public string MotionName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMotionNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetMotionNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetMotionNameArray() { return __p.__vector_as_array<byte>(8); }
  public string AniName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetAniNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetAniNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetAniNameArray() { return __p.__vector_as_array<byte>(10); }
  public bool Loop { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.ActionAnimationType ActionAnimationType { get { int o = __p.__offset(14); return o != 0 ? (GDT.ActionAnimationType)__p.bb.Get(o + __p.bb_pos) : GDT.ActionAnimationType.AAT_None; } }

  public static Offset<GDT.NpcAnimation> CreateNpcAnimation(FlatBufferBuilder builder,
      int NpcAnimationID = 0,
      GDT.NpcType NpcType = GDT.NpcType.NT_None,
      StringOffset MotionNameOffset = default(StringOffset),
      StringOffset AniNameOffset = default(StringOffset),
      bool loop = false,
      GDT.ActionAnimationType ActionAnimationType = GDT.ActionAnimationType.AAT_None) {
    builder.StartTable(6);
    NpcAnimation.AddAniName(builder, AniNameOffset);
    NpcAnimation.AddMotionName(builder, MotionNameOffset);
    NpcAnimation.AddNpcAnimationID(builder, NpcAnimationID);
    NpcAnimation.AddActionAnimationType(builder, ActionAnimationType);
    NpcAnimation.AddLoop(builder, loop);
    NpcAnimation.AddNpcType(builder, NpcType);
    return NpcAnimation.EndNpcAnimation(builder);
  }

  public static void StartNpcAnimation(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddNpcAnimationID(FlatBufferBuilder builder, int NpcAnimationID) { builder.AddInt(0, NpcAnimationID, 0); }
  public static void AddNpcType(FlatBufferBuilder builder, GDT.NpcType NpcType) { builder.AddByte(1, (byte)NpcType, 0); }
  public static void AddMotionName(FlatBufferBuilder builder, StringOffset MotionNameOffset) { builder.AddOffset(2, MotionNameOffset.Value, 0); }
  public static void AddAniName(FlatBufferBuilder builder, StringOffset AniNameOffset) { builder.AddOffset(3, AniNameOffset.Value, 0); }
  public static void AddLoop(FlatBufferBuilder builder, bool loop) { builder.AddBool(4, loop, false); }
  public static void AddActionAnimationType(FlatBufferBuilder builder, GDT.ActionAnimationType ActionAnimationType) { builder.AddByte(5, (byte)ActionAnimationType, 0); }
  public static Offset<GDT.NpcAnimation> EndNpcAnimation(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.NpcAnimation>(o);
  }
  public NpcAnimationT UnPack() {
    var _o = new NpcAnimationT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NpcAnimationT _o) {
    _o.NpcAnimationID = this.NpcAnimationID;
    _o.NpcType = this.NpcType;
    _o.MotionName = this.MotionName;
    _o.AniName = this.AniName;
    _o.Loop = this.Loop;
    _o.ActionAnimationType = this.ActionAnimationType;
  }
  public static Offset<GDT.NpcAnimation> Pack(FlatBufferBuilder builder, NpcAnimationT _o) {
    if (_o == null) return default(Offset<GDT.NpcAnimation>);
    var _MotionName = _o.MotionName == null ? default(StringOffset) : builder.CreateString(_o.MotionName);
    var _AniName = _o.AniName == null ? default(StringOffset) : builder.CreateString(_o.AniName);
    return CreateNpcAnimation(
      builder,
      _o.NpcAnimationID,
      _o.NpcType,
      _MotionName,
      _AniName,
      _o.Loop,
      _o.ActionAnimationType);
  }
};

public class NpcAnimationT
{
  public int NpcAnimationID { get; set; }
  public GDT.NpcType NpcType { get; set; }
  public string MotionName { get; set; }
  public string AniName { get; set; }
  public bool Loop { get; set; }
  public GDT.ActionAnimationType ActionAnimationType { get; set; }

  public NpcAnimationT() {
    this.NpcAnimationID = 0;
    this.NpcType = GDT.NpcType.NT_None;
    this.MotionName = null;
    this.AniName = null;
    this.Loop = false;
    this.ActionAnimationType = GDT.ActionAnimationType.AAT_None;
  }
}

public struct NpcAnimationTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static NpcAnimationTable GetRootAsNpcAnimationTable(ByteBuffer _bb) { return GetRootAsNpcAnimationTable(_bb, new NpcAnimationTable()); }
  public static NpcAnimationTable GetRootAsNpcAnimationTable(ByteBuffer _bb, NpcAnimationTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NpcAnimationTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.NpcAnimation? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.NpcAnimation?)(new GDT.NpcAnimation()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.NpcAnimationTable> CreateNpcAnimationTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    NpcAnimationTable.AddRows(builder, RowsOffset);
    return NpcAnimationTable.EndNpcAnimationTable(builder);
  }

  public static void StartNpcAnimationTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.NpcAnimation>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.NpcAnimation>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.NpcAnimationTable> EndNpcAnimationTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.NpcAnimationTable>(o);
  }
  public NpcAnimationTableT UnPack() {
    var _o = new NpcAnimationTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(NpcAnimationTableT _o) {
    _o.Rows = new List<GDT.NpcAnimationT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.NpcAnimationTable> Pack(FlatBufferBuilder builder, NpcAnimationTableT _o) {
    if (_o == null) return default(Offset<GDT.NpcAnimationTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.NpcAnimation>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.NpcAnimation.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateNpcAnimationTable(
      builder,
      _Rows);
  }
};

public class NpcAnimationTableT
{
  public List<GDT.NpcAnimationT> Rows { get; set; }

  public NpcAnimationTableT() {
    this.Rows = null;
  }
}

/// Defined by Pet.xlsx
public struct PetData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PetData GetRootAsPetData(ByteBuffer _bb) { return GetRootAsPetData(_bb, new PetData()); }
  public static PetData GetRootAsPetData(ByteBuffer _bb, PetData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PetData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CharacterID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.PetType PetTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.PetType)__p.bb.Get(o + __p.bb_pos) : GDT.PetType.PT_None; } }
  public GDT.PetGradeType PetGradeTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.PetGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.PetGradeType.PGT_None; } }

  public static Offset<GDT.PetData> CreatePetData(FlatBufferBuilder builder,
      int CharacterID = 0,
      GDT.PetType PetTypeID = GDT.PetType.PT_None,
      GDT.PetGradeType PetGradeTypeID = GDT.PetGradeType.PGT_None) {
    builder.StartTable(3);
    PetData.AddCharacterID(builder, CharacterID);
    PetData.AddPetGradeTypeID(builder, PetGradeTypeID);
    PetData.AddPetTypeID(builder, PetTypeID);
    return PetData.EndPetData(builder);
  }

  public static void StartPetData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddCharacterID(FlatBufferBuilder builder, int CharacterID) { builder.AddInt(0, CharacterID, 0); }
  public static void AddPetTypeID(FlatBufferBuilder builder, GDT.PetType PetTypeID) { builder.AddByte(1, (byte)PetTypeID, 0); }
  public static void AddPetGradeTypeID(FlatBufferBuilder builder, GDT.PetGradeType PetGradeTypeID) { builder.AddByte(2, (byte)PetGradeTypeID, 0); }
  public static Offset<GDT.PetData> EndPetData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PetData>(o);
  }
  public PetDataT UnPack() {
    var _o = new PetDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PetDataT _o) {
    _o.CharacterID = this.CharacterID;
    _o.PetTypeID = this.PetTypeID;
    _o.PetGradeTypeID = this.PetGradeTypeID;
  }
  public static Offset<GDT.PetData> Pack(FlatBufferBuilder builder, PetDataT _o) {
    if (_o == null) return default(Offset<GDT.PetData>);
    return CreatePetData(
      builder,
      _o.CharacterID,
      _o.PetTypeID,
      _o.PetGradeTypeID);
  }
};

public class PetDataT
{
  public int CharacterID { get; set; }
  public GDT.PetType PetTypeID { get; set; }
  public GDT.PetGradeType PetGradeTypeID { get; set; }

  public PetDataT() {
    this.CharacterID = 0;
    this.PetTypeID = GDT.PetType.PT_None;
    this.PetGradeTypeID = GDT.PetGradeType.PGT_None;
  }
}

public struct PetDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PetDataTable GetRootAsPetDataTable(ByteBuffer _bb) { return GetRootAsPetDataTable(_bb, new PetDataTable()); }
  public static PetDataTable GetRootAsPetDataTable(ByteBuffer _bb, PetDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PetDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PetData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PetData?)(new GDT.PetData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PetDataTable> CreatePetDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PetDataTable.AddRows(builder, RowsOffset);
    return PetDataTable.EndPetDataTable(builder);
  }

  public static void StartPetDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PetData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PetData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PetDataTable> EndPetDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PetDataTable>(o);
  }
  public PetDataTableT UnPack() {
    var _o = new PetDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PetDataTableT _o) {
    _o.Rows = new List<GDT.PetDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PetDataTable> Pack(FlatBufferBuilder builder, PetDataTableT _o) {
    if (_o == null) return default(Offset<GDT.PetDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PetData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PetData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePetDataTable(
      builder,
      _Rows);
  }
};

public class PetDataTableT
{
  public List<GDT.PetDataT> Rows { get; set; }

  public PetDataTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameInfo GetRootAsPlatformGameInfo(ByteBuffer _bb) { return GetRootAsPlatformGameInfo(_bb, new PlatformGameInfo()); }
  public static PlatformGameInfo GetRootAsPlatformGameInfo(ByteBuffer _bb, PlatformGameInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlatformGameID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.PlatformGameType PlatformGameTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.PlatformGameType)__p.bb.Get(o + __p.bb_pos) : GDT.PlatformGameType.PGT_Multi; } }
  public string GameName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGameNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGameNameArray() { return __p.__vector_as_array<byte>(8); }
  public string GameDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetGameDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetGameDescArray() { return __p.__vector_as_array<byte>(10); }
  public string GameDetailDesc { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameDetailDescBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetGameDetailDescBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetGameDetailDescArray() { return __p.__vector_as_array<byte>(12); }
  public string PlatformGameImage { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPlatformGameImageBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetPlatformGameImageBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetPlatformGameImageArray() { return __p.__vector_as_array<byte>(14); }
  public int MinCount { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GameStartCount { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GameEndCount { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TimeLimit { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(26); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int CurrencyTypeValue { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ItemID { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageGroupID01 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageGroupID02 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageGroupID03 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageGroupID04 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageGroupID05 { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward01 { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward02 { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward03 { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward04 { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Reward05 { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MailID { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PlatformGameInfo> CreatePlatformGameInfo(FlatBufferBuilder builder,
      int PlatformGameID = 0,
      GDT.PlatformGameType PlatformGameTypeID = GDT.PlatformGameType.PGT_Multi,
      StringOffset GameNameOffset = default(StringOffset),
      StringOffset GameDescOffset = default(StringOffset),
      StringOffset GameDetailDescOffset = default(StringOffset),
      StringOffset PlatformGameImageOffset = default(StringOffset),
      int MinCount = 0,
      int MaxCount = 0,
      int GameStartCount = 0,
      int GameEndCount = 0,
      int TimeLimit = 0,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      int CurrencyTypeValue = 0,
      int ItemID = 0,
      int StageGroupID01 = 0,
      int StageGroupID02 = 0,
      int StageGroupID03 = 0,
      int StageGroupID04 = 0,
      int StageGroupID05 = 0,
      int Reward01 = 0,
      int Reward02 = 0,
      int Reward03 = 0,
      int Reward04 = 0,
      int Reward05 = 0,
      int MailID = 0) {
    builder.StartTable(25);
    PlatformGameInfo.AddMailID(builder, MailID);
    PlatformGameInfo.AddReward05(builder, Reward05);
    PlatformGameInfo.AddReward04(builder, Reward04);
    PlatformGameInfo.AddReward03(builder, Reward03);
    PlatformGameInfo.AddReward02(builder, Reward02);
    PlatformGameInfo.AddReward01(builder, Reward01);
    PlatformGameInfo.AddStageGroupID05(builder, StageGroupID05);
    PlatformGameInfo.AddStageGroupID04(builder, StageGroupID04);
    PlatformGameInfo.AddStageGroupID03(builder, StageGroupID03);
    PlatformGameInfo.AddStageGroupID02(builder, StageGroupID02);
    PlatformGameInfo.AddStageGroupID01(builder, StageGroupID01);
    PlatformGameInfo.AddItemID(builder, ItemID);
    PlatformGameInfo.AddCurrencyTypeValue(builder, CurrencyTypeValue);
    PlatformGameInfo.AddTimeLimit(builder, TimeLimit);
    PlatformGameInfo.AddGameEndCount(builder, GameEndCount);
    PlatformGameInfo.AddGameStartCount(builder, GameStartCount);
    PlatformGameInfo.AddMaxCount(builder, MaxCount);
    PlatformGameInfo.AddMinCount(builder, MinCount);
    PlatformGameInfo.AddPlatformGameImage(builder, PlatformGameImageOffset);
    PlatformGameInfo.AddGameDetailDesc(builder, GameDetailDescOffset);
    PlatformGameInfo.AddGameDesc(builder, GameDescOffset);
    PlatformGameInfo.AddGameName(builder, GameNameOffset);
    PlatformGameInfo.AddPlatformGameID(builder, PlatformGameID);
    PlatformGameInfo.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    PlatformGameInfo.AddPlatformGameTypeID(builder, PlatformGameTypeID);
    return PlatformGameInfo.EndPlatformGameInfo(builder);
  }

  public static void StartPlatformGameInfo(FlatBufferBuilder builder) { builder.StartTable(25); }
  public static void AddPlatformGameID(FlatBufferBuilder builder, int PlatformGameID) { builder.AddInt(0, PlatformGameID, 0); }
  public static void AddPlatformGameTypeID(FlatBufferBuilder builder, GDT.PlatformGameType PlatformGameTypeID) { builder.AddByte(1, (byte)PlatformGameTypeID, 0); }
  public static void AddGameName(FlatBufferBuilder builder, StringOffset GameNameOffset) { builder.AddOffset(2, GameNameOffset.Value, 0); }
  public static void AddGameDesc(FlatBufferBuilder builder, StringOffset GameDescOffset) { builder.AddOffset(3, GameDescOffset.Value, 0); }
  public static void AddGameDetailDesc(FlatBufferBuilder builder, StringOffset GameDetailDescOffset) { builder.AddOffset(4, GameDetailDescOffset.Value, 0); }
  public static void AddPlatformGameImage(FlatBufferBuilder builder, StringOffset PlatformGameImageOffset) { builder.AddOffset(5, PlatformGameImageOffset.Value, 0); }
  public static void AddMinCount(FlatBufferBuilder builder, int MinCount) { builder.AddInt(6, MinCount, 0); }
  public static void AddMaxCount(FlatBufferBuilder builder, int MaxCount) { builder.AddInt(7, MaxCount, 0); }
  public static void AddGameStartCount(FlatBufferBuilder builder, int GameStartCount) { builder.AddInt(8, GameStartCount, 0); }
  public static void AddGameEndCount(FlatBufferBuilder builder, int GameEndCount) { builder.AddInt(9, GameEndCount, 0); }
  public static void AddTimeLimit(FlatBufferBuilder builder, int TimeLimit) { builder.AddInt(10, TimeLimit, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(11, (byte)CurrencySubTypeID, 0); }
  public static void AddCurrencyTypeValue(FlatBufferBuilder builder, int CurrencyTypeValue) { builder.AddInt(12, CurrencyTypeValue, 0); }
  public static void AddItemID(FlatBufferBuilder builder, int ItemID) { builder.AddInt(13, ItemID, 0); }
  public static void AddStageGroupID01(FlatBufferBuilder builder, int StageGroupID01) { builder.AddInt(14, StageGroupID01, 0); }
  public static void AddStageGroupID02(FlatBufferBuilder builder, int StageGroupID02) { builder.AddInt(15, StageGroupID02, 0); }
  public static void AddStageGroupID03(FlatBufferBuilder builder, int StageGroupID03) { builder.AddInt(16, StageGroupID03, 0); }
  public static void AddStageGroupID04(FlatBufferBuilder builder, int StageGroupID04) { builder.AddInt(17, StageGroupID04, 0); }
  public static void AddStageGroupID05(FlatBufferBuilder builder, int StageGroupID05) { builder.AddInt(18, StageGroupID05, 0); }
  public static void AddReward01(FlatBufferBuilder builder, int Reward01) { builder.AddInt(19, Reward01, 0); }
  public static void AddReward02(FlatBufferBuilder builder, int Reward02) { builder.AddInt(20, Reward02, 0); }
  public static void AddReward03(FlatBufferBuilder builder, int Reward03) { builder.AddInt(21, Reward03, 0); }
  public static void AddReward04(FlatBufferBuilder builder, int Reward04) { builder.AddInt(22, Reward04, 0); }
  public static void AddReward05(FlatBufferBuilder builder, int Reward05) { builder.AddInt(23, Reward05, 0); }
  public static void AddMailID(FlatBufferBuilder builder, int MailID) { builder.AddInt(24, MailID, 0); }
  public static Offset<GDT.PlatformGameInfo> EndPlatformGameInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameInfo>(o);
  }
  public PlatformGameInfoT UnPack() {
    var _o = new PlatformGameInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameInfoT _o) {
    _o.PlatformGameID = this.PlatformGameID;
    _o.PlatformGameTypeID = this.PlatformGameTypeID;
    _o.GameName = this.GameName;
    _o.GameDesc = this.GameDesc;
    _o.GameDetailDesc = this.GameDetailDesc;
    _o.PlatformGameImage = this.PlatformGameImage;
    _o.MinCount = this.MinCount;
    _o.MaxCount = this.MaxCount;
    _o.GameStartCount = this.GameStartCount;
    _o.GameEndCount = this.GameEndCount;
    _o.TimeLimit = this.TimeLimit;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.CurrencyTypeValue = this.CurrencyTypeValue;
    _o.ItemID = this.ItemID;
    _o.StageGroupID01 = this.StageGroupID01;
    _o.StageGroupID02 = this.StageGroupID02;
    _o.StageGroupID03 = this.StageGroupID03;
    _o.StageGroupID04 = this.StageGroupID04;
    _o.StageGroupID05 = this.StageGroupID05;
    _o.Reward01 = this.Reward01;
    _o.Reward02 = this.Reward02;
    _o.Reward03 = this.Reward03;
    _o.Reward04 = this.Reward04;
    _o.Reward05 = this.Reward05;
    _o.MailID = this.MailID;
  }
  public static Offset<GDT.PlatformGameInfo> Pack(FlatBufferBuilder builder, PlatformGameInfoT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameInfo>);
    var _GameName = _o.GameName == null ? default(StringOffset) : builder.CreateString(_o.GameName);
    var _GameDesc = _o.GameDesc == null ? default(StringOffset) : builder.CreateString(_o.GameDesc);
    var _GameDetailDesc = _o.GameDetailDesc == null ? default(StringOffset) : builder.CreateString(_o.GameDetailDesc);
    var _PlatformGameImage = _o.PlatformGameImage == null ? default(StringOffset) : builder.CreateString(_o.PlatformGameImage);
    return CreatePlatformGameInfo(
      builder,
      _o.PlatformGameID,
      _o.PlatformGameTypeID,
      _GameName,
      _GameDesc,
      _GameDetailDesc,
      _PlatformGameImage,
      _o.MinCount,
      _o.MaxCount,
      _o.GameStartCount,
      _o.GameEndCount,
      _o.TimeLimit,
      _o.CurrencySubTypeID,
      _o.CurrencyTypeValue,
      _o.ItemID,
      _o.StageGroupID01,
      _o.StageGroupID02,
      _o.StageGroupID03,
      _o.StageGroupID04,
      _o.StageGroupID05,
      _o.Reward01,
      _o.Reward02,
      _o.Reward03,
      _o.Reward04,
      _o.Reward05,
      _o.MailID);
  }
};

public class PlatformGameInfoT
{
  public int PlatformGameID { get; set; }
  public GDT.PlatformGameType PlatformGameTypeID { get; set; }
  public string GameName { get; set; }
  public string GameDesc { get; set; }
  public string GameDetailDesc { get; set; }
  public string PlatformGameImage { get; set; }
  public int MinCount { get; set; }
  public int MaxCount { get; set; }
  public int GameStartCount { get; set; }
  public int GameEndCount { get; set; }
  public int TimeLimit { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public int CurrencyTypeValue { get; set; }
  public int ItemID { get; set; }
  public int StageGroupID01 { get; set; }
  public int StageGroupID02 { get; set; }
  public int StageGroupID03 { get; set; }
  public int StageGroupID04 { get; set; }
  public int StageGroupID05 { get; set; }
  public int Reward01 { get; set; }
  public int Reward02 { get; set; }
  public int Reward03 { get; set; }
  public int Reward04 { get; set; }
  public int Reward05 { get; set; }
  public int MailID { get; set; }

  public PlatformGameInfoT() {
    this.PlatformGameID = 0;
    this.PlatformGameTypeID = GDT.PlatformGameType.PGT_Multi;
    this.GameName = null;
    this.GameDesc = null;
    this.GameDetailDesc = null;
    this.PlatformGameImage = null;
    this.MinCount = 0;
    this.MaxCount = 0;
    this.GameStartCount = 0;
    this.GameEndCount = 0;
    this.TimeLimit = 0;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.CurrencyTypeValue = 0;
    this.ItemID = 0;
    this.StageGroupID01 = 0;
    this.StageGroupID02 = 0;
    this.StageGroupID03 = 0;
    this.StageGroupID04 = 0;
    this.StageGroupID05 = 0;
    this.Reward01 = 0;
    this.Reward02 = 0;
    this.Reward03 = 0;
    this.Reward04 = 0;
    this.Reward05 = 0;
    this.MailID = 0;
  }
}

public struct PlatformGameInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameInfoTable GetRootAsPlatformGameInfoTable(ByteBuffer _bb) { return GetRootAsPlatformGameInfoTable(_bb, new PlatformGameInfoTable()); }
  public static PlatformGameInfoTable GetRootAsPlatformGameInfoTable(ByteBuffer _bb, PlatformGameInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameInfo?)(new GDT.PlatformGameInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameInfoTable> CreatePlatformGameInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameInfoTable.AddRows(builder, RowsOffset);
    return PlatformGameInfoTable.EndPlatformGameInfoTable(builder);
  }

  public static void StartPlatformGameInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameInfoTable> EndPlatformGameInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameInfoTable>(o);
  }
  public PlatformGameInfoTableT UnPack() {
    var _o = new PlatformGameInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameInfoTableT _o) {
    _o.Rows = new List<GDT.PlatformGameInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameInfoTable> Pack(FlatBufferBuilder builder, PlatformGameInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameInfoTable(
      builder,
      _Rows);
  }
};

public class PlatformGameInfoTableT
{
  public List<GDT.PlatformGameInfoT> Rows { get; set; }

  public PlatformGameInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameStageGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameStageGroup GetRootAsPlatformGameStageGroup(ByteBuffer _bb) { return GetRootAsPlatformGameStageGroup(_bb, new PlatformGameStageGroup()); }
  public static PlatformGameStageGroup GetRootAsPlatformGameStageGroup(ByteBuffer _bb, PlatformGameStageGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameStageGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StageGroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlatformStageID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Prob { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PlatformGameStageGroup> CreatePlatformGameStageGroup(FlatBufferBuilder builder,
      int StageGroupID = 0,
      int PlatformStageID = 0,
      int Prob = 0) {
    builder.StartTable(3);
    PlatformGameStageGroup.AddProb(builder, Prob);
    PlatformGameStageGroup.AddPlatformStageID(builder, PlatformStageID);
    PlatformGameStageGroup.AddStageGroupID(builder, StageGroupID);
    return PlatformGameStageGroup.EndPlatformGameStageGroup(builder);
  }

  public static void StartPlatformGameStageGroup(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStageGroupID(FlatBufferBuilder builder, int StageGroupID) { builder.AddInt(0, StageGroupID, 0); }
  public static void AddPlatformStageID(FlatBufferBuilder builder, int PlatformStageID) { builder.AddInt(1, PlatformStageID, 0); }
  public static void AddProb(FlatBufferBuilder builder, int Prob) { builder.AddInt(2, Prob, 0); }
  public static Offset<GDT.PlatformGameStageGroup> EndPlatformGameStageGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameStageGroup>(o);
  }
  public PlatformGameStageGroupT UnPack() {
    var _o = new PlatformGameStageGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameStageGroupT _o) {
    _o.StageGroupID = this.StageGroupID;
    _o.PlatformStageID = this.PlatformStageID;
    _o.Prob = this.Prob;
  }
  public static Offset<GDT.PlatformGameStageGroup> Pack(FlatBufferBuilder builder, PlatformGameStageGroupT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameStageGroup>);
    return CreatePlatformGameStageGroup(
      builder,
      _o.StageGroupID,
      _o.PlatformStageID,
      _o.Prob);
  }
};

public class PlatformGameStageGroupT
{
  public int StageGroupID { get; set; }
  public int PlatformStageID { get; set; }
  public int Prob { get; set; }

  public PlatformGameStageGroupT() {
    this.StageGroupID = 0;
    this.PlatformStageID = 0;
    this.Prob = 0;
  }
}

public struct PlatformGameStageGroupTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameStageGroupTable GetRootAsPlatformGameStageGroupTable(ByteBuffer _bb) { return GetRootAsPlatformGameStageGroupTable(_bb, new PlatformGameStageGroupTable()); }
  public static PlatformGameStageGroupTable GetRootAsPlatformGameStageGroupTable(ByteBuffer _bb, PlatformGameStageGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameStageGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameStageGroup? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameStageGroup?)(new GDT.PlatformGameStageGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameStageGroupTable> CreatePlatformGameStageGroupTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameStageGroupTable.AddRows(builder, RowsOffset);
    return PlatformGameStageGroupTable.EndPlatformGameStageGroupTable(builder);
  }

  public static void StartPlatformGameStageGroupTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameStageGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameStageGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameStageGroupTable> EndPlatformGameStageGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameStageGroupTable>(o);
  }
  public PlatformGameStageGroupTableT UnPack() {
    var _o = new PlatformGameStageGroupTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameStageGroupTableT _o) {
    _o.Rows = new List<GDT.PlatformGameStageGroupT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameStageGroupTable> Pack(FlatBufferBuilder builder, PlatformGameStageGroupTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameStageGroupTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameStageGroup>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameStageGroup.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameStageGroupTable(
      builder,
      _Rows);
  }
};

public class PlatformGameStageGroupTableT
{
  public List<GDT.PlatformGameStageGroupT> Rows { get; set; }

  public PlatformGameStageGroupTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameStage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameStage GetRootAsPlatformGameStage(ByteBuffer _bb) { return GetRootAsPlatformGameStage(_bb, new PlatformGameStage()); }
  public static PlatformGameStage GetRootAsPlatformGameStage(ByteBuffer _bb, PlatformGameStage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameStage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StageID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string StageName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStageNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetStageNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStageNameArray() { return __p.__vector_as_array<byte>(8); }
  public int TimeBasicScore { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PlatformGameStage> CreatePlatformGameStage(FlatBufferBuilder builder,
      int StageID = 0,
      int MapID = 0,
      StringOffset StageNameOffset = default(StringOffset),
      int TimeBasicScore = 0) {
    builder.StartTable(4);
    PlatformGameStage.AddTimeBasicScore(builder, TimeBasicScore);
    PlatformGameStage.AddStageName(builder, StageNameOffset);
    PlatformGameStage.AddMapID(builder, MapID);
    PlatformGameStage.AddStageID(builder, StageID);
    return PlatformGameStage.EndPlatformGameStage(builder);
  }

  public static void StartPlatformGameStage(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(0, StageID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(1, MapID, 0); }
  public static void AddStageName(FlatBufferBuilder builder, StringOffset StageNameOffset) { builder.AddOffset(2, StageNameOffset.Value, 0); }
  public static void AddTimeBasicScore(FlatBufferBuilder builder, int TimeBasicScore) { builder.AddInt(3, TimeBasicScore, 0); }
  public static Offset<GDT.PlatformGameStage> EndPlatformGameStage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameStage>(o);
  }
  public PlatformGameStageT UnPack() {
    var _o = new PlatformGameStageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameStageT _o) {
    _o.StageID = this.StageID;
    _o.MapID = this.MapID;
    _o.StageName = this.StageName;
    _o.TimeBasicScore = this.TimeBasicScore;
  }
  public static Offset<GDT.PlatformGameStage> Pack(FlatBufferBuilder builder, PlatformGameStageT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameStage>);
    var _StageName = _o.StageName == null ? default(StringOffset) : builder.CreateString(_o.StageName);
    return CreatePlatformGameStage(
      builder,
      _o.StageID,
      _o.MapID,
      _StageName,
      _o.TimeBasicScore);
  }
};

public class PlatformGameStageT
{
  public int StageID { get; set; }
  public int MapID { get; set; }
  public string StageName { get; set; }
  public int TimeBasicScore { get; set; }

  public PlatformGameStageT() {
    this.StageID = 0;
    this.MapID = 0;
    this.StageName = null;
    this.TimeBasicScore = 0;
  }
}

public struct PlatformGameStageTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameStageTable GetRootAsPlatformGameStageTable(ByteBuffer _bb) { return GetRootAsPlatformGameStageTable(_bb, new PlatformGameStageTable()); }
  public static PlatformGameStageTable GetRootAsPlatformGameStageTable(ByteBuffer _bb, PlatformGameStageTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameStageTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameStage? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameStage?)(new GDT.PlatformGameStage()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameStageTable> CreatePlatformGameStageTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameStageTable.AddRows(builder, RowsOffset);
    return PlatformGameStageTable.EndPlatformGameStageTable(builder);
  }

  public static void StartPlatformGameStageTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameStage>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameStage>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameStageTable> EndPlatformGameStageTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameStageTable>(o);
  }
  public PlatformGameStageTableT UnPack() {
    var _o = new PlatformGameStageTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameStageTableT _o) {
    _o.Rows = new List<GDT.PlatformGameStageT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameStageTable> Pack(FlatBufferBuilder builder, PlatformGameStageTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameStageTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameStage>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameStage.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameStageTable(
      builder,
      _Rows);
  }
};

public class PlatformGameStageTableT
{
  public List<GDT.PlatformGameStageT> Rows { get; set; }

  public PlatformGameStageTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameReward GetRootAsPlatformGameReward(ByteBuffer _bb) { return GetRootAsPlatformGameReward(_bb, new PlatformGameReward()); }
  public static PlatformGameReward GetRootAsPlatformGameReward(ByteBuffer _bb, PlatformGameReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlatformGameID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Ranking { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RankingScore { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinScore { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxScore { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardDataID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PlatformGameReward> CreatePlatformGameReward(FlatBufferBuilder builder,
      int PlatformGameID = 0,
      int Ranking = 0,
      int RankingScore = 0,
      int MinScore = 0,
      int MaxScore = 0,
      int RewardDataID = 0) {
    builder.StartTable(6);
    PlatformGameReward.AddRewardDataID(builder, RewardDataID);
    PlatformGameReward.AddMaxScore(builder, MaxScore);
    PlatformGameReward.AddMinScore(builder, MinScore);
    PlatformGameReward.AddRankingScore(builder, RankingScore);
    PlatformGameReward.AddRanking(builder, Ranking);
    PlatformGameReward.AddPlatformGameID(builder, PlatformGameID);
    return PlatformGameReward.EndPlatformGameReward(builder);
  }

  public static void StartPlatformGameReward(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddPlatformGameID(FlatBufferBuilder builder, int PlatformGameID) { builder.AddInt(0, PlatformGameID, 0); }
  public static void AddRanking(FlatBufferBuilder builder, int Ranking) { builder.AddInt(1, Ranking, 0); }
  public static void AddRankingScore(FlatBufferBuilder builder, int RankingScore) { builder.AddInt(2, RankingScore, 0); }
  public static void AddMinScore(FlatBufferBuilder builder, int MinScore) { builder.AddInt(3, MinScore, 0); }
  public static void AddMaxScore(FlatBufferBuilder builder, int MaxScore) { builder.AddInt(4, MaxScore, 0); }
  public static void AddRewardDataID(FlatBufferBuilder builder, int RewardDataID) { builder.AddInt(5, RewardDataID, 0); }
  public static Offset<GDT.PlatformGameReward> EndPlatformGameReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameReward>(o);
  }
  public PlatformGameRewardT UnPack() {
    var _o = new PlatformGameRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameRewardT _o) {
    _o.PlatformGameID = this.PlatformGameID;
    _o.Ranking = this.Ranking;
    _o.RankingScore = this.RankingScore;
    _o.MinScore = this.MinScore;
    _o.MaxScore = this.MaxScore;
    _o.RewardDataID = this.RewardDataID;
  }
  public static Offset<GDT.PlatformGameReward> Pack(FlatBufferBuilder builder, PlatformGameRewardT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameReward>);
    return CreatePlatformGameReward(
      builder,
      _o.PlatformGameID,
      _o.Ranking,
      _o.RankingScore,
      _o.MinScore,
      _o.MaxScore,
      _o.RewardDataID);
  }
};

public class PlatformGameRewardT
{
  public int PlatformGameID { get; set; }
  public int Ranking { get; set; }
  public int RankingScore { get; set; }
  public int MinScore { get; set; }
  public int MaxScore { get; set; }
  public int RewardDataID { get; set; }

  public PlatformGameRewardT() {
    this.PlatformGameID = 0;
    this.Ranking = 0;
    this.RankingScore = 0;
    this.MinScore = 0;
    this.MaxScore = 0;
    this.RewardDataID = 0;
  }
}

public struct PlatformGameRewardTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameRewardTable GetRootAsPlatformGameRewardTable(ByteBuffer _bb) { return GetRootAsPlatformGameRewardTable(_bb, new PlatformGameRewardTable()); }
  public static PlatformGameRewardTable GetRootAsPlatformGameRewardTable(ByteBuffer _bb, PlatformGameRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameReward? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameReward?)(new GDT.PlatformGameReward()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameRewardTable> CreatePlatformGameRewardTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameRewardTable.AddRows(builder, RowsOffset);
    return PlatformGameRewardTable.EndPlatformGameRewardTable(builder);
  }

  public static void StartPlatformGameRewardTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameReward>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameReward>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameRewardTable> EndPlatformGameRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameRewardTable>(o);
  }
  public PlatformGameRewardTableT UnPack() {
    var _o = new PlatformGameRewardTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameRewardTableT _o) {
    _o.Rows = new List<GDT.PlatformGameRewardT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameRewardTable> Pack(FlatBufferBuilder builder, PlatformGameRewardTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameRewardTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameReward>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameReward.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameRewardTable(
      builder,
      _Rows);
  }
};

public class PlatformGameRewardTableT
{
  public List<GDT.PlatformGameRewardT> Rows { get; set; }

  public PlatformGameRewardTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameSchedule : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameSchedule GetRootAsPlatformGameSchedule(ByteBuffer _bb) { return GetRootAsPlatformGameSchedule(_bb, new PlatformGameSchedule()); }
  public static PlatformGameSchedule GetRootAsPlatformGameSchedule(ByteBuffer _bb, PlatformGameSchedule obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameSchedule __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlatformGameID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.DayType DayTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.DayType)__p.bb.Get(o + __p.bb_pos) : GDT.DayType.DT_None; } }
  public GDT.time? OpenTime { get { int o = __p.__offset(8); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.time? CloseTime { get { int o = __p.__offset(10); return o != 0 ? (GDT.time?)(new GDT.time()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPlatformGameSchedule(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlatformGameID(FlatBufferBuilder builder, int PlatformGameID) { builder.AddInt(0, PlatformGameID, 0); }
  public static void AddDayTypeID(FlatBufferBuilder builder, GDT.DayType DayTypeID) { builder.AddByte(1, (byte)DayTypeID, 0); }
  public static void AddOpenTime(FlatBufferBuilder builder, Offset<GDT.time> OpenTimeOffset) { builder.AddStruct(2, OpenTimeOffset.Value, 0); }
  public static void AddCloseTime(FlatBufferBuilder builder, Offset<GDT.time> CloseTimeOffset) { builder.AddStruct(3, CloseTimeOffset.Value, 0); }
  public static Offset<GDT.PlatformGameSchedule> EndPlatformGameSchedule(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameSchedule>(o);
  }
  public PlatformGameScheduleT UnPack() {
    var _o = new PlatformGameScheduleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameScheduleT _o) {
    _o.PlatformGameID = this.PlatformGameID;
    _o.DayTypeID = this.DayTypeID;
    _o.OpenTime = this.OpenTime.HasValue ? this.OpenTime.Value.UnPack() : null;
    _o.CloseTime = this.CloseTime.HasValue ? this.CloseTime.Value.UnPack() : null;
  }
  public static Offset<GDT.PlatformGameSchedule> Pack(FlatBufferBuilder builder, PlatformGameScheduleT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameSchedule>);
    StartPlatformGameSchedule(builder);
    AddPlatformGameID(builder, _o.PlatformGameID);
    AddDayTypeID(builder, _o.DayTypeID);
    AddOpenTime(builder, GDT.time.Pack(builder, _o.OpenTime));
    AddCloseTime(builder, GDT.time.Pack(builder, _o.CloseTime));
    return EndPlatformGameSchedule(builder);
  }
};

public class PlatformGameScheduleT
{
  public int PlatformGameID { get; set; }
  public GDT.DayType DayTypeID { get; set; }
  public GDT.timeT OpenTime { get; set; }
  public GDT.timeT CloseTime { get; set; }

  public PlatformGameScheduleT() {
    this.PlatformGameID = 0;
    this.DayTypeID = GDT.DayType.DT_None;
    this.OpenTime = new GDT.timeT();
    this.CloseTime = new GDT.timeT();
  }
}

public struct PlatformGameScheduleTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameScheduleTable GetRootAsPlatformGameScheduleTable(ByteBuffer _bb) { return GetRootAsPlatformGameScheduleTable(_bb, new PlatformGameScheduleTable()); }
  public static PlatformGameScheduleTable GetRootAsPlatformGameScheduleTable(ByteBuffer _bb, PlatformGameScheduleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameScheduleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameSchedule? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameSchedule?)(new GDT.PlatformGameSchedule()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameScheduleTable> CreatePlatformGameScheduleTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameScheduleTable.AddRows(builder, RowsOffset);
    return PlatformGameScheduleTable.EndPlatformGameScheduleTable(builder);
  }

  public static void StartPlatformGameScheduleTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameSchedule>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameSchedule>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameScheduleTable> EndPlatformGameScheduleTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameScheduleTable>(o);
  }
  public PlatformGameScheduleTableT UnPack() {
    var _o = new PlatformGameScheduleTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameScheduleTableT _o) {
    _o.Rows = new List<GDT.PlatformGameScheduleT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameScheduleTable> Pack(FlatBufferBuilder builder, PlatformGameScheduleTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameScheduleTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameSchedule>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameSchedule.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameScheduleTable(
      builder,
      _Rows);
  }
};

public class PlatformGameScheduleTableT
{
  public List<GDT.PlatformGameScheduleT> Rows { get; set; }

  public PlatformGameScheduleTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameSeason : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameSeason GetRootAsPlatformGameSeason(ByteBuffer _bb) { return GetRootAsPlatformGameSeason(_bb, new PlatformGameSeason()); }
  public static PlatformGameSeason GetRootAsPlatformGameSeason(ByteBuffer _bb, PlatformGameSeason obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameSeason __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlatformGameSeasonID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.datetime? EventStartTime { get { int o = __p.__offset(6); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? EventEndTime { get { int o = __p.__offset(8); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? ClosingStartTime { get { int o = __p.__offset(10); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int RewardMailID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartPlatformGameSeason(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddPlatformGameSeasonID(FlatBufferBuilder builder, int PlatformGameSeasonID) { builder.AddInt(0, PlatformGameSeasonID, 0); }
  public static void AddEventStartTime(FlatBufferBuilder builder, Offset<GDT.datetime> EventStartTimeOffset) { builder.AddStruct(1, EventStartTimeOffset.Value, 0); }
  public static void AddEventEndTime(FlatBufferBuilder builder, Offset<GDT.datetime> EventEndTimeOffset) { builder.AddStruct(2, EventEndTimeOffset.Value, 0); }
  public static void AddClosingStartTime(FlatBufferBuilder builder, Offset<GDT.datetime> ClosingStartTimeOffset) { builder.AddStruct(3, ClosingStartTimeOffset.Value, 0); }
  public static void AddRewardMailID(FlatBufferBuilder builder, int RewardMailID) { builder.AddInt(4, RewardMailID, 0); }
  public static Offset<GDT.PlatformGameSeason> EndPlatformGameSeason(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameSeason>(o);
  }
  public PlatformGameSeasonT UnPack() {
    var _o = new PlatformGameSeasonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameSeasonT _o) {
    _o.PlatformGameSeasonID = this.PlatformGameSeasonID;
    _o.EventStartTime = this.EventStartTime.HasValue ? this.EventStartTime.Value.UnPack() : null;
    _o.EventEndTime = this.EventEndTime.HasValue ? this.EventEndTime.Value.UnPack() : null;
    _o.ClosingStartTime = this.ClosingStartTime.HasValue ? this.ClosingStartTime.Value.UnPack() : null;
    _o.RewardMailID = this.RewardMailID;
  }
  public static Offset<GDT.PlatformGameSeason> Pack(FlatBufferBuilder builder, PlatformGameSeasonT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameSeason>);
    StartPlatformGameSeason(builder);
    AddPlatformGameSeasonID(builder, _o.PlatformGameSeasonID);
    AddEventStartTime(builder, GDT.datetime.Pack(builder, _o.EventStartTime));
    AddEventEndTime(builder, GDT.datetime.Pack(builder, _o.EventEndTime));
    AddClosingStartTime(builder, GDT.datetime.Pack(builder, _o.ClosingStartTime));
    AddRewardMailID(builder, _o.RewardMailID);
    return EndPlatformGameSeason(builder);
  }
};

public class PlatformGameSeasonT
{
  public int PlatformGameSeasonID { get; set; }
  public GDT.datetimeT EventStartTime { get; set; }
  public GDT.datetimeT EventEndTime { get; set; }
  public GDT.datetimeT ClosingStartTime { get; set; }
  public int RewardMailID { get; set; }

  public PlatformGameSeasonT() {
    this.PlatformGameSeasonID = 0;
    this.EventStartTime = new GDT.datetimeT();
    this.EventEndTime = new GDT.datetimeT();
    this.ClosingStartTime = new GDT.datetimeT();
    this.RewardMailID = 0;
  }
}

public struct PlatformGameSeasonTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameSeasonTable GetRootAsPlatformGameSeasonTable(ByteBuffer _bb) { return GetRootAsPlatformGameSeasonTable(_bb, new PlatformGameSeasonTable()); }
  public static PlatformGameSeasonTable GetRootAsPlatformGameSeasonTable(ByteBuffer _bb, PlatformGameSeasonTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameSeasonTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameSeason? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameSeason?)(new GDT.PlatformGameSeason()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameSeasonTable> CreatePlatformGameSeasonTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameSeasonTable.AddRows(builder, RowsOffset);
    return PlatformGameSeasonTable.EndPlatformGameSeasonTable(builder);
  }

  public static void StartPlatformGameSeasonTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameSeason>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameSeason>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameSeasonTable> EndPlatformGameSeasonTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameSeasonTable>(o);
  }
  public PlatformGameSeasonTableT UnPack() {
    var _o = new PlatformGameSeasonTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameSeasonTableT _o) {
    _o.Rows = new List<GDT.PlatformGameSeasonT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameSeasonTable> Pack(FlatBufferBuilder builder, PlatformGameSeasonTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameSeasonTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameSeason>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameSeason.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameSeasonTable(
      builder,
      _Rows);
  }
};

public class PlatformGameSeasonTableT
{
  public List<GDT.PlatformGameSeasonT> Rows { get; set; }

  public PlatformGameSeasonTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGameSeasonReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameSeasonReward GetRootAsPlatformGameSeasonReward(ByteBuffer _bb) { return GetRootAsPlatformGameSeasonReward(_bb, new PlatformGameSeasonReward()); }
  public static PlatformGameSeasonReward GetRootAsPlatformGameSeasonReward(ByteBuffer _bb, PlatformGameSeasonReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameSeasonReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PlatformGameSeasonID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MinRank { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxRank { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardDataID { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PlatformGameSeasonReward> CreatePlatformGameSeasonReward(FlatBufferBuilder builder,
      int PlatformGameSeasonID = 0,
      int MinRank = 0,
      int MaxRank = 0,
      int RewardDataID = 0) {
    builder.StartTable(4);
    PlatformGameSeasonReward.AddRewardDataID(builder, RewardDataID);
    PlatformGameSeasonReward.AddMaxRank(builder, MaxRank);
    PlatformGameSeasonReward.AddMinRank(builder, MinRank);
    PlatformGameSeasonReward.AddPlatformGameSeasonID(builder, PlatformGameSeasonID);
    return PlatformGameSeasonReward.EndPlatformGameSeasonReward(builder);
  }

  public static void StartPlatformGameSeasonReward(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddPlatformGameSeasonID(FlatBufferBuilder builder, int PlatformGameSeasonID) { builder.AddInt(0, PlatformGameSeasonID, 0); }
  public static void AddMinRank(FlatBufferBuilder builder, int MinRank) { builder.AddInt(1, MinRank, 0); }
  public static void AddMaxRank(FlatBufferBuilder builder, int MaxRank) { builder.AddInt(2, MaxRank, 0); }
  public static void AddRewardDataID(FlatBufferBuilder builder, int RewardDataID) { builder.AddInt(3, RewardDataID, 0); }
  public static Offset<GDT.PlatformGameSeasonReward> EndPlatformGameSeasonReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameSeasonReward>(o);
  }
  public PlatformGameSeasonRewardT UnPack() {
    var _o = new PlatformGameSeasonRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameSeasonRewardT _o) {
    _o.PlatformGameSeasonID = this.PlatformGameSeasonID;
    _o.MinRank = this.MinRank;
    _o.MaxRank = this.MaxRank;
    _o.RewardDataID = this.RewardDataID;
  }
  public static Offset<GDT.PlatformGameSeasonReward> Pack(FlatBufferBuilder builder, PlatformGameSeasonRewardT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameSeasonReward>);
    return CreatePlatformGameSeasonReward(
      builder,
      _o.PlatformGameSeasonID,
      _o.MinRank,
      _o.MaxRank,
      _o.RewardDataID);
  }
};

public class PlatformGameSeasonRewardT
{
  public int PlatformGameSeasonID { get; set; }
  public int MinRank { get; set; }
  public int MaxRank { get; set; }
  public int RewardDataID { get; set; }

  public PlatformGameSeasonRewardT() {
    this.PlatformGameSeasonID = 0;
    this.MinRank = 0;
    this.MaxRank = 0;
    this.RewardDataID = 0;
  }
}

public struct PlatformGameSeasonRewardTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameSeasonRewardTable GetRootAsPlatformGameSeasonRewardTable(ByteBuffer _bb) { return GetRootAsPlatformGameSeasonRewardTable(_bb, new PlatformGameSeasonRewardTable()); }
  public static PlatformGameSeasonRewardTable GetRootAsPlatformGameSeasonRewardTable(ByteBuffer _bb, PlatformGameSeasonRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameSeasonRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameSeasonReward? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameSeasonReward?)(new GDT.PlatformGameSeasonReward()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameSeasonRewardTable> CreatePlatformGameSeasonRewardTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameSeasonRewardTable.AddRows(builder, RowsOffset);
    return PlatformGameSeasonRewardTable.EndPlatformGameSeasonRewardTable(builder);
  }

  public static void StartPlatformGameSeasonRewardTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameSeasonReward>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameSeasonReward>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameSeasonRewardTable> EndPlatformGameSeasonRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameSeasonRewardTable>(o);
  }
  public PlatformGameSeasonRewardTableT UnPack() {
    var _o = new PlatformGameSeasonRewardTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameSeasonRewardTableT _o) {
    _o.Rows = new List<GDT.PlatformGameSeasonRewardT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameSeasonRewardTable> Pack(FlatBufferBuilder builder, PlatformGameSeasonRewardTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameSeasonRewardTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameSeasonReward>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameSeasonReward.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameSeasonRewardTable(
      builder,
      _Rows);
  }
};

public class PlatformGameSeasonRewardTableT
{
  public List<GDT.PlatformGameSeasonRewardT> Rows { get; set; }

  public PlatformGameSeasonRewardTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGame.xlsx
public struct PlatformGamePose : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGamePose GetRootAsPlatformGamePose(ByteBuffer _bb) { return GetRootAsPlatformGamePose(_bb, new PlatformGamePose()); }
  public static PlatformGamePose GetRootAsPlatformGamePose(ByteBuffer _bb, PlatformGamePose obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGamePose __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ActionAnimationType ActionAnimationType { get { int o = __p.__offset(6); return o != 0 ? (GDT.ActionAnimationType)__p.bb.Get(o + __p.bb_pos) : GDT.ActionAnimationType.AAT_None; } }
  public int Rate { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PlatformGamePose> CreatePlatformGamePose(FlatBufferBuilder builder,
      int Index = 0,
      GDT.ActionAnimationType ActionAnimationType = GDT.ActionAnimationType.AAT_None,
      int Rate = 0) {
    builder.StartTable(3);
    PlatformGamePose.AddRate(builder, Rate);
    PlatformGamePose.AddIndex(builder, Index);
    PlatformGamePose.AddActionAnimationType(builder, ActionAnimationType);
    return PlatformGamePose.EndPlatformGamePose(builder);
  }

  public static void StartPlatformGamePose(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddActionAnimationType(FlatBufferBuilder builder, GDT.ActionAnimationType ActionAnimationType) { builder.AddByte(1, (byte)ActionAnimationType, 0); }
  public static void AddRate(FlatBufferBuilder builder, int Rate) { builder.AddInt(2, Rate, 0); }
  public static Offset<GDT.PlatformGamePose> EndPlatformGamePose(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGamePose>(o);
  }
  public PlatformGamePoseT UnPack() {
    var _o = new PlatformGamePoseT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGamePoseT _o) {
    _o.Index = this.Index;
    _o.ActionAnimationType = this.ActionAnimationType;
    _o.Rate = this.Rate;
  }
  public static Offset<GDT.PlatformGamePose> Pack(FlatBufferBuilder builder, PlatformGamePoseT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGamePose>);
    return CreatePlatformGamePose(
      builder,
      _o.Index,
      _o.ActionAnimationType,
      _o.Rate);
  }
};

public class PlatformGamePoseT
{
  public int Index { get; set; }
  public GDT.ActionAnimationType ActionAnimationType { get; set; }
  public int Rate { get; set; }

  public PlatformGamePoseT() {
    this.Index = 0;
    this.ActionAnimationType = GDT.ActionAnimationType.AAT_None;
    this.Rate = 0;
  }
}

public struct PlatformGamePoseTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGamePoseTable GetRootAsPlatformGamePoseTable(ByteBuffer _bb) { return GetRootAsPlatformGamePoseTable(_bb, new PlatformGamePoseTable()); }
  public static PlatformGamePoseTable GetRootAsPlatformGamePoseTable(ByteBuffer _bb, PlatformGamePoseTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGamePoseTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGamePose? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGamePose?)(new GDT.PlatformGamePose()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGamePoseTable> CreatePlatformGamePoseTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGamePoseTable.AddRows(builder, RowsOffset);
    return PlatformGamePoseTable.EndPlatformGamePoseTable(builder);
  }

  public static void StartPlatformGamePoseTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGamePose>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGamePose>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGamePoseTable> EndPlatformGamePoseTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGamePoseTable>(o);
  }
  public PlatformGamePoseTableT UnPack() {
    var _o = new PlatformGamePoseTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGamePoseTableT _o) {
    _o.Rows = new List<GDT.PlatformGamePoseT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGamePoseTable> Pack(FlatBufferBuilder builder, PlatformGamePoseTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGamePoseTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGamePose>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGamePose.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGamePoseTable(
      builder,
      _Rows);
  }
};

public class PlatformGamePoseTableT
{
  public List<GDT.PlatformGamePoseT> Rows { get; set; }

  public PlatformGamePoseTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameObject.xlsx
public struct PlatformGameObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameObject GetRootAsPlatformGameObject(ByteBuffer _bb) { return GetRootAsPlatformGameObject(_bb, new PlatformGameObject()); }
  public static PlatformGameObject GetRootAsPlatformGameObject(ByteBuffer _bb, PlatformGameObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CreateObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ObjectType ObjectFuntionTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ObjectType)__p.bb.Get(o + __p.bb_pos) : GDT.ObjectType.OT_None; } }
  public float Radius { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float CenterY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float MoveSpeed { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AniSpeed { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int Score { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string PrefabName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrefabNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetPrefabNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetPrefabNameArray() { return __p.__vector_as_array<byte>(20); }
  public int EffectID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SoundID { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EffectSync { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool DeleteObject { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.PlatformGameObject> CreatePlatformGameObject(FlatBufferBuilder builder,
      int CreateObjectID = 0,
      GDT.ObjectType ObjectFuntionTypeID = GDT.ObjectType.OT_None,
      float Radius = 0.0f,
      float CenterY = 0.0f,
      float MoveSpeed = 0.0f,
      float AniSpeed = 0.0f,
      int Score = 0,
      int SkillID = 0,
      StringOffset PrefabNameOffset = default(StringOffset),
      int EffectID = 0,
      int SoundID = 0,
      bool EffectSync = false,
      bool DeleteObject = false) {
    builder.StartTable(13);
    PlatformGameObject.AddSoundID(builder, SoundID);
    PlatformGameObject.AddEffectID(builder, EffectID);
    PlatformGameObject.AddPrefabName(builder, PrefabNameOffset);
    PlatformGameObject.AddSkillID(builder, SkillID);
    PlatformGameObject.AddScore(builder, Score);
    PlatformGameObject.AddAniSpeed(builder, AniSpeed);
    PlatformGameObject.AddMoveSpeed(builder, MoveSpeed);
    PlatformGameObject.AddCenterY(builder, CenterY);
    PlatformGameObject.AddRadius(builder, Radius);
    PlatformGameObject.AddCreateObjectID(builder, CreateObjectID);
    PlatformGameObject.AddDeleteObject(builder, DeleteObject);
    PlatformGameObject.AddEffectSync(builder, EffectSync);
    PlatformGameObject.AddObjectFuntionTypeID(builder, ObjectFuntionTypeID);
    return PlatformGameObject.EndPlatformGameObject(builder);
  }

  public static void StartPlatformGameObject(FlatBufferBuilder builder) { builder.StartTable(13); }
  public static void AddCreateObjectID(FlatBufferBuilder builder, int CreateObjectID) { builder.AddInt(0, CreateObjectID, 0); }
  public static void AddObjectFuntionTypeID(FlatBufferBuilder builder, GDT.ObjectType ObjectFuntionTypeID) { builder.AddByte(1, (byte)ObjectFuntionTypeID, 0); }
  public static void AddRadius(FlatBufferBuilder builder, float Radius) { builder.AddFloat(2, Radius, 0.0f); }
  public static void AddCenterY(FlatBufferBuilder builder, float CenterY) { builder.AddFloat(3, CenterY, 0.0f); }
  public static void AddMoveSpeed(FlatBufferBuilder builder, float MoveSpeed) { builder.AddFloat(4, MoveSpeed, 0.0f); }
  public static void AddAniSpeed(FlatBufferBuilder builder, float AniSpeed) { builder.AddFloat(5, AniSpeed, 0.0f); }
  public static void AddScore(FlatBufferBuilder builder, int Score) { builder.AddInt(6, Score, 0); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(7, SkillID, 0); }
  public static void AddPrefabName(FlatBufferBuilder builder, StringOffset PrefabNameOffset) { builder.AddOffset(8, PrefabNameOffset.Value, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(9, EffectID, 0); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(10, SoundID, 0); }
  public static void AddEffectSync(FlatBufferBuilder builder, bool EffectSync) { builder.AddBool(11, EffectSync, false); }
  public static void AddDeleteObject(FlatBufferBuilder builder, bool DeleteObject) { builder.AddBool(12, DeleteObject, false); }
  public static Offset<GDT.PlatformGameObject> EndPlatformGameObject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameObject>(o);
  }
  public PlatformGameObjectT UnPack() {
    var _o = new PlatformGameObjectT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameObjectT _o) {
    _o.CreateObjectID = this.CreateObjectID;
    _o.ObjectFuntionTypeID = this.ObjectFuntionTypeID;
    _o.Radius = this.Radius;
    _o.CenterY = this.CenterY;
    _o.MoveSpeed = this.MoveSpeed;
    _o.AniSpeed = this.AniSpeed;
    _o.Score = this.Score;
    _o.SkillID = this.SkillID;
    _o.PrefabName = this.PrefabName;
    _o.EffectID = this.EffectID;
    _o.SoundID = this.SoundID;
    _o.EffectSync = this.EffectSync;
    _o.DeleteObject = this.DeleteObject;
  }
  public static Offset<GDT.PlatformGameObject> Pack(FlatBufferBuilder builder, PlatformGameObjectT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameObject>);
    var _PrefabName = _o.PrefabName == null ? default(StringOffset) : builder.CreateString(_o.PrefabName);
    return CreatePlatformGameObject(
      builder,
      _o.CreateObjectID,
      _o.ObjectFuntionTypeID,
      _o.Radius,
      _o.CenterY,
      _o.MoveSpeed,
      _o.AniSpeed,
      _o.Score,
      _o.SkillID,
      _PrefabName,
      _o.EffectID,
      _o.SoundID,
      _o.EffectSync,
      _o.DeleteObject);
  }
};

public class PlatformGameObjectT
{
  public int CreateObjectID { get; set; }
  public GDT.ObjectType ObjectFuntionTypeID { get; set; }
  public float Radius { get; set; }
  public float CenterY { get; set; }
  public float MoveSpeed { get; set; }
  public float AniSpeed { get; set; }
  public int Score { get; set; }
  public int SkillID { get; set; }
  public string PrefabName { get; set; }
  public int EffectID { get; set; }
  public int SoundID { get; set; }
  public bool EffectSync { get; set; }
  public bool DeleteObject { get; set; }

  public PlatformGameObjectT() {
    this.CreateObjectID = 0;
    this.ObjectFuntionTypeID = GDT.ObjectType.OT_None;
    this.Radius = 0.0f;
    this.CenterY = 0.0f;
    this.MoveSpeed = 0.0f;
    this.AniSpeed = 0.0f;
    this.Score = 0;
    this.SkillID = 0;
    this.PrefabName = null;
    this.EffectID = 0;
    this.SoundID = 0;
    this.EffectSync = false;
    this.DeleteObject = false;
  }
}

public struct PlatformGameObjectTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PlatformGameObjectTable GetRootAsPlatformGameObjectTable(ByteBuffer _bb) { return GetRootAsPlatformGameObjectTable(_bb, new PlatformGameObjectTable()); }
  public static PlatformGameObjectTable GetRootAsPlatformGameObjectTable(ByteBuffer _bb, PlatformGameObjectTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PlatformGameObjectTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PlatformGameObject? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PlatformGameObject?)(new GDT.PlatformGameObject()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PlatformGameObjectTable> CreatePlatformGameObjectTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PlatformGameObjectTable.AddRows(builder, RowsOffset);
    return PlatformGameObjectTable.EndPlatformGameObjectTable(builder);
  }

  public static void StartPlatformGameObjectTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PlatformGameObject>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PlatformGameObject>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PlatformGameObjectTable> EndPlatformGameObjectTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PlatformGameObjectTable>(o);
  }
  public PlatformGameObjectTableT UnPack() {
    var _o = new PlatformGameObjectTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PlatformGameObjectTableT _o) {
    _o.Rows = new List<GDT.PlatformGameObjectT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PlatformGameObjectTable> Pack(FlatBufferBuilder builder, PlatformGameObjectTableT _o) {
    if (_o == null) return default(Offset<GDT.PlatformGameObjectTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PlatformGameObject>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PlatformGameObject.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePlatformGameObjectTable(
      builder,
      _Rows);
  }
};

public class PlatformGameObjectTableT
{
  public List<GDT.PlatformGameObjectT> Rows { get; set; }

  public PlatformGameObjectTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct TriggerInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TriggerInfo GetRootAsTriggerInfo(ByteBuffer _bb) { return GetRootAsTriggerInfo(_bb, new TriggerInfo()); }
  public static TriggerInfo GetRootAsTriggerInfo(ByteBuffer _bb, TriggerInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TriggerInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotation { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Width { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Height { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Length { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.TriggerFuntionType TriggerFuntionID { get { int o = __p.__offset(18); return o != 0 ? (GDT.TriggerFuntionType)__p.bb.Get(o + __p.bb_pos) : GDT.TriggerFuntionType.TFT_None; } }

  public static void StartTriggerInfo(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(1, StageID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(2, PositionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<GDT.vector3> RotationOffset) { builder.AddStruct(3, RotationOffset.Value, 0); }
  public static void AddWidth(FlatBufferBuilder builder, float Width) { builder.AddFloat(4, Width, 0.0f); }
  public static void AddHeight(FlatBufferBuilder builder, float Height) { builder.AddFloat(5, Height, 0.0f); }
  public static void AddLength(FlatBufferBuilder builder, float Length) { builder.AddFloat(6, Length, 0.0f); }
  public static void AddTriggerFuntionID(FlatBufferBuilder builder, GDT.TriggerFuntionType TriggerFuntionID) { builder.AddByte(7, (byte)TriggerFuntionID, 0); }
  public static Offset<GDT.TriggerInfo> EndTriggerInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TriggerInfo>(o);
  }
  public TriggerInfoT UnPack() {
    var _o = new TriggerInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TriggerInfoT _o) {
    _o.TriggerID = this.TriggerID;
    _o.StageID = this.StageID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Width = this.Width;
    _o.Height = this.Height;
    _o.Length = this.Length;
    _o.TriggerFuntionID = this.TriggerFuntionID;
  }
  public static Offset<GDT.TriggerInfo> Pack(FlatBufferBuilder builder, TriggerInfoT _o) {
    if (_o == null) return default(Offset<GDT.TriggerInfo>);
    StartTriggerInfo(builder);
    AddTriggerID(builder, _o.TriggerID);
    AddStageID(builder, _o.StageID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotation(builder, GDT.vector3.Pack(builder, _o.Rotation));
    AddWidth(builder, _o.Width);
    AddHeight(builder, _o.Height);
    AddLength(builder, _o.Length);
    AddTriggerFuntionID(builder, _o.TriggerFuntionID);
    return EndTriggerInfo(builder);
  }
};

public class TriggerInfoT
{
  public int TriggerID { get; set; }
  public int StageID { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotation { get; set; }
  public float Width { get; set; }
  public float Height { get; set; }
  public float Length { get; set; }
  public GDT.TriggerFuntionType TriggerFuntionID { get; set; }

  public TriggerInfoT() {
    this.TriggerID = 0;
    this.StageID = 0;
    this.Position = new GDT.vector3T();
    this.Rotation = new GDT.vector3T();
    this.Width = 0.0f;
    this.Height = 0.0f;
    this.Length = 0.0f;
    this.TriggerFuntionID = GDT.TriggerFuntionType.TFT_None;
  }
}

public struct TriggerInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TriggerInfoTable GetRootAsTriggerInfoTable(ByteBuffer _bb) { return GetRootAsTriggerInfoTable(_bb, new TriggerInfoTable()); }
  public static TriggerInfoTable GetRootAsTriggerInfoTable(ByteBuffer _bb, TriggerInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TriggerInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TriggerInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TriggerInfo?)(new GDT.TriggerInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TriggerInfoTable> CreateTriggerInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TriggerInfoTable.AddRows(builder, RowsOffset);
    return TriggerInfoTable.EndTriggerInfoTable(builder);
  }

  public static void StartTriggerInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TriggerInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TriggerInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TriggerInfoTable> EndTriggerInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TriggerInfoTable>(o);
  }
  public TriggerInfoTableT UnPack() {
    var _o = new TriggerInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TriggerInfoTableT _o) {
    _o.Rows = new List<GDT.TriggerInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TriggerInfoTable> Pack(FlatBufferBuilder builder, TriggerInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.TriggerInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TriggerInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TriggerInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTriggerInfoTable(
      builder,
      _Rows);
  }
};

public class TriggerInfoTableT
{
  public List<GDT.TriggerInfoT> Rows { get; set; }

  public TriggerInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct SpawnTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SpawnTrigger GetRootAsSpawnTrigger(ByteBuffer _bb) { return GetRootAsSpawnTrigger(_bb, new SpawnTrigger()); }
  public static SpawnTrigger GetRootAsSpawnTrigger(ByteBuffer _bb, SpawnTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpawnTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateObjectID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? CreatePosition { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? DeletePosition { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? AlramPosition { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int RespawnTime { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpawnDelayAfterEffect { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartSpawnTrigger(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddCreateObjectID(FlatBufferBuilder builder, int CreateObjectID) { builder.AddInt(1, CreateObjectID, 0); }
  public static void AddCreatePosition(FlatBufferBuilder builder, Offset<GDT.vector3> CreatePositionOffset) { builder.AddStruct(2, CreatePositionOffset.Value, 0); }
  public static void AddDeletePosition(FlatBufferBuilder builder, Offset<GDT.vector3> DeletePositionOffset) { builder.AddStruct(3, DeletePositionOffset.Value, 0); }
  public static void AddAlramPosition(FlatBufferBuilder builder, Offset<GDT.vector3> AlramPositionOffset) { builder.AddStruct(4, AlramPositionOffset.Value, 0); }
  public static void AddRespawnTime(FlatBufferBuilder builder, int RespawnTime) { builder.AddInt(5, RespawnTime, 0); }
  public static void AddSpawnDelayAfterEffect(FlatBufferBuilder builder, int SpawnDelayAfterEffect) { builder.AddInt(6, SpawnDelayAfterEffect, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(7, EffectID, 0); }
  public static Offset<GDT.SpawnTrigger> EndSpawnTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SpawnTrigger>(o);
  }
  public SpawnTriggerT UnPack() {
    var _o = new SpawnTriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpawnTriggerT _o) {
    _o.TriggerID = this.TriggerID;
    _o.CreateObjectID = this.CreateObjectID;
    _o.CreatePosition = this.CreatePosition.HasValue ? this.CreatePosition.Value.UnPack() : null;
    _o.DeletePosition = this.DeletePosition.HasValue ? this.DeletePosition.Value.UnPack() : null;
    _o.AlramPosition = this.AlramPosition.HasValue ? this.AlramPosition.Value.UnPack() : null;
    _o.RespawnTime = this.RespawnTime;
    _o.SpawnDelayAfterEffect = this.SpawnDelayAfterEffect;
    _o.EffectID = this.EffectID;
  }
  public static Offset<GDT.SpawnTrigger> Pack(FlatBufferBuilder builder, SpawnTriggerT _o) {
    if (_o == null) return default(Offset<GDT.SpawnTrigger>);
    StartSpawnTrigger(builder);
    AddTriggerID(builder, _o.TriggerID);
    AddCreateObjectID(builder, _o.CreateObjectID);
    AddCreatePosition(builder, GDT.vector3.Pack(builder, _o.CreatePosition));
    AddDeletePosition(builder, GDT.vector3.Pack(builder, _o.DeletePosition));
    AddAlramPosition(builder, GDT.vector3.Pack(builder, _o.AlramPosition));
    AddRespawnTime(builder, _o.RespawnTime);
    AddSpawnDelayAfterEffect(builder, _o.SpawnDelayAfterEffect);
    AddEffectID(builder, _o.EffectID);
    return EndSpawnTrigger(builder);
  }
};

public class SpawnTriggerT
{
  public int TriggerID { get; set; }
  public int CreateObjectID { get; set; }
  public GDT.vector3T CreatePosition { get; set; }
  public GDT.vector3T DeletePosition { get; set; }
  public GDT.vector3T AlramPosition { get; set; }
  public int RespawnTime { get; set; }
  public int SpawnDelayAfterEffect { get; set; }
  public int EffectID { get; set; }

  public SpawnTriggerT() {
    this.TriggerID = 0;
    this.CreateObjectID = 0;
    this.CreatePosition = new GDT.vector3T();
    this.DeletePosition = new GDT.vector3T();
    this.AlramPosition = new GDT.vector3T();
    this.RespawnTime = 0;
    this.SpawnDelayAfterEffect = 0;
    this.EffectID = 0;
  }
}

public struct SpawnTriggerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SpawnTriggerTable GetRootAsSpawnTriggerTable(ByteBuffer _bb) { return GetRootAsSpawnTriggerTable(_bb, new SpawnTriggerTable()); }
  public static SpawnTriggerTable GetRootAsSpawnTriggerTable(ByteBuffer _bb, SpawnTriggerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SpawnTriggerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SpawnTrigger? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SpawnTrigger?)(new GDT.SpawnTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SpawnTriggerTable> CreateSpawnTriggerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SpawnTriggerTable.AddRows(builder, RowsOffset);
    return SpawnTriggerTable.EndSpawnTriggerTable(builder);
  }

  public static void StartSpawnTriggerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SpawnTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SpawnTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SpawnTriggerTable> EndSpawnTriggerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SpawnTriggerTable>(o);
  }
  public SpawnTriggerTableT UnPack() {
    var _o = new SpawnTriggerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SpawnTriggerTableT _o) {
    _o.Rows = new List<GDT.SpawnTriggerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SpawnTriggerTable> Pack(FlatBufferBuilder builder, SpawnTriggerTableT _o) {
    if (_o == null) return default(Offset<GDT.SpawnTriggerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SpawnTrigger>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SpawnTrigger.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSpawnTriggerTable(
      builder,
      _Rows);
  }
};

public class SpawnTriggerTableT
{
  public List<GDT.SpawnTriggerT> Rows { get; set; }

  public SpawnTriggerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct AnimationTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationTrigger GetRootAsAnimationTrigger(ByteBuffer _bb) { return GetRootAsAnimationTrigger(_bb, new AnimationTrigger()); }
  public static AnimationTrigger GetRootAsAnimationTrigger(ByteBuffer _bb, AnimationTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float AnimSpeed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string ResourceName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(10); }

  public static void StartAnimationTrigger(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddAnimSpeed(FlatBufferBuilder builder, float AnimSpeed) { builder.AddFloat(1, AnimSpeed, 0.0f); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(2, PositionOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(3, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.AnimationTrigger> EndAnimationTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.AnimationTrigger>(o);
  }
  public AnimationTriggerT UnPack() {
    var _o = new AnimationTriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationTriggerT _o) {
    _o.TriggerID = this.TriggerID;
    _o.AnimSpeed = this.AnimSpeed;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.AnimationTrigger> Pack(FlatBufferBuilder builder, AnimationTriggerT _o) {
    if (_o == null) return default(Offset<GDT.AnimationTrigger>);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartAnimationTrigger(builder);
    AddTriggerID(builder, _o.TriggerID);
    AddAnimSpeed(builder, _o.AnimSpeed);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddResourceName(builder, _ResourceName);
    return EndAnimationTrigger(builder);
  }
};

public class AnimationTriggerT
{
  public int TriggerID { get; set; }
  public float AnimSpeed { get; set; }
  public GDT.vector3T Position { get; set; }
  public string ResourceName { get; set; }

  public AnimationTriggerT() {
    this.TriggerID = 0;
    this.AnimSpeed = 0.0f;
    this.Position = new GDT.vector3T();
    this.ResourceName = null;
  }
}

public struct AnimationTriggerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static AnimationTriggerTable GetRootAsAnimationTriggerTable(ByteBuffer _bb) { return GetRootAsAnimationTriggerTable(_bb, new AnimationTriggerTable()); }
  public static AnimationTriggerTable GetRootAsAnimationTriggerTable(ByteBuffer _bb, AnimationTriggerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public AnimationTriggerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.AnimationTrigger? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.AnimationTrigger?)(new GDT.AnimationTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.AnimationTriggerTable> CreateAnimationTriggerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    AnimationTriggerTable.AddRows(builder, RowsOffset);
    return AnimationTriggerTable.EndAnimationTriggerTable(builder);
  }

  public static void StartAnimationTriggerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.AnimationTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.AnimationTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.AnimationTriggerTable> EndAnimationTriggerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.AnimationTriggerTable>(o);
  }
  public AnimationTriggerTableT UnPack() {
    var _o = new AnimationTriggerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(AnimationTriggerTableT _o) {
    _o.Rows = new List<GDT.AnimationTriggerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.AnimationTriggerTable> Pack(FlatBufferBuilder builder, AnimationTriggerTableT _o) {
    if (_o == null) return default(Offset<GDT.AnimationTriggerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.AnimationTrigger>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.AnimationTrigger.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateAnimationTriggerTable(
      builder,
      _Rows);
  }
};

public class AnimationTriggerTableT
{
  public List<GDT.AnimationTriggerT> Rows { get; set; }

  public AnimationTriggerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct RespawnTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RespawnTrigger GetRootAsRespawnTrigger(ByteBuffer _bb) { return GetRootAsRespawnTrigger(_bb, new RespawnTrigger()); }
  public static RespawnTrigger GetRootAsRespawnTrigger(ByteBuffer _bb, RespawnTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RespawnTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int BuffID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartRespawnTrigger(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(1, PositionOffset.Value, 0); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(2, BuffID, 0); }
  public static Offset<GDT.RespawnTrigger> EndRespawnTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.RespawnTrigger>(o);
  }
  public RespawnTriggerT UnPack() {
    var _o = new RespawnTriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RespawnTriggerT _o) {
    _o.TriggerID = this.TriggerID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.BuffID = this.BuffID;
  }
  public static Offset<GDT.RespawnTrigger> Pack(FlatBufferBuilder builder, RespawnTriggerT _o) {
    if (_o == null) return default(Offset<GDT.RespawnTrigger>);
    StartRespawnTrigger(builder);
    AddTriggerID(builder, _o.TriggerID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddBuffID(builder, _o.BuffID);
    return EndRespawnTrigger(builder);
  }
};

public class RespawnTriggerT
{
  public int TriggerID { get; set; }
  public GDT.vector3T Position { get; set; }
  public int BuffID { get; set; }

  public RespawnTriggerT() {
    this.TriggerID = 0;
    this.Position = new GDT.vector3T();
    this.BuffID = 0;
  }
}

public struct RespawnTriggerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RespawnTriggerTable GetRootAsRespawnTriggerTable(ByteBuffer _bb) { return GetRootAsRespawnTriggerTable(_bb, new RespawnTriggerTable()); }
  public static RespawnTriggerTable GetRootAsRespawnTriggerTable(ByteBuffer _bb, RespawnTriggerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RespawnTriggerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.RespawnTrigger? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.RespawnTrigger?)(new GDT.RespawnTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.RespawnTriggerTable> CreateRespawnTriggerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RespawnTriggerTable.AddRows(builder, RowsOffset);
    return RespawnTriggerTable.EndRespawnTriggerTable(builder);
  }

  public static void StartRespawnTriggerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.RespawnTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.RespawnTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.RespawnTriggerTable> EndRespawnTriggerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.RespawnTriggerTable>(o);
  }
  public RespawnTriggerTableT UnPack() {
    var _o = new RespawnTriggerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RespawnTriggerTableT _o) {
    _o.Rows = new List<GDT.RespawnTriggerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.RespawnTriggerTable> Pack(FlatBufferBuilder builder, RespawnTriggerTableT _o) {
    if (_o == null) return default(Offset<GDT.RespawnTriggerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.RespawnTrigger>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.RespawnTrigger.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateRespawnTriggerTable(
      builder,
      _Rows);
  }
};

public class RespawnTriggerTableT
{
  public List<GDT.RespawnTriggerT> Rows { get; set; }

  public RespawnTriggerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct SkillTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillTrigger GetRootAsSkillTrigger(ByteBuffer _bb) { return GetRootAsSkillTrigger(_bb, new SkillTrigger()); }
  public static SkillTrigger GetRootAsSkillTrigger(ByteBuffer _bb, SkillTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillEventID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SkillTrigger> CreateSkillTrigger(FlatBufferBuilder builder,
      int TriggerID = 0,
      int SkillEventID = 0) {
    builder.StartTable(2);
    SkillTrigger.AddSkillEventID(builder, SkillEventID);
    SkillTrigger.AddTriggerID(builder, TriggerID);
    return SkillTrigger.EndSkillTrigger(builder);
  }

  public static void StartSkillTrigger(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddSkillEventID(FlatBufferBuilder builder, int SkillEventID) { builder.AddInt(1, SkillEventID, 0); }
  public static Offset<GDT.SkillTrigger> EndSkillTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillTrigger>(o);
  }
  public SkillTriggerT UnPack() {
    var _o = new SkillTriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillTriggerT _o) {
    _o.TriggerID = this.TriggerID;
    _o.SkillEventID = this.SkillEventID;
  }
  public static Offset<GDT.SkillTrigger> Pack(FlatBufferBuilder builder, SkillTriggerT _o) {
    if (_o == null) return default(Offset<GDT.SkillTrigger>);
    return CreateSkillTrigger(
      builder,
      _o.TriggerID,
      _o.SkillEventID);
  }
};

public class SkillTriggerT
{
  public int TriggerID { get; set; }
  public int SkillEventID { get; set; }

  public SkillTriggerT() {
    this.TriggerID = 0;
    this.SkillEventID = 0;
  }
}

public struct SkillTriggerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillTriggerTable GetRootAsSkillTriggerTable(ByteBuffer _bb) { return GetRootAsSkillTriggerTable(_bb, new SkillTriggerTable()); }
  public static SkillTriggerTable GetRootAsSkillTriggerTable(ByteBuffer _bb, SkillTriggerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillTriggerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SkillTrigger? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SkillTrigger?)(new GDT.SkillTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SkillTriggerTable> CreateSkillTriggerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillTriggerTable.AddRows(builder, RowsOffset);
    return SkillTriggerTable.EndSkillTriggerTable(builder);
  }

  public static void StartSkillTriggerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SkillTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SkillTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SkillTriggerTable> EndSkillTriggerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillTriggerTable>(o);
  }
  public SkillTriggerTableT UnPack() {
    var _o = new SkillTriggerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillTriggerTableT _o) {
    _o.Rows = new List<GDT.SkillTriggerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SkillTriggerTable> Pack(FlatBufferBuilder builder, SkillTriggerTableT _o) {
    if (_o == null) return default(Offset<GDT.SkillTriggerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SkillTrigger>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SkillTrigger.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSkillTriggerTable(
      builder,
      _Rows);
  }
};

public class SkillTriggerTableT
{
  public List<GDT.SkillTriggerT> Rows { get; set; }

  public SkillTriggerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct TrackTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TrackTrigger GetRootAsTrackTrigger(ByteBuffer _bb) { return GetRootAsTrackTrigger(_bb, new TrackTrigger()); }
  public static TrackTrigger GetRootAsTrackTrigger(ByteBuffer _bb, TrackTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float StraightMoveSpeed { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float LeftRightMoveSpeed { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.vector3? MoveDirection { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public bool AutoRun { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static void StartTrackTrigger(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddStraightMoveSpeed(FlatBufferBuilder builder, float StraightMoveSpeed) { builder.AddFloat(1, StraightMoveSpeed, 0.0f); }
  public static void AddLeftRightMoveSpeed(FlatBufferBuilder builder, float LeftRightMoveSpeed) { builder.AddFloat(2, LeftRightMoveSpeed, 0.0f); }
  public static void AddMoveDirection(FlatBufferBuilder builder, Offset<GDT.vector3> MoveDirectionOffset) { builder.AddStruct(3, MoveDirectionOffset.Value, 0); }
  public static void AddAutoRun(FlatBufferBuilder builder, bool AutoRun) { builder.AddBool(4, AutoRun, false); }
  public static Offset<GDT.TrackTrigger> EndTrackTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TrackTrigger>(o);
  }
  public TrackTriggerT UnPack() {
    var _o = new TrackTriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrackTriggerT _o) {
    _o.TriggerID = this.TriggerID;
    _o.StraightMoveSpeed = this.StraightMoveSpeed;
    _o.LeftRightMoveSpeed = this.LeftRightMoveSpeed;
    _o.MoveDirection = this.MoveDirection.HasValue ? this.MoveDirection.Value.UnPack() : null;
    _o.AutoRun = this.AutoRun;
  }
  public static Offset<GDT.TrackTrigger> Pack(FlatBufferBuilder builder, TrackTriggerT _o) {
    if (_o == null) return default(Offset<GDT.TrackTrigger>);
    StartTrackTrigger(builder);
    AddTriggerID(builder, _o.TriggerID);
    AddStraightMoveSpeed(builder, _o.StraightMoveSpeed);
    AddLeftRightMoveSpeed(builder, _o.LeftRightMoveSpeed);
    AddMoveDirection(builder, GDT.vector3.Pack(builder, _o.MoveDirection));
    AddAutoRun(builder, _o.AutoRun);
    return EndTrackTrigger(builder);
  }
};

public class TrackTriggerT
{
  public int TriggerID { get; set; }
  public float StraightMoveSpeed { get; set; }
  public float LeftRightMoveSpeed { get; set; }
  public GDT.vector3T MoveDirection { get; set; }
  public bool AutoRun { get; set; }

  public TrackTriggerT() {
    this.TriggerID = 0;
    this.StraightMoveSpeed = 0.0f;
    this.LeftRightMoveSpeed = 0.0f;
    this.MoveDirection = new GDT.vector3T();
    this.AutoRun = false;
  }
}

public struct TrackTriggerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TrackTriggerTable GetRootAsTrackTriggerTable(ByteBuffer _bb) { return GetRootAsTrackTriggerTable(_bb, new TrackTriggerTable()); }
  public static TrackTriggerTable GetRootAsTrackTriggerTable(ByteBuffer _bb, TrackTriggerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TrackTriggerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TrackTrigger? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TrackTrigger?)(new GDT.TrackTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TrackTriggerTable> CreateTrackTriggerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TrackTriggerTable.AddRows(builder, RowsOffset);
    return TrackTriggerTable.EndTrackTriggerTable(builder);
  }

  public static void StartTrackTriggerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TrackTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TrackTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TrackTriggerTable> EndTrackTriggerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TrackTriggerTable>(o);
  }
  public TrackTriggerTableT UnPack() {
    var _o = new TrackTriggerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TrackTriggerTableT _o) {
    _o.Rows = new List<GDT.TrackTriggerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TrackTriggerTable> Pack(FlatBufferBuilder builder, TrackTriggerTableT _o) {
    if (_o == null) return default(Offset<GDT.TrackTriggerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TrackTrigger>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TrackTrigger.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTrackTriggerTable(
      builder,
      _Rows);
  }
};

public class TrackTriggerTableT
{
  public List<GDT.TrackTriggerT> Rows { get; set; }

  public TrackTriggerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct DoorTrigger : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DoorTrigger GetRootAsDoorTrigger(ByteBuffer _bb) { return GetRootAsDoorTrigger(_bb, new DoorTrigger()); }
  public static DoorTrigger GetRootAsDoorTrigger(ByteBuffer _bb, DoorTrigger obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DoorTrigger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TriggerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool StartOpenState { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float DoorCycle { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.vector3? Position { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string ResourceName { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(12); }

  public static void StartDoorTrigger(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTriggerID(FlatBufferBuilder builder, int TriggerID) { builder.AddInt(0, TriggerID, 0); }
  public static void AddStartOpenState(FlatBufferBuilder builder, bool StartOpenState) { builder.AddBool(1, StartOpenState, false); }
  public static void AddDoorCycle(FlatBufferBuilder builder, float DoorCycle) { builder.AddFloat(2, DoorCycle, 0.0f); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(3, PositionOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(4, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.DoorTrigger> EndDoorTrigger(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.DoorTrigger>(o);
  }
  public DoorTriggerT UnPack() {
    var _o = new DoorTriggerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DoorTriggerT _o) {
    _o.TriggerID = this.TriggerID;
    _o.StartOpenState = this.StartOpenState;
    _o.DoorCycle = this.DoorCycle;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.DoorTrigger> Pack(FlatBufferBuilder builder, DoorTriggerT _o) {
    if (_o == null) return default(Offset<GDT.DoorTrigger>);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartDoorTrigger(builder);
    AddTriggerID(builder, _o.TriggerID);
    AddStartOpenState(builder, _o.StartOpenState);
    AddDoorCycle(builder, _o.DoorCycle);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddResourceName(builder, _ResourceName);
    return EndDoorTrigger(builder);
  }
};

public class DoorTriggerT
{
  public int TriggerID { get; set; }
  public bool StartOpenState { get; set; }
  public float DoorCycle { get; set; }
  public GDT.vector3T Position { get; set; }
  public string ResourceName { get; set; }

  public DoorTriggerT() {
    this.TriggerID = 0;
    this.StartOpenState = false;
    this.DoorCycle = 0.0f;
    this.Position = new GDT.vector3T();
    this.ResourceName = null;
  }
}

public struct DoorTriggerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DoorTriggerTable GetRootAsDoorTriggerTable(ByteBuffer _bb) { return GetRootAsDoorTriggerTable(_bb, new DoorTriggerTable()); }
  public static DoorTriggerTable GetRootAsDoorTriggerTable(ByteBuffer _bb, DoorTriggerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DoorTriggerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.DoorTrigger? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.DoorTrigger?)(new GDT.DoorTrigger()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.DoorTriggerTable> CreateDoorTriggerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DoorTriggerTable.AddRows(builder, RowsOffset);
    return DoorTriggerTable.EndDoorTriggerTable(builder);
  }

  public static void StartDoorTriggerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.DoorTrigger>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.DoorTrigger>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.DoorTriggerTable> EndDoorTriggerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.DoorTriggerTable>(o);
  }
  public DoorTriggerTableT UnPack() {
    var _o = new DoorTriggerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DoorTriggerTableT _o) {
    _o.Rows = new List<GDT.DoorTriggerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.DoorTriggerTable> Pack(FlatBufferBuilder builder, DoorTriggerTableT _o) {
    if (_o == null) return default(Offset<GDT.DoorTriggerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.DoorTrigger>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.DoorTrigger.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateDoorTriggerTable(
      builder,
      _Rows);
  }
};

public class DoorTriggerTableT
{
  public List<GDT.DoorTriggerT> Rows { get; set; }

  public DoorTriggerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct StandbyPositionParent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StandbyPositionParent GetRootAsStandbyPositionParent(ByteBuffer _bb) { return GetRootAsStandbyPositionParent(_bb, new StandbyPositionParent()); }
  public static StandbyPositionParent GetRootAsStandbyPositionParent(ByteBuffer _bb, StandbyPositionParent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StandbyPositionParent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StageID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PlatformGameID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector2? Size { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector2?)(new GDT.vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector2? PlayerSize { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector2?)(new GDT.vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? StartingAreaPosition { get { int o = __p.__offset(14); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? StartingAreaRotation { get { int o = __p.__offset(16); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float AreaWidth { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AreaHeight { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float AreaLength { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int EffectID { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartStandbyPositionParent(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(0, StageID, 0); }
  public static void AddPlatformGameID(FlatBufferBuilder builder, int PlatformGameID) { builder.AddInt(1, PlatformGameID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(2, PositionOffset.Value, 0); }
  public static void AddSize(FlatBufferBuilder builder, Offset<GDT.vector2> SizeOffset) { builder.AddStruct(3, SizeOffset.Value, 0); }
  public static void AddPlayerSize(FlatBufferBuilder builder, Offset<GDT.vector2> PlayerSizeOffset) { builder.AddStruct(4, PlayerSizeOffset.Value, 0); }
  public static void AddStartingAreaPosition(FlatBufferBuilder builder, Offset<GDT.vector3> StartingAreaPositionOffset) { builder.AddStruct(5, StartingAreaPositionOffset.Value, 0); }
  public static void AddStartingAreaRotation(FlatBufferBuilder builder, Offset<GDT.vector3> StartingAreaRotationOffset) { builder.AddStruct(6, StartingAreaRotationOffset.Value, 0); }
  public static void AddAreaWidth(FlatBufferBuilder builder, float AreaWidth) { builder.AddFloat(7, AreaWidth, 0.0f); }
  public static void AddAreaHeight(FlatBufferBuilder builder, float AreaHeight) { builder.AddFloat(8, AreaHeight, 0.0f); }
  public static void AddAreaLength(FlatBufferBuilder builder, float AreaLength) { builder.AddFloat(9, AreaLength, 0.0f); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(10, EffectID, 0); }
  public static Offset<GDT.StandbyPositionParent> EndStandbyPositionParent(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.StandbyPositionParent>(o);
  }
  public StandbyPositionParentT UnPack() {
    var _o = new StandbyPositionParentT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StandbyPositionParentT _o) {
    _o.StageID = this.StageID;
    _o.PlatformGameID = this.PlatformGameID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Size = this.Size.HasValue ? this.Size.Value.UnPack() : null;
    _o.PlayerSize = this.PlayerSize.HasValue ? this.PlayerSize.Value.UnPack() : null;
    _o.StartingAreaPosition = this.StartingAreaPosition.HasValue ? this.StartingAreaPosition.Value.UnPack() : null;
    _o.StartingAreaRotation = this.StartingAreaRotation.HasValue ? this.StartingAreaRotation.Value.UnPack() : null;
    _o.AreaWidth = this.AreaWidth;
    _o.AreaHeight = this.AreaHeight;
    _o.AreaLength = this.AreaLength;
    _o.EffectID = this.EffectID;
  }
  public static Offset<GDT.StandbyPositionParent> Pack(FlatBufferBuilder builder, StandbyPositionParentT _o) {
    if (_o == null) return default(Offset<GDT.StandbyPositionParent>);
    StartStandbyPositionParent(builder);
    AddStageID(builder, _o.StageID);
    AddPlatformGameID(builder, _o.PlatformGameID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddSize(builder, GDT.vector2.Pack(builder, _o.Size));
    AddPlayerSize(builder, GDT.vector2.Pack(builder, _o.PlayerSize));
    AddStartingAreaPosition(builder, GDT.vector3.Pack(builder, _o.StartingAreaPosition));
    AddStartingAreaRotation(builder, GDT.vector3.Pack(builder, _o.StartingAreaRotation));
    AddAreaWidth(builder, _o.AreaWidth);
    AddAreaHeight(builder, _o.AreaHeight);
    AddAreaLength(builder, _o.AreaLength);
    AddEffectID(builder, _o.EffectID);
    return EndStandbyPositionParent(builder);
  }
};

public class StandbyPositionParentT
{
  public int StageID { get; set; }
  public int PlatformGameID { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector2T Size { get; set; }
  public GDT.vector2T PlayerSize { get; set; }
  public GDT.vector3T StartingAreaPosition { get; set; }
  public GDT.vector3T StartingAreaRotation { get; set; }
  public float AreaWidth { get; set; }
  public float AreaHeight { get; set; }
  public float AreaLength { get; set; }
  public int EffectID { get; set; }

  public StandbyPositionParentT() {
    this.StageID = 0;
    this.PlatformGameID = 0;
    this.Position = new GDT.vector3T();
    this.Size = new GDT.vector2T();
    this.PlayerSize = new GDT.vector2T();
    this.StartingAreaPosition = new GDT.vector3T();
    this.StartingAreaRotation = new GDT.vector3T();
    this.AreaWidth = 0.0f;
    this.AreaHeight = 0.0f;
    this.AreaLength = 0.0f;
    this.EffectID = 0;
  }
}

public struct StandbyPositionParentTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StandbyPositionParentTable GetRootAsStandbyPositionParentTable(ByteBuffer _bb) { return GetRootAsStandbyPositionParentTable(_bb, new StandbyPositionParentTable()); }
  public static StandbyPositionParentTable GetRootAsStandbyPositionParentTable(ByteBuffer _bb, StandbyPositionParentTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StandbyPositionParentTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.StandbyPositionParent? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.StandbyPositionParent?)(new GDT.StandbyPositionParent()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.StandbyPositionParentTable> CreateStandbyPositionParentTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StandbyPositionParentTable.AddRows(builder, RowsOffset);
    return StandbyPositionParentTable.EndStandbyPositionParentTable(builder);
  }

  public static void StartStandbyPositionParentTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.StandbyPositionParent>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.StandbyPositionParent>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.StandbyPositionParentTable> EndStandbyPositionParentTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.StandbyPositionParentTable>(o);
  }
  public StandbyPositionParentTableT UnPack() {
    var _o = new StandbyPositionParentTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StandbyPositionParentTableT _o) {
    _o.Rows = new List<GDT.StandbyPositionParentT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.StandbyPositionParentTable> Pack(FlatBufferBuilder builder, StandbyPositionParentTableT _o) {
    if (_o == null) return default(Offset<GDT.StandbyPositionParentTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.StandbyPositionParent>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.StandbyPositionParent.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateStandbyPositionParentTable(
      builder,
      _Rows);
  }
};

public class StandbyPositionParentTableT
{
  public List<GDT.StandbyPositionParentT> Rows { get; set; }

  public StandbyPositionParentTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct StandbyPositionInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StandbyPositionInfo GetRootAsStandbyPositionInfo(ByteBuffer _bb) { return GetRootAsStandbyPositionInfo(_bb, new StandbyPositionInfo()); }
  public static StandbyPositionInfo GetRootAsStandbyPositionInfo(ByteBuffer _bb, StandbyPositionInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StandbyPositionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StageID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short Direction { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }

  public static void StartStandbyPositionInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(0, StageID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(1, PositionOffset.Value, 0); }
  public static void AddDirection(FlatBufferBuilder builder, short Direction) { builder.AddShort(2, Direction, 0); }
  public static Offset<GDT.StandbyPositionInfo> EndStandbyPositionInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.StandbyPositionInfo>(o);
  }
  public StandbyPositionInfoT UnPack() {
    var _o = new StandbyPositionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StandbyPositionInfoT _o) {
    _o.StageID = this.StageID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Direction = this.Direction;
  }
  public static Offset<GDT.StandbyPositionInfo> Pack(FlatBufferBuilder builder, StandbyPositionInfoT _o) {
    if (_o == null) return default(Offset<GDT.StandbyPositionInfo>);
    StartStandbyPositionInfo(builder);
    AddStageID(builder, _o.StageID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddDirection(builder, _o.Direction);
    return EndStandbyPositionInfo(builder);
  }
};

public class StandbyPositionInfoT
{
  public int StageID { get; set; }
  public GDT.vector3T Position { get; set; }
  public short Direction { get; set; }

  public StandbyPositionInfoT() {
    this.StageID = 0;
    this.Position = new GDT.vector3T();
    this.Direction = 0;
  }
}

public struct StandbyPositionInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StandbyPositionInfoTable GetRootAsStandbyPositionInfoTable(ByteBuffer _bb) { return GetRootAsStandbyPositionInfoTable(_bb, new StandbyPositionInfoTable()); }
  public static StandbyPositionInfoTable GetRootAsStandbyPositionInfoTable(ByteBuffer _bb, StandbyPositionInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StandbyPositionInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.StandbyPositionInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.StandbyPositionInfo?)(new GDT.StandbyPositionInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.StandbyPositionInfoTable> CreateStandbyPositionInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StandbyPositionInfoTable.AddRows(builder, RowsOffset);
    return StandbyPositionInfoTable.EndStandbyPositionInfoTable(builder);
  }

  public static void StartStandbyPositionInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.StandbyPositionInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.StandbyPositionInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.StandbyPositionInfoTable> EndStandbyPositionInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.StandbyPositionInfoTable>(o);
  }
  public StandbyPositionInfoTableT UnPack() {
    var _o = new StandbyPositionInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StandbyPositionInfoTableT _o) {
    _o.Rows = new List<GDT.StandbyPositionInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.StandbyPositionInfoTable> Pack(FlatBufferBuilder builder, StandbyPositionInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.StandbyPositionInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.StandbyPositionInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.StandbyPositionInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateStandbyPositionInfoTable(
      builder,
      _Rows);
  }
};

public class StandbyPositionInfoTableT
{
  public List<GDT.StandbyPositionInfoT> Rows { get; set; }

  public StandbyPositionInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct StagePositionInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StagePositionInfo GetRootAsStagePositionInfo(ByteBuffer _bb) { return GetRootAsStagePositionInfo(_bb, new StagePositionInfo()); }
  public static StagePositionInfo GetRootAsStagePositionInfo(ByteBuffer _bb, StagePositionInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StagePositionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StageID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? StartPosition { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public short StartDirection { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetShort(o + __p.bb_pos) : (short)0; } }
  public GDT.vector3? EndPosition { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? EndRotation { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float EndWidth { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EndHeight { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float EndLength { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartStagePositionInfo(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(0, StageID, 0); }
  public static void AddStartPosition(FlatBufferBuilder builder, Offset<GDT.vector3> StartPositionOffset) { builder.AddStruct(1, StartPositionOffset.Value, 0); }
  public static void AddStartDirection(FlatBufferBuilder builder, short StartDirection) { builder.AddShort(2, StartDirection, 0); }
  public static void AddEndPosition(FlatBufferBuilder builder, Offset<GDT.vector3> EndPositionOffset) { builder.AddStruct(3, EndPositionOffset.Value, 0); }
  public static void AddEndRotation(FlatBufferBuilder builder, Offset<GDT.vector3> EndRotationOffset) { builder.AddStruct(4, EndRotationOffset.Value, 0); }
  public static void AddEndWidth(FlatBufferBuilder builder, float EndWidth) { builder.AddFloat(5, EndWidth, 0.0f); }
  public static void AddEndHeight(FlatBufferBuilder builder, float EndHeight) { builder.AddFloat(6, EndHeight, 0.0f); }
  public static void AddEndLength(FlatBufferBuilder builder, float EndLength) { builder.AddFloat(7, EndLength, 0.0f); }
  public static Offset<GDT.StagePositionInfo> EndStagePositionInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.StagePositionInfo>(o);
  }
  public StagePositionInfoT UnPack() {
    var _o = new StagePositionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StagePositionInfoT _o) {
    _o.StageID = this.StageID;
    _o.StartPosition = this.StartPosition.HasValue ? this.StartPosition.Value.UnPack() : null;
    _o.StartDirection = this.StartDirection;
    _o.EndPosition = this.EndPosition.HasValue ? this.EndPosition.Value.UnPack() : null;
    _o.EndRotation = this.EndRotation.HasValue ? this.EndRotation.Value.UnPack() : null;
    _o.EndWidth = this.EndWidth;
    _o.EndHeight = this.EndHeight;
    _o.EndLength = this.EndLength;
  }
  public static Offset<GDT.StagePositionInfo> Pack(FlatBufferBuilder builder, StagePositionInfoT _o) {
    if (_o == null) return default(Offset<GDT.StagePositionInfo>);
    StartStagePositionInfo(builder);
    AddStageID(builder, _o.StageID);
    AddStartPosition(builder, GDT.vector3.Pack(builder, _o.StartPosition));
    AddStartDirection(builder, _o.StartDirection);
    AddEndPosition(builder, GDT.vector3.Pack(builder, _o.EndPosition));
    AddEndRotation(builder, GDT.vector3.Pack(builder, _o.EndRotation));
    AddEndWidth(builder, _o.EndWidth);
    AddEndHeight(builder, _o.EndHeight);
    AddEndLength(builder, _o.EndLength);
    return EndStagePositionInfo(builder);
  }
};

public class StagePositionInfoT
{
  public int StageID { get; set; }
  public GDT.vector3T StartPosition { get; set; }
  public short StartDirection { get; set; }
  public GDT.vector3T EndPosition { get; set; }
  public GDT.vector3T EndRotation { get; set; }
  public float EndWidth { get; set; }
  public float EndHeight { get; set; }
  public float EndLength { get; set; }

  public StagePositionInfoT() {
    this.StageID = 0;
    this.StartPosition = new GDT.vector3T();
    this.StartDirection = 0;
    this.EndPosition = new GDT.vector3T();
    this.EndRotation = new GDT.vector3T();
    this.EndWidth = 0.0f;
    this.EndHeight = 0.0f;
    this.EndLength = 0.0f;
  }
}

public struct StagePositionInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static StagePositionInfoTable GetRootAsStagePositionInfoTable(ByteBuffer _bb) { return GetRootAsStagePositionInfoTable(_bb, new StagePositionInfoTable()); }
  public static StagePositionInfoTable GetRootAsStagePositionInfoTable(ByteBuffer _bb, StagePositionInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public StagePositionInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.StagePositionInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.StagePositionInfo?)(new GDT.StagePositionInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.StagePositionInfoTable> CreateStagePositionInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    StagePositionInfoTable.AddRows(builder, RowsOffset);
    return StagePositionInfoTable.EndStagePositionInfoTable(builder);
  }

  public static void StartStagePositionInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.StagePositionInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.StagePositionInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.StagePositionInfoTable> EndStagePositionInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.StagePositionInfoTable>(o);
  }
  public StagePositionInfoTableT UnPack() {
    var _o = new StagePositionInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(StagePositionInfoTableT _o) {
    _o.Rows = new List<GDT.StagePositionInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.StagePositionInfoTable> Pack(FlatBufferBuilder builder, StagePositionInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.StagePositionInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.StagePositionInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.StagePositionInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateStagePositionInfoTable(
      builder,
      _Rows);
  }
};

public class StagePositionInfoTableT
{
  public List<GDT.StagePositionInfoT> Rows { get; set; }

  public StagePositionInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct PGObjectSpawner : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGObjectSpawner GetRootAsPGObjectSpawner(ByteBuffer _bb) { return GetRootAsPGObjectSpawner(_bb, new PGObjectSpawner()); }
  public static PGObjectSpawner GetRootAsPGObjectSpawner(ByteBuffer _bb, PGObjectSpawner obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGObjectSpawner __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectSpawnerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateCycle { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateMaxCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateObjectID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? CreatePosition { get { int o = __p.__offset(14); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? DeletePosition { get { int o = __p.__offset(16); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? AlramPosition { get { int o = __p.__offset(18); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public int SpawnDelay { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpawnDelayAfterEffect { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectID { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static void StartPGObjectSpawner(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddObjectSpawnerID(FlatBufferBuilder builder, int ObjectSpawnerID) { builder.AddInt(0, ObjectSpawnerID, 0); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(1, StageID, 0); }
  public static void AddCreateCycle(FlatBufferBuilder builder, int CreateCycle) { builder.AddInt(2, CreateCycle, 0); }
  public static void AddCreateMaxCount(FlatBufferBuilder builder, int CreateMaxCount) { builder.AddInt(3, CreateMaxCount, 0); }
  public static void AddCreateObjectID(FlatBufferBuilder builder, int CreateObjectID) { builder.AddInt(4, CreateObjectID, 0); }
  public static void AddCreatePosition(FlatBufferBuilder builder, Offset<GDT.vector3> CreatePositionOffset) { builder.AddStruct(5, CreatePositionOffset.Value, 0); }
  public static void AddDeletePosition(FlatBufferBuilder builder, Offset<GDT.vector3> DeletePositionOffset) { builder.AddStruct(6, DeletePositionOffset.Value, 0); }
  public static void AddAlramPosition(FlatBufferBuilder builder, Offset<GDT.vector3> AlramPositionOffset) { builder.AddStruct(7, AlramPositionOffset.Value, 0); }
  public static void AddSpawnDelay(FlatBufferBuilder builder, int SpawnDelay) { builder.AddInt(8, SpawnDelay, 0); }
  public static void AddSpawnDelayAfterEffect(FlatBufferBuilder builder, int SpawnDelayAfterEffect) { builder.AddInt(9, SpawnDelayAfterEffect, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(10, EffectID, 0); }
  public static Offset<GDT.PGObjectSpawner> EndPGObjectSpawner(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGObjectSpawner>(o);
  }
  public PGObjectSpawnerT UnPack() {
    var _o = new PGObjectSpawnerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGObjectSpawnerT _o) {
    _o.ObjectSpawnerID = this.ObjectSpawnerID;
    _o.StageID = this.StageID;
    _o.CreateCycle = this.CreateCycle;
    _o.CreateMaxCount = this.CreateMaxCount;
    _o.CreateObjectID = this.CreateObjectID;
    _o.CreatePosition = this.CreatePosition.HasValue ? this.CreatePosition.Value.UnPack() : null;
    _o.DeletePosition = this.DeletePosition.HasValue ? this.DeletePosition.Value.UnPack() : null;
    _o.AlramPosition = this.AlramPosition.HasValue ? this.AlramPosition.Value.UnPack() : null;
    _o.SpawnDelay = this.SpawnDelay;
    _o.SpawnDelayAfterEffect = this.SpawnDelayAfterEffect;
    _o.EffectID = this.EffectID;
  }
  public static Offset<GDT.PGObjectSpawner> Pack(FlatBufferBuilder builder, PGObjectSpawnerT _o) {
    if (_o == null) return default(Offset<GDT.PGObjectSpawner>);
    StartPGObjectSpawner(builder);
    AddObjectSpawnerID(builder, _o.ObjectSpawnerID);
    AddStageID(builder, _o.StageID);
    AddCreateCycle(builder, _o.CreateCycle);
    AddCreateMaxCount(builder, _o.CreateMaxCount);
    AddCreateObjectID(builder, _o.CreateObjectID);
    AddCreatePosition(builder, GDT.vector3.Pack(builder, _o.CreatePosition));
    AddDeletePosition(builder, GDT.vector3.Pack(builder, _o.DeletePosition));
    AddAlramPosition(builder, GDT.vector3.Pack(builder, _o.AlramPosition));
    AddSpawnDelay(builder, _o.SpawnDelay);
    AddSpawnDelayAfterEffect(builder, _o.SpawnDelayAfterEffect);
    AddEffectID(builder, _o.EffectID);
    return EndPGObjectSpawner(builder);
  }
};

public class PGObjectSpawnerT
{
  public int ObjectSpawnerID { get; set; }
  public int StageID { get; set; }
  public int CreateCycle { get; set; }
  public int CreateMaxCount { get; set; }
  public int CreateObjectID { get; set; }
  public GDT.vector3T CreatePosition { get; set; }
  public GDT.vector3T DeletePosition { get; set; }
  public GDT.vector3T AlramPosition { get; set; }
  public int SpawnDelay { get; set; }
  public int SpawnDelayAfterEffect { get; set; }
  public int EffectID { get; set; }

  public PGObjectSpawnerT() {
    this.ObjectSpawnerID = 0;
    this.StageID = 0;
    this.CreateCycle = 0;
    this.CreateMaxCount = 0;
    this.CreateObjectID = 0;
    this.CreatePosition = new GDT.vector3T();
    this.DeletePosition = new GDT.vector3T();
    this.AlramPosition = new GDT.vector3T();
    this.SpawnDelay = 0;
    this.SpawnDelayAfterEffect = 0;
    this.EffectID = 0;
  }
}

public struct PGObjectSpawnerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGObjectSpawnerTable GetRootAsPGObjectSpawnerTable(ByteBuffer _bb) { return GetRootAsPGObjectSpawnerTable(_bb, new PGObjectSpawnerTable()); }
  public static PGObjectSpawnerTable GetRootAsPGObjectSpawnerTable(ByteBuffer _bb, PGObjectSpawnerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGObjectSpawnerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PGObjectSpawner? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PGObjectSpawner?)(new GDT.PGObjectSpawner()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PGObjectSpawnerTable> CreatePGObjectSpawnerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PGObjectSpawnerTable.AddRows(builder, RowsOffset);
    return PGObjectSpawnerTable.EndPGObjectSpawnerTable(builder);
  }

  public static void StartPGObjectSpawnerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PGObjectSpawner>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PGObjectSpawner>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PGObjectSpawnerTable> EndPGObjectSpawnerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGObjectSpawnerTable>(o);
  }
  public PGObjectSpawnerTableT UnPack() {
    var _o = new PGObjectSpawnerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGObjectSpawnerTableT _o) {
    _o.Rows = new List<GDT.PGObjectSpawnerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PGObjectSpawnerTable> Pack(FlatBufferBuilder builder, PGObjectSpawnerTableT _o) {
    if (_o == null) return default(Offset<GDT.PGObjectSpawnerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PGObjectSpawner>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PGObjectSpawner.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePGObjectSpawnerTable(
      builder,
      _Rows);
  }
};

public class PGObjectSpawnerTableT
{
  public List<GDT.PGObjectSpawnerT> Rows { get; set; }

  public PGObjectSpawnerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct PGObjectRandomSpawner : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGObjectRandomSpawner GetRootAsPGObjectRandomSpawner(ByteBuffer _bb) { return GetRootAsPGObjectRandomSpawner(_bb, new PGObjectRandomSpawner()); }
  public static PGObjectRandomSpawner GetRootAsPGObjectRandomSpawner(ByteBuffer _bb, PGObjectRandomSpawner obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGObjectRandomSpawner __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectSpawnerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateMinCount { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateMaxCount { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CreateObjectID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.PGObjectRandomSpawner> CreatePGObjectRandomSpawner(FlatBufferBuilder builder,
      int ObjectSpawnerID = 0,
      int StageID = 0,
      int CreateMinCount = 0,
      int CreateMaxCount = 0,
      int CreateObjectID = 0) {
    builder.StartTable(5);
    PGObjectRandomSpawner.AddCreateObjectID(builder, CreateObjectID);
    PGObjectRandomSpawner.AddCreateMaxCount(builder, CreateMaxCount);
    PGObjectRandomSpawner.AddCreateMinCount(builder, CreateMinCount);
    PGObjectRandomSpawner.AddStageID(builder, StageID);
    PGObjectRandomSpawner.AddObjectSpawnerID(builder, ObjectSpawnerID);
    return PGObjectRandomSpawner.EndPGObjectRandomSpawner(builder);
  }

  public static void StartPGObjectRandomSpawner(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddObjectSpawnerID(FlatBufferBuilder builder, int ObjectSpawnerID) { builder.AddInt(0, ObjectSpawnerID, 0); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(1, StageID, 0); }
  public static void AddCreateMinCount(FlatBufferBuilder builder, int CreateMinCount) { builder.AddInt(2, CreateMinCount, 0); }
  public static void AddCreateMaxCount(FlatBufferBuilder builder, int CreateMaxCount) { builder.AddInt(3, CreateMaxCount, 0); }
  public static void AddCreateObjectID(FlatBufferBuilder builder, int CreateObjectID) { builder.AddInt(4, CreateObjectID, 0); }
  public static Offset<GDT.PGObjectRandomSpawner> EndPGObjectRandomSpawner(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGObjectRandomSpawner>(o);
  }
  public PGObjectRandomSpawnerT UnPack() {
    var _o = new PGObjectRandomSpawnerT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGObjectRandomSpawnerT _o) {
    _o.ObjectSpawnerID = this.ObjectSpawnerID;
    _o.StageID = this.StageID;
    _o.CreateMinCount = this.CreateMinCount;
    _o.CreateMaxCount = this.CreateMaxCount;
    _o.CreateObjectID = this.CreateObjectID;
  }
  public static Offset<GDT.PGObjectRandomSpawner> Pack(FlatBufferBuilder builder, PGObjectRandomSpawnerT _o) {
    if (_o == null) return default(Offset<GDT.PGObjectRandomSpawner>);
    return CreatePGObjectRandomSpawner(
      builder,
      _o.ObjectSpawnerID,
      _o.StageID,
      _o.CreateMinCount,
      _o.CreateMaxCount,
      _o.CreateObjectID);
  }
};

public class PGObjectRandomSpawnerT
{
  public int ObjectSpawnerID { get; set; }
  public int StageID { get; set; }
  public int CreateMinCount { get; set; }
  public int CreateMaxCount { get; set; }
  public int CreateObjectID { get; set; }

  public PGObjectRandomSpawnerT() {
    this.ObjectSpawnerID = 0;
    this.StageID = 0;
    this.CreateMinCount = 0;
    this.CreateMaxCount = 0;
    this.CreateObjectID = 0;
  }
}

public struct PGObjectRandomSpawnerTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGObjectRandomSpawnerTable GetRootAsPGObjectRandomSpawnerTable(ByteBuffer _bb) { return GetRootAsPGObjectRandomSpawnerTable(_bb, new PGObjectRandomSpawnerTable()); }
  public static PGObjectRandomSpawnerTable GetRootAsPGObjectRandomSpawnerTable(ByteBuffer _bb, PGObjectRandomSpawnerTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGObjectRandomSpawnerTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PGObjectRandomSpawner? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PGObjectRandomSpawner?)(new GDT.PGObjectRandomSpawner()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PGObjectRandomSpawnerTable> CreatePGObjectRandomSpawnerTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PGObjectRandomSpawnerTable.AddRows(builder, RowsOffset);
    return PGObjectRandomSpawnerTable.EndPGObjectRandomSpawnerTable(builder);
  }

  public static void StartPGObjectRandomSpawnerTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PGObjectRandomSpawner>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PGObjectRandomSpawner>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PGObjectRandomSpawnerTable> EndPGObjectRandomSpawnerTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGObjectRandomSpawnerTable>(o);
  }
  public PGObjectRandomSpawnerTableT UnPack() {
    var _o = new PGObjectRandomSpawnerTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGObjectRandomSpawnerTableT _o) {
    _o.Rows = new List<GDT.PGObjectRandomSpawnerT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PGObjectRandomSpawnerTable> Pack(FlatBufferBuilder builder, PGObjectRandomSpawnerTableT _o) {
    if (_o == null) return default(Offset<GDT.PGObjectRandomSpawnerTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PGObjectRandomSpawner>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PGObjectRandomSpawner.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePGObjectRandomSpawnerTable(
      builder,
      _Rows);
  }
};

public class PGObjectRandomSpawnerTableT
{
  public List<GDT.PGObjectRandomSpawnerT> Rows { get; set; }

  public PGObjectRandomSpawnerTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct PGSpawnerPosGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGSpawnerPosGroup GetRootAsPGSpawnerPosGroup(ByteBuffer _bb) { return GetRootAsPGSpawnerPosGroup(_bb, new PGSpawnerPosGroup()); }
  public static PGSpawnerPosGroup GetRootAsPGSpawnerPosGroup(ByteBuffer _bb, PGSpawnerPosGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGSpawnerPosGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectSpawnerID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPGSpawnerPosGroup(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddObjectSpawnerID(FlatBufferBuilder builder, int ObjectSpawnerID) { builder.AddInt(0, ObjectSpawnerID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(1, PositionOffset.Value, 0); }
  public static Offset<GDT.PGSpawnerPosGroup> EndPGSpawnerPosGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGSpawnerPosGroup>(o);
  }
  public PGSpawnerPosGroupT UnPack() {
    var _o = new PGSpawnerPosGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGSpawnerPosGroupT _o) {
    _o.ObjectSpawnerID = this.ObjectSpawnerID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
  }
  public static Offset<GDT.PGSpawnerPosGroup> Pack(FlatBufferBuilder builder, PGSpawnerPosGroupT _o) {
    if (_o == null) return default(Offset<GDT.PGSpawnerPosGroup>);
    StartPGSpawnerPosGroup(builder);
    AddObjectSpawnerID(builder, _o.ObjectSpawnerID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    return EndPGSpawnerPosGroup(builder);
  }
};

public class PGSpawnerPosGroupT
{
  public int ObjectSpawnerID { get; set; }
  public GDT.vector3T Position { get; set; }

  public PGSpawnerPosGroupT() {
    this.ObjectSpawnerID = 0;
    this.Position = new GDT.vector3T();
  }
}

public struct PGSpawnerPosGroupTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGSpawnerPosGroupTable GetRootAsPGSpawnerPosGroupTable(ByteBuffer _bb) { return GetRootAsPGSpawnerPosGroupTable(_bb, new PGSpawnerPosGroupTable()); }
  public static PGSpawnerPosGroupTable GetRootAsPGSpawnerPosGroupTable(ByteBuffer _bb, PGSpawnerPosGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGSpawnerPosGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PGSpawnerPosGroup? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PGSpawnerPosGroup?)(new GDT.PGSpawnerPosGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PGSpawnerPosGroupTable> CreatePGSpawnerPosGroupTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PGSpawnerPosGroupTable.AddRows(builder, RowsOffset);
    return PGSpawnerPosGroupTable.EndPGSpawnerPosGroupTable(builder);
  }

  public static void StartPGSpawnerPosGroupTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PGSpawnerPosGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PGSpawnerPosGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PGSpawnerPosGroupTable> EndPGSpawnerPosGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGSpawnerPosGroupTable>(o);
  }
  public PGSpawnerPosGroupTableT UnPack() {
    var _o = new PGSpawnerPosGroupTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGSpawnerPosGroupTableT _o) {
    _o.Rows = new List<GDT.PGSpawnerPosGroupT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PGSpawnerPosGroupTable> Pack(FlatBufferBuilder builder, PGSpawnerPosGroupTableT _o) {
    if (_o == null) return default(Offset<GDT.PGSpawnerPosGroupTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PGSpawnerPosGroup>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PGSpawnerPosGroup.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePGSpawnerPosGroupTable(
      builder,
      _Rows);
  }
};

public class PGSpawnerPosGroupTableT
{
  public List<GDT.PGSpawnerPosGroupT> Rows { get; set; }

  public PGSpawnerPosGroupTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct PGPendulum : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGPendulum GetRootAsPGPendulum(ByteBuffer _bb) { return GetRootAsPGPendulum(_bb, new PGPendulum()); }
  public static PGPendulum GetRootAsPGPendulum(ByteBuffer _bb, PGPendulum obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGPendulum __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ObjectID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StageID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotation { get { int o = __p.__offset(10); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Forward { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? ModelPosition { get { int o = __p.__offset(14); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Angle { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Frequency { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Radius { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int SkillEventID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ResourceName { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(24); }

  public static void StartPGPendulum(FlatBufferBuilder builder) { builder.StartTable(11); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(0, ObjectID, 0); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(1, StageID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(2, PositionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<GDT.vector3> RotationOffset) { builder.AddStruct(3, RotationOffset.Value, 0); }
  public static void AddForward(FlatBufferBuilder builder, Offset<GDT.vector3> ForwardOffset) { builder.AddStruct(4, ForwardOffset.Value, 0); }
  public static void AddModelPosition(FlatBufferBuilder builder, Offset<GDT.vector3> ModelPositionOffset) { builder.AddStruct(5, ModelPositionOffset.Value, 0); }
  public static void AddAngle(FlatBufferBuilder builder, float Angle) { builder.AddFloat(6, Angle, 0.0f); }
  public static void AddFrequency(FlatBufferBuilder builder, float Frequency) { builder.AddFloat(7, Frequency, 0.0f); }
  public static void AddRadius(FlatBufferBuilder builder, float Radius) { builder.AddFloat(8, Radius, 0.0f); }
  public static void AddSkillEventID(FlatBufferBuilder builder, int SkillEventID) { builder.AddInt(9, SkillEventID, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(10, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.PGPendulum> EndPGPendulum(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGPendulum>(o);
  }
  public PGPendulumT UnPack() {
    var _o = new PGPendulumT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGPendulumT _o) {
    _o.ObjectID = this.ObjectID;
    _o.StageID = this.StageID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.Forward = this.Forward.HasValue ? this.Forward.Value.UnPack() : null;
    _o.ModelPosition = this.ModelPosition.HasValue ? this.ModelPosition.Value.UnPack() : null;
    _o.Angle = this.Angle;
    _o.Frequency = this.Frequency;
    _o.Radius = this.Radius;
    _o.SkillEventID = this.SkillEventID;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.PGPendulum> Pack(FlatBufferBuilder builder, PGPendulumT _o) {
    if (_o == null) return default(Offset<GDT.PGPendulum>);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartPGPendulum(builder);
    AddObjectID(builder, _o.ObjectID);
    AddStageID(builder, _o.StageID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotation(builder, GDT.vector3.Pack(builder, _o.Rotation));
    AddForward(builder, GDT.vector3.Pack(builder, _o.Forward));
    AddModelPosition(builder, GDT.vector3.Pack(builder, _o.ModelPosition));
    AddAngle(builder, _o.Angle);
    AddFrequency(builder, _o.Frequency);
    AddRadius(builder, _o.Radius);
    AddSkillEventID(builder, _o.SkillEventID);
    AddResourceName(builder, _ResourceName);
    return EndPGPendulum(builder);
  }
};

public class PGPendulumT
{
  public int ObjectID { get; set; }
  public int StageID { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotation { get; set; }
  public GDT.vector3T Forward { get; set; }
  public GDT.vector3T ModelPosition { get; set; }
  public float Angle { get; set; }
  public float Frequency { get; set; }
  public float Radius { get; set; }
  public int SkillEventID { get; set; }
  public string ResourceName { get; set; }

  public PGPendulumT() {
    this.ObjectID = 0;
    this.StageID = 0;
    this.Position = new GDT.vector3T();
    this.Rotation = new GDT.vector3T();
    this.Forward = new GDT.vector3T();
    this.ModelPosition = new GDT.vector3T();
    this.Angle = 0.0f;
    this.Frequency = 0.0f;
    this.Radius = 0.0f;
    this.SkillEventID = 0;
    this.ResourceName = null;
  }
}

public struct PGPendulumTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGPendulumTable GetRootAsPGPendulumTable(ByteBuffer _bb) { return GetRootAsPGPendulumTable(_bb, new PGPendulumTable()); }
  public static PGPendulumTable GetRootAsPGPendulumTable(ByteBuffer _bb, PGPendulumTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGPendulumTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PGPendulum? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PGPendulum?)(new GDT.PGPendulum()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PGPendulumTable> CreatePGPendulumTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PGPendulumTable.AddRows(builder, RowsOffset);
    return PGPendulumTable.EndPGPendulumTable(builder);
  }

  public static void StartPGPendulumTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PGPendulum>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PGPendulum>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PGPendulumTable> EndPGPendulumTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGPendulumTable>(o);
  }
  public PGPendulumTableT UnPack() {
    var _o = new PGPendulumTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGPendulumTableT _o) {
    _o.Rows = new List<GDT.PGPendulumT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PGPendulumTable> Pack(FlatBufferBuilder builder, PGPendulumTableT _o) {
    if (_o == null) return default(Offset<GDT.PGPendulumTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PGPendulum>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PGPendulum.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePGPendulumTable(
      builder,
      _Rows);
  }
};

public class PGPendulumTableT
{
  public List<GDT.PGPendulumT> Rows { get; set; }

  public PGPendulumTableT() {
    this.Rows = null;
  }
}

/// Defined by PlatformGameToolData_100101.xlsx
public struct PGObstacle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGObstacle GetRootAsPGObstacle(ByteBuffer _bb) { return GetRootAsPGObstacle(_bb, new PGObstacle()); }
  public static PGObstacle GetRootAsPGObstacle(ByteBuffer _bb, PGObstacle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGObstacle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int StageID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(6); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector3? Rotation { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string ResourceName { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetResourceNameBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetResourceNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetResourceNameArray() { return __p.__vector_as_array<byte>(10); }

  public static void StartPGObstacle(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddStageID(FlatBufferBuilder builder, int StageID) { builder.AddInt(0, StageID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(1, PositionOffset.Value, 0); }
  public static void AddRotation(FlatBufferBuilder builder, Offset<GDT.vector3> RotationOffset) { builder.AddStruct(2, RotationOffset.Value, 0); }
  public static void AddResourceName(FlatBufferBuilder builder, StringOffset ResourceNameOffset) { builder.AddOffset(3, ResourceNameOffset.Value, 0); }
  public static Offset<GDT.PGObstacle> EndPGObstacle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGObstacle>(o);
  }
  public PGObstacleT UnPack() {
    var _o = new PGObstacleT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGObstacleT _o) {
    _o.StageID = this.StageID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.Rotation = this.Rotation.HasValue ? this.Rotation.Value.UnPack() : null;
    _o.ResourceName = this.ResourceName;
  }
  public static Offset<GDT.PGObstacle> Pack(FlatBufferBuilder builder, PGObstacleT _o) {
    if (_o == null) return default(Offset<GDT.PGObstacle>);
    var _ResourceName = _o.ResourceName == null ? default(StringOffset) : builder.CreateString(_o.ResourceName);
    StartPGObstacle(builder);
    AddStageID(builder, _o.StageID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotation(builder, GDT.vector3.Pack(builder, _o.Rotation));
    AddResourceName(builder, _ResourceName);
    return EndPGObstacle(builder);
  }
};

public class PGObstacleT
{
  public int StageID { get; set; }
  public GDT.vector3T Position { get; set; }
  public GDT.vector3T Rotation { get; set; }
  public string ResourceName { get; set; }

  public PGObstacleT() {
    this.StageID = 0;
    this.Position = new GDT.vector3T();
    this.Rotation = new GDT.vector3T();
    this.ResourceName = null;
  }
}

public struct PGObstacleTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static PGObstacleTable GetRootAsPGObstacleTable(ByteBuffer _bb) { return GetRootAsPGObstacleTable(_bb, new PGObstacleTable()); }
  public static PGObstacleTable GetRootAsPGObstacleTable(ByteBuffer _bb, PGObstacleTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PGObstacleTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.PGObstacle? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.PGObstacle?)(new GDT.PGObstacle()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.PGObstacleTable> CreatePGObstacleTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PGObstacleTable.AddRows(builder, RowsOffset);
    return PGObstacleTable.EndPGObstacleTable(builder);
  }

  public static void StartPGObstacleTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.PGObstacle>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.PGObstacle>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.PGObstacleTable> EndPGObstacleTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.PGObstacleTable>(o);
  }
  public PGObstacleTableT UnPack() {
    var _o = new PGObstacleTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PGObstacleTableT _o) {
    _o.Rows = new List<GDT.PGObstacleT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.PGObstacleTable> Pack(FlatBufferBuilder builder, PGObstacleTableT _o) {
    if (_o == null) return default(Offset<GDT.PGObstacleTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.PGObstacle>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.PGObstacle.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreatePGObstacleTable(
      builder,
      _Rows);
  }
};

public class PGObstacleTableT
{
  public List<GDT.PGObstacleT> Rows { get; set; }

  public PGObstacleTableT() {
    this.Rows = null;
  }
}

/// Defined by QuestCamera.xlsx
public struct QuestCamera : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestCamera GetRootAsQuestCamera(ByteBuffer _bb) { return GetRootAsQuestCamera(_bb, new QuestCamera()); }
  public static QuestCamera GetRootAsQuestCamera(ByteBuffer _bb, QuestCamera obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestCamera __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float PlayerDistance { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.vector3? PlayerOffset { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float CameraDistance { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.vector3? CameraOffset { get { int o = __p.__offset(12); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector2? Fov { get { int o = __p.__offset(14); return o != 0 ? (GDT.vector2?)(new GDT.vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.vector2? CenterOffset { get { int o = __p.__offset(16); return o != 0 ? (GDT.vector2?)(new GDT.vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartQuestCamera(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddPlayerDistance(FlatBufferBuilder builder, float PlayerDistance) { builder.AddFloat(1, PlayerDistance, 0.0f); }
  public static void AddPlayerOffset(FlatBufferBuilder builder, Offset<GDT.vector3> PlayerOffsetOffset) { builder.AddStruct(2, PlayerOffsetOffset.Value, 0); }
  public static void AddCameraDistance(FlatBufferBuilder builder, float CameraDistance) { builder.AddFloat(3, CameraDistance, 0.0f); }
  public static void AddCameraOffset(FlatBufferBuilder builder, Offset<GDT.vector3> CameraOffsetOffset) { builder.AddStruct(4, CameraOffsetOffset.Value, 0); }
  public static void AddFov(FlatBufferBuilder builder, Offset<GDT.vector2> FovOffset) { builder.AddStruct(5, FovOffset.Value, 0); }
  public static void AddCenterOffset(FlatBufferBuilder builder, Offset<GDT.vector2> CenterOffsetOffset) { builder.AddStruct(6, CenterOffsetOffset.Value, 0); }
  public static Offset<GDT.QuestCamera> EndQuestCamera(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestCamera>(o);
  }
  public QuestCameraT UnPack() {
    var _o = new QuestCameraT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestCameraT _o) {
    _o.ID = this.ID;
    _o.PlayerDistance = this.PlayerDistance;
    _o.PlayerOffset = this.PlayerOffset.HasValue ? this.PlayerOffset.Value.UnPack() : null;
    _o.CameraDistance = this.CameraDistance;
    _o.CameraOffset = this.CameraOffset.HasValue ? this.CameraOffset.Value.UnPack() : null;
    _o.Fov = this.Fov.HasValue ? this.Fov.Value.UnPack() : null;
    _o.CenterOffset = this.CenterOffset.HasValue ? this.CenterOffset.Value.UnPack() : null;
  }
  public static Offset<GDT.QuestCamera> Pack(FlatBufferBuilder builder, QuestCameraT _o) {
    if (_o == null) return default(Offset<GDT.QuestCamera>);
    StartQuestCamera(builder);
    AddID(builder, _o.ID);
    AddPlayerDistance(builder, _o.PlayerDistance);
    AddPlayerOffset(builder, GDT.vector3.Pack(builder, _o.PlayerOffset));
    AddCameraDistance(builder, _o.CameraDistance);
    AddCameraOffset(builder, GDT.vector3.Pack(builder, _o.CameraOffset));
    AddFov(builder, GDT.vector2.Pack(builder, _o.Fov));
    AddCenterOffset(builder, GDT.vector2.Pack(builder, _o.CenterOffset));
    return EndQuestCamera(builder);
  }
};

public class QuestCameraT
{
  public int ID { get; set; }
  public float PlayerDistance { get; set; }
  public GDT.vector3T PlayerOffset { get; set; }
  public float CameraDistance { get; set; }
  public GDT.vector3T CameraOffset { get; set; }
  public GDT.vector2T Fov { get; set; }
  public GDT.vector2T CenterOffset { get; set; }

  public QuestCameraT() {
    this.ID = 0;
    this.PlayerDistance = 0.0f;
    this.PlayerOffset = new GDT.vector3T();
    this.CameraDistance = 0.0f;
    this.CameraOffset = new GDT.vector3T();
    this.Fov = new GDT.vector2T();
    this.CenterOffset = new GDT.vector2T();
  }
}

public struct QuestCameraTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestCameraTable GetRootAsQuestCameraTable(ByteBuffer _bb) { return GetRootAsQuestCameraTable(_bb, new QuestCameraTable()); }
  public static QuestCameraTable GetRootAsQuestCameraTable(ByteBuffer _bb, QuestCameraTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestCameraTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.QuestCamera? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.QuestCamera?)(new GDT.QuestCamera()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.QuestCameraTable> CreateQuestCameraTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    QuestCameraTable.AddRows(builder, RowsOffset);
    return QuestCameraTable.EndQuestCameraTable(builder);
  }

  public static void StartQuestCameraTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.QuestCamera>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.QuestCamera>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.QuestCameraTable> EndQuestCameraTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestCameraTable>(o);
  }
  public QuestCameraTableT UnPack() {
    var _o = new QuestCameraTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestCameraTableT _o) {
    _o.Rows = new List<GDT.QuestCameraT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.QuestCameraTable> Pack(FlatBufferBuilder builder, QuestCameraTableT _o) {
    if (_o == null) return default(Offset<GDT.QuestCameraTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.QuestCamera>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.QuestCamera.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateQuestCameraTable(
      builder,
      _Rows);
  }
};

public class QuestCameraTableT
{
  public List<GDT.QuestCameraT> Rows { get; set; }

  public QuestCameraTableT() {
    this.Rows = null;
  }
}

/// Defined by QuestGroupInfo.xlsx
public struct QuestGroupInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestGroupInfo GetRootAsQuestGroupInfo(ByteBuffer _bb) { return GetRootAsQuestGroupInfo(_bb, new QuestGroupInfo()); }
  public static QuestGroupInfo GetRootAsQuestGroupInfo(ByteBuffer _bb, QuestGroupInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestGroupInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int QuestGroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string QuestGroupTitle { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestGroupTitleBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetQuestGroupTitleBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetQuestGroupTitleArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.QuestTabType QuestTabTypeEnum { get { int o = __p.__offset(8); return o != 0 ? (GDT.QuestTabType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestTabType.QT_None; } }

  public static Offset<GDT.QuestGroupInfo> CreateQuestGroupInfo(FlatBufferBuilder builder,
      int QuestGroupID = 0,
      StringOffset QuestGroupTitleOffset = default(StringOffset),
      GDT.QuestTabType QuestTabTypeEnum = GDT.QuestTabType.QT_None) {
    builder.StartTable(3);
    QuestGroupInfo.AddQuestGroupTitle(builder, QuestGroupTitleOffset);
    QuestGroupInfo.AddQuestGroupID(builder, QuestGroupID);
    QuestGroupInfo.AddQuestTabTypeEnum(builder, QuestTabTypeEnum);
    return QuestGroupInfo.EndQuestGroupInfo(builder);
  }

  public static void StartQuestGroupInfo(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddQuestGroupID(FlatBufferBuilder builder, int QuestGroupID) { builder.AddInt(0, QuestGroupID, 0); }
  public static void AddQuestGroupTitle(FlatBufferBuilder builder, StringOffset QuestGroupTitleOffset) { builder.AddOffset(1, QuestGroupTitleOffset.Value, 0); }
  public static void AddQuestTabTypeEnum(FlatBufferBuilder builder, GDT.QuestTabType QuestTabTypeEnum) { builder.AddByte(2, (byte)QuestTabTypeEnum, 0); }
  public static Offset<GDT.QuestGroupInfo> EndQuestGroupInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestGroupInfo>(o);
  }
  public QuestGroupInfoT UnPack() {
    var _o = new QuestGroupInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestGroupInfoT _o) {
    _o.QuestGroupID = this.QuestGroupID;
    _o.QuestGroupTitle = this.QuestGroupTitle;
    _o.QuestTabTypeEnum = this.QuestTabTypeEnum;
  }
  public static Offset<GDT.QuestGroupInfo> Pack(FlatBufferBuilder builder, QuestGroupInfoT _o) {
    if (_o == null) return default(Offset<GDT.QuestGroupInfo>);
    var _QuestGroupTitle = _o.QuestGroupTitle == null ? default(StringOffset) : builder.CreateString(_o.QuestGroupTitle);
    return CreateQuestGroupInfo(
      builder,
      _o.QuestGroupID,
      _QuestGroupTitle,
      _o.QuestTabTypeEnum);
  }
};

public class QuestGroupInfoT
{
  public int QuestGroupID { get; set; }
  public string QuestGroupTitle { get; set; }
  public GDT.QuestTabType QuestTabTypeEnum { get; set; }

  public QuestGroupInfoT() {
    this.QuestGroupID = 0;
    this.QuestGroupTitle = null;
    this.QuestTabTypeEnum = GDT.QuestTabType.QT_None;
  }
}

public struct QuestGroupInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestGroupInfoTable GetRootAsQuestGroupInfoTable(ByteBuffer _bb) { return GetRootAsQuestGroupInfoTable(_bb, new QuestGroupInfoTable()); }
  public static QuestGroupInfoTable GetRootAsQuestGroupInfoTable(ByteBuffer _bb, QuestGroupInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestGroupInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.QuestGroupInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.QuestGroupInfo?)(new GDT.QuestGroupInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.QuestGroupInfoTable> CreateQuestGroupInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    QuestGroupInfoTable.AddRows(builder, RowsOffset);
    return QuestGroupInfoTable.EndQuestGroupInfoTable(builder);
  }

  public static void StartQuestGroupInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.QuestGroupInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.QuestGroupInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.QuestGroupInfoTable> EndQuestGroupInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestGroupInfoTable>(o);
  }
  public QuestGroupInfoTableT UnPack() {
    var _o = new QuestGroupInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestGroupInfoTableT _o) {
    _o.Rows = new List<GDT.QuestGroupInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.QuestGroupInfoTable> Pack(FlatBufferBuilder builder, QuestGroupInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.QuestGroupInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.QuestGroupInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.QuestGroupInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateQuestGroupInfoTable(
      builder,
      _Rows);
  }
};

public class QuestGroupInfoTableT
{
  public List<GDT.QuestGroupInfoT> Rows { get; set; }

  public QuestGroupInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by QuestTabInfo.xlsx
public struct QuestTabInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestTabInfo GetRootAsQuestTabInfo(ByteBuffer _bb) { return GetRootAsQuestTabInfo(_bb, new QuestTabInfo()); }
  public static QuestTabInfo GetRootAsQuestTabInfo(ByteBuffer _bb, QuestTabInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestTabInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int QuestTabID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.QuestCategoryType QuestCategoryTypeEnum { get { int o = __p.__offset(6); return o != 0 ? (GDT.QuestCategoryType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestCategoryType.QC_None; } }
  public string QuestCategoryTxt { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestCategoryTxtBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetQuestCategoryTxtBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetQuestCategoryTxtArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.QuestTabType QuestTabTypeEnum { get { int o = __p.__offset(10); return o != 0 ? (GDT.QuestTabType)__p.bb.Get(o + __p.bb_pos) : GDT.QuestTabType.QT_None; } }
  public string QuestTabTxt { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetQuestTabTxtBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetQuestTabTxtBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetQuestTabTxtArray() { return __p.__vector_as_array<byte>(12); }
  public bool Show { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.QuestTabInfo> CreateQuestTabInfo(FlatBufferBuilder builder,
      int QuestTabID = 0,
      GDT.QuestCategoryType QuestCategoryTypeEnum = GDT.QuestCategoryType.QC_None,
      StringOffset QuestCategoryTxtOffset = default(StringOffset),
      GDT.QuestTabType QuestTabTypeEnum = GDT.QuestTabType.QT_None,
      StringOffset QuestTabTxtOffset = default(StringOffset),
      bool Show = false) {
    builder.StartTable(6);
    QuestTabInfo.AddQuestTabTxt(builder, QuestTabTxtOffset);
    QuestTabInfo.AddQuestCategoryTxt(builder, QuestCategoryTxtOffset);
    QuestTabInfo.AddQuestTabID(builder, QuestTabID);
    QuestTabInfo.AddShow(builder, Show);
    QuestTabInfo.AddQuestTabTypeEnum(builder, QuestTabTypeEnum);
    QuestTabInfo.AddQuestCategoryTypeEnum(builder, QuestCategoryTypeEnum);
    return QuestTabInfo.EndQuestTabInfo(builder);
  }

  public static void StartQuestTabInfo(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddQuestTabID(FlatBufferBuilder builder, int QuestTabID) { builder.AddInt(0, QuestTabID, 0); }
  public static void AddQuestCategoryTypeEnum(FlatBufferBuilder builder, GDT.QuestCategoryType QuestCategoryTypeEnum) { builder.AddByte(1, (byte)QuestCategoryTypeEnum, 0); }
  public static void AddQuestCategoryTxt(FlatBufferBuilder builder, StringOffset QuestCategoryTxtOffset) { builder.AddOffset(2, QuestCategoryTxtOffset.Value, 0); }
  public static void AddQuestTabTypeEnum(FlatBufferBuilder builder, GDT.QuestTabType QuestTabTypeEnum) { builder.AddByte(3, (byte)QuestTabTypeEnum, 0); }
  public static void AddQuestTabTxt(FlatBufferBuilder builder, StringOffset QuestTabTxtOffset) { builder.AddOffset(4, QuestTabTxtOffset.Value, 0); }
  public static void AddShow(FlatBufferBuilder builder, bool Show) { builder.AddBool(5, Show, false); }
  public static Offset<GDT.QuestTabInfo> EndQuestTabInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestTabInfo>(o);
  }
  public QuestTabInfoT UnPack() {
    var _o = new QuestTabInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestTabInfoT _o) {
    _o.QuestTabID = this.QuestTabID;
    _o.QuestCategoryTypeEnum = this.QuestCategoryTypeEnum;
    _o.QuestCategoryTxt = this.QuestCategoryTxt;
    _o.QuestTabTypeEnum = this.QuestTabTypeEnum;
    _o.QuestTabTxt = this.QuestTabTxt;
    _o.Show = this.Show;
  }
  public static Offset<GDT.QuestTabInfo> Pack(FlatBufferBuilder builder, QuestTabInfoT _o) {
    if (_o == null) return default(Offset<GDT.QuestTabInfo>);
    var _QuestCategoryTxt = _o.QuestCategoryTxt == null ? default(StringOffset) : builder.CreateString(_o.QuestCategoryTxt);
    var _QuestTabTxt = _o.QuestTabTxt == null ? default(StringOffset) : builder.CreateString(_o.QuestTabTxt);
    return CreateQuestTabInfo(
      builder,
      _o.QuestTabID,
      _o.QuestCategoryTypeEnum,
      _QuestCategoryTxt,
      _o.QuestTabTypeEnum,
      _QuestTabTxt,
      _o.Show);
  }
};

public class QuestTabInfoT
{
  public int QuestTabID { get; set; }
  public GDT.QuestCategoryType QuestCategoryTypeEnum { get; set; }
  public string QuestCategoryTxt { get; set; }
  public GDT.QuestTabType QuestTabTypeEnum { get; set; }
  public string QuestTabTxt { get; set; }
  public bool Show { get; set; }

  public QuestTabInfoT() {
    this.QuestTabID = 0;
    this.QuestCategoryTypeEnum = GDT.QuestCategoryType.QC_None;
    this.QuestCategoryTxt = null;
    this.QuestTabTypeEnum = GDT.QuestTabType.QT_None;
    this.QuestTabTxt = null;
    this.Show = false;
  }
}

public struct QuestTabInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QuestTabInfoTable GetRootAsQuestTabInfoTable(ByteBuffer _bb) { return GetRootAsQuestTabInfoTable(_bb, new QuestTabInfoTable()); }
  public static QuestTabInfoTable GetRootAsQuestTabInfoTable(ByteBuffer _bb, QuestTabInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QuestTabInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.QuestTabInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.QuestTabInfo?)(new GDT.QuestTabInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.QuestTabInfoTable> CreateQuestTabInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    QuestTabInfoTable.AddRows(builder, RowsOffset);
    return QuestTabInfoTable.EndQuestTabInfoTable(builder);
  }

  public static void StartQuestTabInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.QuestTabInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.QuestTabInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.QuestTabInfoTable> EndQuestTabInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QuestTabInfoTable>(o);
  }
  public QuestTabInfoTableT UnPack() {
    var _o = new QuestTabInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QuestTabInfoTableT _o) {
    _o.Rows = new List<GDT.QuestTabInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.QuestTabInfoTable> Pack(FlatBufferBuilder builder, QuestTabInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.QuestTabInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.QuestTabInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.QuestTabInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateQuestTabInfoTable(
      builder,
      _Rows);
  }
};

public class QuestTabInfoTableT
{
  public List<GDT.QuestTabInfoT> Rows { get; set; }

  public QuestTabInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by RedDot.xlsx
public struct RedDotPosition : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RedDotPosition GetRootAsRedDotPosition(ByteBuffer _bb) { return GetRootAsRedDotPosition(_bb, new RedDotPosition()); }
  public static RedDotPosition GetRootAsRedDotPosition(ByteBuffer _bb, RedDotPosition obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RedDotPosition __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ReddotMainType ReddotMainTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.ReddotMainType)__p.bb.Get(o + __p.bb_pos) : GDT.ReddotMainType.RMT_None; } }
  public GDT.ReddotSubType ReddotSubID { get { int o = __p.__offset(6); return o != 0 ? (GDT.ReddotSubType)__p.bb.Get(o + __p.bb_pos) : GDT.ReddotSubType.RST_None; } }
  public GDT.ReddotIconType ReddotIconTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.ReddotIconType)__p.bb.Get(o + __p.bb_pos) : GDT.ReddotIconType.RIT_None; } }

  public static Offset<GDT.RedDotPosition> CreateRedDotPosition(FlatBufferBuilder builder,
      GDT.ReddotMainType ReddotMainTypeID = GDT.ReddotMainType.RMT_None,
      GDT.ReddotSubType ReddotSubID = GDT.ReddotSubType.RST_None,
      GDT.ReddotIconType ReddotIconTypeID = GDT.ReddotIconType.RIT_None) {
    builder.StartTable(3);
    RedDotPosition.AddReddotIconTypeID(builder, ReddotIconTypeID);
    RedDotPosition.AddReddotSubID(builder, ReddotSubID);
    RedDotPosition.AddReddotMainTypeID(builder, ReddotMainTypeID);
    return RedDotPosition.EndRedDotPosition(builder);
  }

  public static void StartRedDotPosition(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddReddotMainTypeID(FlatBufferBuilder builder, GDT.ReddotMainType ReddotMainTypeID) { builder.AddByte(0, (byte)ReddotMainTypeID, 0); }
  public static void AddReddotSubID(FlatBufferBuilder builder, GDT.ReddotSubType ReddotSubID) { builder.AddByte(1, (byte)ReddotSubID, 0); }
  public static void AddReddotIconTypeID(FlatBufferBuilder builder, GDT.ReddotIconType ReddotIconTypeID) { builder.AddByte(2, (byte)ReddotIconTypeID, 0); }
  public static Offset<GDT.RedDotPosition> EndRedDotPosition(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.RedDotPosition>(o);
  }
  public RedDotPositionT UnPack() {
    var _o = new RedDotPositionT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RedDotPositionT _o) {
    _o.ReddotMainTypeID = this.ReddotMainTypeID;
    _o.ReddotSubID = this.ReddotSubID;
    _o.ReddotIconTypeID = this.ReddotIconTypeID;
  }
  public static Offset<GDT.RedDotPosition> Pack(FlatBufferBuilder builder, RedDotPositionT _o) {
    if (_o == null) return default(Offset<GDT.RedDotPosition>);
    return CreateRedDotPosition(
      builder,
      _o.ReddotMainTypeID,
      _o.ReddotSubID,
      _o.ReddotIconTypeID);
  }
};

public class RedDotPositionT
{
  public GDT.ReddotMainType ReddotMainTypeID { get; set; }
  public GDT.ReddotSubType ReddotSubID { get; set; }
  public GDT.ReddotIconType ReddotIconTypeID { get; set; }

  public RedDotPositionT() {
    this.ReddotMainTypeID = GDT.ReddotMainType.RMT_None;
    this.ReddotSubID = GDT.ReddotSubType.RST_None;
    this.ReddotIconTypeID = GDT.ReddotIconType.RIT_None;
  }
}

public struct RedDotPositionTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RedDotPositionTable GetRootAsRedDotPositionTable(ByteBuffer _bb) { return GetRootAsRedDotPositionTable(_bb, new RedDotPositionTable()); }
  public static RedDotPositionTable GetRootAsRedDotPositionTable(ByteBuffer _bb, RedDotPositionTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RedDotPositionTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.RedDotPosition? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.RedDotPosition?)(new GDT.RedDotPosition()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.RedDotPositionTable> CreateRedDotPositionTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RedDotPositionTable.AddRows(builder, RowsOffset);
    return RedDotPositionTable.EndRedDotPositionTable(builder);
  }

  public static void StartRedDotPositionTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.RedDotPosition>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.RedDotPosition>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.RedDotPositionTable> EndRedDotPositionTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.RedDotPositionTable>(o);
  }
  public RedDotPositionTableT UnPack() {
    var _o = new RedDotPositionTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RedDotPositionTableT _o) {
    _o.Rows = new List<GDT.RedDotPositionT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.RedDotPositionTable> Pack(FlatBufferBuilder builder, RedDotPositionTableT _o) {
    if (_o == null) return default(Offset<GDT.RedDotPositionTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.RedDotPosition>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.RedDotPosition.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateRedDotPositionTable(
      builder,
      _Rows);
  }
};

public class RedDotPositionTableT
{
  public List<GDT.RedDotPositionT> Rows { get; set; }

  public RedDotPositionTableT() {
    this.Rows = null;
  }
}

/// Defined by Reward.xlsx
public struct RewardData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RewardData GetRootAsRewardData(ByteBuffer _bb) { return GetRootAsRewardData(_bb, new RewardData()); }
  public static RewardData GetRootAsRewardData(ByteBuffer _bb, RewardData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RewardData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int GroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType CurrencyMainTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public int CurrencySubTypeID { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.RewardType RewardType { get { int o = __p.__offset(10); return o != 0 ? (GDT.RewardType)__p.bb.Get(o + __p.bb_pos) : GDT.RewardType.RT_None; } }
  public int MinCount { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxCount { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ApplicationType ApplicationTypeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.ApplicationType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplicationType.AT_Account; } }
  public GDT.TierType TierTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.TierType)__p.bb.Get(o + __p.bb_pos) : GDT.TierType.TT_None; } }
  public int TierProbability01 { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability02 { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability03 { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability04 { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability05 { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability06 { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability07 { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability08 { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability09 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TierProbability10 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.RewardData> CreateRewardData(FlatBufferBuilder builder,
      int GroupID = 0,
      GDT.CurrencyMainType CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      int CurrencySubTypeID = 0,
      GDT.RewardType RewardType = GDT.RewardType.RT_None,
      int MinCount = 0,
      int MaxCount = 0,
      GDT.ApplicationType ApplicationTypeID = GDT.ApplicationType.AT_Account,
      GDT.TierType TierTypeID = GDT.TierType.TT_None,
      int TierProbability01 = 0,
      int TierProbability02 = 0,
      int TierProbability03 = 0,
      int TierProbability04 = 0,
      int TierProbability05 = 0,
      int TierProbability06 = 0,
      int TierProbability07 = 0,
      int TierProbability08 = 0,
      int TierProbability09 = 0,
      int TierProbability10 = 0) {
    builder.StartTable(18);
    RewardData.AddTierProbability10(builder, TierProbability10);
    RewardData.AddTierProbability09(builder, TierProbability09);
    RewardData.AddTierProbability08(builder, TierProbability08);
    RewardData.AddTierProbability07(builder, TierProbability07);
    RewardData.AddTierProbability06(builder, TierProbability06);
    RewardData.AddTierProbability05(builder, TierProbability05);
    RewardData.AddTierProbability04(builder, TierProbability04);
    RewardData.AddTierProbability03(builder, TierProbability03);
    RewardData.AddTierProbability02(builder, TierProbability02);
    RewardData.AddTierProbability01(builder, TierProbability01);
    RewardData.AddMaxCount(builder, MaxCount);
    RewardData.AddMinCount(builder, MinCount);
    RewardData.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    RewardData.AddGroupID(builder, GroupID);
    RewardData.AddTierTypeID(builder, TierTypeID);
    RewardData.AddApplicationTypeID(builder, ApplicationTypeID);
    RewardData.AddRewardType(builder, RewardType);
    RewardData.AddCurrencyMainTypeID(builder, CurrencyMainTypeID);
    return RewardData.EndRewardData(builder);
  }

  public static void StartRewardData(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddGroupID(FlatBufferBuilder builder, int GroupID) { builder.AddInt(0, GroupID, 0); }
  public static void AddCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType CurrencyMainTypeID) { builder.AddByte(1, (byte)CurrencyMainTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, int CurrencySubTypeID) { builder.AddInt(2, CurrencySubTypeID, 0); }
  public static void AddRewardType(FlatBufferBuilder builder, GDT.RewardType RewardType) { builder.AddByte(3, (byte)RewardType, 0); }
  public static void AddMinCount(FlatBufferBuilder builder, int MinCount) { builder.AddInt(4, MinCount, 0); }
  public static void AddMaxCount(FlatBufferBuilder builder, int MaxCount) { builder.AddInt(5, MaxCount, 0); }
  public static void AddApplicationTypeID(FlatBufferBuilder builder, GDT.ApplicationType ApplicationTypeID) { builder.AddByte(6, (byte)ApplicationTypeID, 0); }
  public static void AddTierTypeID(FlatBufferBuilder builder, GDT.TierType TierTypeID) { builder.AddByte(7, (byte)TierTypeID, 0); }
  public static void AddTierProbability01(FlatBufferBuilder builder, int TierProbability01) { builder.AddInt(8, TierProbability01, 0); }
  public static void AddTierProbability02(FlatBufferBuilder builder, int TierProbability02) { builder.AddInt(9, TierProbability02, 0); }
  public static void AddTierProbability03(FlatBufferBuilder builder, int TierProbability03) { builder.AddInt(10, TierProbability03, 0); }
  public static void AddTierProbability04(FlatBufferBuilder builder, int TierProbability04) { builder.AddInt(11, TierProbability04, 0); }
  public static void AddTierProbability05(FlatBufferBuilder builder, int TierProbability05) { builder.AddInt(12, TierProbability05, 0); }
  public static void AddTierProbability06(FlatBufferBuilder builder, int TierProbability06) { builder.AddInt(13, TierProbability06, 0); }
  public static void AddTierProbability07(FlatBufferBuilder builder, int TierProbability07) { builder.AddInt(14, TierProbability07, 0); }
  public static void AddTierProbability08(FlatBufferBuilder builder, int TierProbability08) { builder.AddInt(15, TierProbability08, 0); }
  public static void AddTierProbability09(FlatBufferBuilder builder, int TierProbability09) { builder.AddInt(16, TierProbability09, 0); }
  public static void AddTierProbability10(FlatBufferBuilder builder, int TierProbability10) { builder.AddInt(17, TierProbability10, 0); }
  public static Offset<GDT.RewardData> EndRewardData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.RewardData>(o);
  }
  public RewardDataT UnPack() {
    var _o = new RewardDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RewardDataT _o) {
    _o.GroupID = this.GroupID;
    _o.CurrencyMainTypeID = this.CurrencyMainTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.RewardType = this.RewardType;
    _o.MinCount = this.MinCount;
    _o.MaxCount = this.MaxCount;
    _o.ApplicationTypeID = this.ApplicationTypeID;
    _o.TierTypeID = this.TierTypeID;
    _o.TierProbability01 = this.TierProbability01;
    _o.TierProbability02 = this.TierProbability02;
    _o.TierProbability03 = this.TierProbability03;
    _o.TierProbability04 = this.TierProbability04;
    _o.TierProbability05 = this.TierProbability05;
    _o.TierProbability06 = this.TierProbability06;
    _o.TierProbability07 = this.TierProbability07;
    _o.TierProbability08 = this.TierProbability08;
    _o.TierProbability09 = this.TierProbability09;
    _o.TierProbability10 = this.TierProbability10;
  }
  public static Offset<GDT.RewardData> Pack(FlatBufferBuilder builder, RewardDataT _o) {
    if (_o == null) return default(Offset<GDT.RewardData>);
    return CreateRewardData(
      builder,
      _o.GroupID,
      _o.CurrencyMainTypeID,
      _o.CurrencySubTypeID,
      _o.RewardType,
      _o.MinCount,
      _o.MaxCount,
      _o.ApplicationTypeID,
      _o.TierTypeID,
      _o.TierProbability01,
      _o.TierProbability02,
      _o.TierProbability03,
      _o.TierProbability04,
      _o.TierProbability05,
      _o.TierProbability06,
      _o.TierProbability07,
      _o.TierProbability08,
      _o.TierProbability09,
      _o.TierProbability10);
  }
};

public class RewardDataT
{
  public int GroupID { get; set; }
  public GDT.CurrencyMainType CurrencyMainTypeID { get; set; }
  public int CurrencySubTypeID { get; set; }
  public GDT.RewardType RewardType { get; set; }
  public int MinCount { get; set; }
  public int MaxCount { get; set; }
  public GDT.ApplicationType ApplicationTypeID { get; set; }
  public GDT.TierType TierTypeID { get; set; }
  public int TierProbability01 { get; set; }
  public int TierProbability02 { get; set; }
  public int TierProbability03 { get; set; }
  public int TierProbability04 { get; set; }
  public int TierProbability05 { get; set; }
  public int TierProbability06 { get; set; }
  public int TierProbability07 { get; set; }
  public int TierProbability08 { get; set; }
  public int TierProbability09 { get; set; }
  public int TierProbability10 { get; set; }

  public RewardDataT() {
    this.GroupID = 0;
    this.CurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.CurrencySubTypeID = 0;
    this.RewardType = GDT.RewardType.RT_None;
    this.MinCount = 0;
    this.MaxCount = 0;
    this.ApplicationTypeID = GDT.ApplicationType.AT_Account;
    this.TierTypeID = GDT.TierType.TT_None;
    this.TierProbability01 = 0;
    this.TierProbability02 = 0;
    this.TierProbability03 = 0;
    this.TierProbability04 = 0;
    this.TierProbability05 = 0;
    this.TierProbability06 = 0;
    this.TierProbability07 = 0;
    this.TierProbability08 = 0;
    this.TierProbability09 = 0;
    this.TierProbability10 = 0;
  }
}

public struct RewardDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static RewardDataTable GetRootAsRewardDataTable(ByteBuffer _bb) { return GetRootAsRewardDataTable(_bb, new RewardDataTable()); }
  public static RewardDataTable GetRootAsRewardDataTable(ByteBuffer _bb, RewardDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RewardDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.RewardData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.RewardData?)(new GDT.RewardData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.RewardDataTable> CreateRewardDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    RewardDataTable.AddRows(builder, RowsOffset);
    return RewardDataTable.EndRewardDataTable(builder);
  }

  public static void StartRewardDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.RewardData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.RewardData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.RewardDataTable> EndRewardDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.RewardDataTable>(o);
  }
  public RewardDataTableT UnPack() {
    var _o = new RewardDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(RewardDataTableT _o) {
    _o.Rows = new List<GDT.RewardDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.RewardDataTable> Pack(FlatBufferBuilder builder, RewardDataTableT _o) {
    if (_o == null) return default(Offset<GDT.RewardDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.RewardData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.RewardData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateRewardDataTable(
      builder,
      _Rows);
  }
};

public class RewardDataTableT
{
  public List<GDT.RewardDataT> Rows { get; set; }

  public RewardDataTableT() {
    this.Rows = null;
  }
}

/// Defined by ScenarioDialogueInfo.xlsx
public struct ScenarioDialog : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ScenarioDialog GetRootAsScenarioDialog(ByteBuffer _bb) { return GetRootAsScenarioDialog(_bb, new ScenarioDialog()); }
  public static ScenarioDialog GetRootAsScenarioDialog(ByteBuffer _bb, ScenarioDialog obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioDialog __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ScenarioScriptID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScriptreSource { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScriptreSourceBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetScriptreSourceBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetScriptreSourceArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.ScriptType ScriptType { get { int o = __p.__offset(8); return o != 0 ? (GDT.ScriptType)__p.bb.Get(o + __p.bb_pos) : GDT.ScriptType.ST_None; } }

  public static Offset<GDT.ScenarioDialog> CreateScenarioDialog(FlatBufferBuilder builder,
      int ScenarioScriptID = 0,
      StringOffset ScriptreSourceOffset = default(StringOffset),
      GDT.ScriptType ScriptType = GDT.ScriptType.ST_None) {
    builder.StartTable(3);
    ScenarioDialog.AddScriptreSource(builder, ScriptreSourceOffset);
    ScenarioDialog.AddScenarioScriptID(builder, ScenarioScriptID);
    ScenarioDialog.AddScriptType(builder, ScriptType);
    return ScenarioDialog.EndScenarioDialog(builder);
  }

  public static void StartScenarioDialog(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddScenarioScriptID(FlatBufferBuilder builder, int ScenarioScriptID) { builder.AddInt(0, ScenarioScriptID, 0); }
  public static void AddScriptreSource(FlatBufferBuilder builder, StringOffset ScriptreSourceOffset) { builder.AddOffset(1, ScriptreSourceOffset.Value, 0); }
  public static void AddScriptType(FlatBufferBuilder builder, GDT.ScriptType ScriptType) { builder.AddByte(2, (byte)ScriptType, 0); }
  public static Offset<GDT.ScenarioDialog> EndScenarioDialog(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ScenarioDialog>(o);
  }
  public ScenarioDialogT UnPack() {
    var _o = new ScenarioDialogT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioDialogT _o) {
    _o.ScenarioScriptID = this.ScenarioScriptID;
    _o.ScriptreSource = this.ScriptreSource;
    _o.ScriptType = this.ScriptType;
  }
  public static Offset<GDT.ScenarioDialog> Pack(FlatBufferBuilder builder, ScenarioDialogT _o) {
    if (_o == null) return default(Offset<GDT.ScenarioDialog>);
    var _ScriptreSource = _o.ScriptreSource == null ? default(StringOffset) : builder.CreateString(_o.ScriptreSource);
    return CreateScenarioDialog(
      builder,
      _o.ScenarioScriptID,
      _ScriptreSource,
      _o.ScriptType);
  }
};

public class ScenarioDialogT
{
  public int ScenarioScriptID { get; set; }
  public string ScriptreSource { get; set; }
  public GDT.ScriptType ScriptType { get; set; }

  public ScenarioDialogT() {
    this.ScenarioScriptID = 0;
    this.ScriptreSource = null;
    this.ScriptType = GDT.ScriptType.ST_None;
  }
}

public struct ScenarioDialogTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ScenarioDialogTable GetRootAsScenarioDialogTable(ByteBuffer _bb) { return GetRootAsScenarioDialogTable(_bb, new ScenarioDialogTable()); }
  public static ScenarioDialogTable GetRootAsScenarioDialogTable(ByteBuffer _bb, ScenarioDialogTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioDialogTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ScenarioDialog? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ScenarioDialog?)(new GDT.ScenarioDialog()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ScenarioDialogTable> CreateScenarioDialogTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ScenarioDialogTable.AddRows(builder, RowsOffset);
    return ScenarioDialogTable.EndScenarioDialogTable(builder);
  }

  public static void StartScenarioDialogTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ScenarioDialog>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ScenarioDialog>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ScenarioDialogTable> EndScenarioDialogTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ScenarioDialogTable>(o);
  }
  public ScenarioDialogTableT UnPack() {
    var _o = new ScenarioDialogTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioDialogTableT _o) {
    _o.Rows = new List<GDT.ScenarioDialogT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ScenarioDialogTable> Pack(FlatBufferBuilder builder, ScenarioDialogTableT _o) {
    if (_o == null) return default(Offset<GDT.ScenarioDialogTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ScenarioDialog>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ScenarioDialog.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateScenarioDialogTable(
      builder,
      _Rows);
  }
};

public class ScenarioDialogTableT
{
  public List<GDT.ScenarioDialogT> Rows { get; set; }

  public ScenarioDialogTableT() {
    this.Rows = null;
  }
}

/// Defined by ScenarioScene.xlsx
public struct ScenarioScene : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ScenarioScene GetRootAsScenarioScene(ByteBuffer _bb) { return GetRootAsScenarioScene(_bb, new ScenarioScene()); }
  public static ScenarioScene GetRootAsScenarioScene(ByteBuffer _bb, ScenarioScene obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioScene __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int QuestScriptID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScriptStep { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScriptNextStep { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SceneTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ScriptSkip { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.ScriptCharacterType ScriptCharacterTypeEnum { get { int o = __p.__offset(14); return o != 0 ? (GDT.ScriptCharacterType)__p.bb.Get(o + __p.bb_pos) : GDT.ScriptCharacterType.None; } }
  public GDT.ScriptType ScriptType { get { int o = __p.__offset(16); return o != 0 ? (GDT.ScriptType)__p.bb.Get(o + __p.bb_pos) : GDT.ScriptType.ST_None; } }
  public bool ScriptTypeShow { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int CharacterInfoID { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CharacterCountenanceID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string ScripTxt1 { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScripTxt1Bytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetScripTxt1Bytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetScripTxt1Array() { return __p.__vector_as_array<byte>(24); }
  public string ScripTxt2 { get { int o = __p.__offset(26); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScripTxt2Bytes() { return __p.__vector_as_span<byte>(26, 1); }
#else
  public ArraySegment<byte>? GetScripTxt2Bytes() { return __p.__vector_as_arraysegment(26); }
#endif
  public byte[] GetScripTxt2Array() { return __p.__vector_as_array<byte>(26); }
  public int SceneBGM { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ScenarioDirectingType ScenarioDirectingType { get { int o = __p.__offset(30); return o != 0 ? (GDT.ScenarioDirectingType)__p.bb.Get(o + __p.bb_pos) : GDT.ScenarioDirectingType.None; } }
  public string ScenarioDirectingValue01 { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenarioDirectingValue01Bytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetScenarioDirectingValue01Bytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetScenarioDirectingValue01Array() { return __p.__vector_as_array<byte>(32); }
  public string ScenarioDirectingValue02 { get { int o = __p.__offset(34); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScenarioDirectingValue02Bytes() { return __p.__vector_as_span<byte>(34, 1); }
#else
  public ArraySegment<byte>? GetScenarioDirectingValue02Bytes() { return __p.__vector_as_arraysegment(34); }
#endif
  public byte[] GetScenarioDirectingValue02Array() { return __p.__vector_as_array<byte>(34); }
  public int ScenarioDirectingValue03 { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ScenarioDirectingValue04 { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.ScenarioScene> CreateScenarioScene(FlatBufferBuilder builder,
      int QuestScriptID = 0,
      int ScriptStep = 0,
      int ScriptNextStep = 0,
      int SceneTime = 0,
      bool ScriptSkip = false,
      GDT.ScriptCharacterType ScriptCharacterTypeEnum = GDT.ScriptCharacterType.None,
      GDT.ScriptType ScriptType = GDT.ScriptType.ST_None,
      bool ScriptTypeShow = false,
      int CharacterInfoID = 0,
      int CharacterCountenanceID = 0,
      StringOffset ScripTxt1Offset = default(StringOffset),
      StringOffset ScripTxt2Offset = default(StringOffset),
      int SceneBGM = 0,
      GDT.ScenarioDirectingType ScenarioDirectingType = GDT.ScenarioDirectingType.None,
      StringOffset ScenarioDirectingValue01Offset = default(StringOffset),
      StringOffset ScenarioDirectingValue02Offset = default(StringOffset),
      int ScenarioDirectingValue03 = 0,
      int ScenarioDirectingValue04 = 0) {
    builder.StartTable(18);
    ScenarioScene.AddScenarioDirectingValue04(builder, ScenarioDirectingValue04);
    ScenarioScene.AddScenarioDirectingValue03(builder, ScenarioDirectingValue03);
    ScenarioScene.AddScenarioDirectingValue02(builder, ScenarioDirectingValue02Offset);
    ScenarioScene.AddScenarioDirectingValue01(builder, ScenarioDirectingValue01Offset);
    ScenarioScene.AddSceneBGM(builder, SceneBGM);
    ScenarioScene.AddScripTxt2(builder, ScripTxt2Offset);
    ScenarioScene.AddScripTxt1(builder, ScripTxt1Offset);
    ScenarioScene.AddCharacterCountenanceID(builder, CharacterCountenanceID);
    ScenarioScene.AddCharacterInfoID(builder, CharacterInfoID);
    ScenarioScene.AddSceneTime(builder, SceneTime);
    ScenarioScene.AddScriptNextStep(builder, ScriptNextStep);
    ScenarioScene.AddScriptStep(builder, ScriptStep);
    ScenarioScene.AddQuestScriptID(builder, QuestScriptID);
    ScenarioScene.AddScenarioDirectingType(builder, ScenarioDirectingType);
    ScenarioScene.AddScriptTypeShow(builder, ScriptTypeShow);
    ScenarioScene.AddScriptType(builder, ScriptType);
    ScenarioScene.AddScriptCharacterTypeEnum(builder, ScriptCharacterTypeEnum);
    ScenarioScene.AddScriptSkip(builder, ScriptSkip);
    return ScenarioScene.EndScenarioScene(builder);
  }

  public static void StartScenarioScene(FlatBufferBuilder builder) { builder.StartTable(18); }
  public static void AddQuestScriptID(FlatBufferBuilder builder, int QuestScriptID) { builder.AddInt(0, QuestScriptID, 0); }
  public static void AddScriptStep(FlatBufferBuilder builder, int ScriptStep) { builder.AddInt(1, ScriptStep, 0); }
  public static void AddScriptNextStep(FlatBufferBuilder builder, int ScriptNextStep) { builder.AddInt(2, ScriptNextStep, 0); }
  public static void AddSceneTime(FlatBufferBuilder builder, int SceneTime) { builder.AddInt(3, SceneTime, 0); }
  public static void AddScriptSkip(FlatBufferBuilder builder, bool ScriptSkip) { builder.AddBool(4, ScriptSkip, false); }
  public static void AddScriptCharacterTypeEnum(FlatBufferBuilder builder, GDT.ScriptCharacterType ScriptCharacterTypeEnum) { builder.AddByte(5, (byte)ScriptCharacterTypeEnum, 0); }
  public static void AddScriptType(FlatBufferBuilder builder, GDT.ScriptType ScriptType) { builder.AddByte(6, (byte)ScriptType, 0); }
  public static void AddScriptTypeShow(FlatBufferBuilder builder, bool ScriptTypeShow) { builder.AddBool(7, ScriptTypeShow, false); }
  public static void AddCharacterInfoID(FlatBufferBuilder builder, int CharacterInfoID) { builder.AddInt(8, CharacterInfoID, 0); }
  public static void AddCharacterCountenanceID(FlatBufferBuilder builder, int CharacterCountenanceID) { builder.AddInt(9, CharacterCountenanceID, 0); }
  public static void AddScripTxt1(FlatBufferBuilder builder, StringOffset ScripTxt1Offset) { builder.AddOffset(10, ScripTxt1Offset.Value, 0); }
  public static void AddScripTxt2(FlatBufferBuilder builder, StringOffset ScripTxt2Offset) { builder.AddOffset(11, ScripTxt2Offset.Value, 0); }
  public static void AddSceneBGM(FlatBufferBuilder builder, int SceneBGM) { builder.AddInt(12, SceneBGM, 0); }
  public static void AddScenarioDirectingType(FlatBufferBuilder builder, GDT.ScenarioDirectingType ScenarioDirectingType) { builder.AddByte(13, (byte)ScenarioDirectingType, 0); }
  public static void AddScenarioDirectingValue01(FlatBufferBuilder builder, StringOffset ScenarioDirectingValue01Offset) { builder.AddOffset(14, ScenarioDirectingValue01Offset.Value, 0); }
  public static void AddScenarioDirectingValue02(FlatBufferBuilder builder, StringOffset ScenarioDirectingValue02Offset) { builder.AddOffset(15, ScenarioDirectingValue02Offset.Value, 0); }
  public static void AddScenarioDirectingValue03(FlatBufferBuilder builder, int ScenarioDirectingValue03) { builder.AddInt(16, ScenarioDirectingValue03, 0); }
  public static void AddScenarioDirectingValue04(FlatBufferBuilder builder, int ScenarioDirectingValue04) { builder.AddInt(17, ScenarioDirectingValue04, 0); }
  public static Offset<GDT.ScenarioScene> EndScenarioScene(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ScenarioScene>(o);
  }
  public ScenarioSceneT UnPack() {
    var _o = new ScenarioSceneT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioSceneT _o) {
    _o.QuestScriptID = this.QuestScriptID;
    _o.ScriptStep = this.ScriptStep;
    _o.ScriptNextStep = this.ScriptNextStep;
    _o.SceneTime = this.SceneTime;
    _o.ScriptSkip = this.ScriptSkip;
    _o.ScriptCharacterTypeEnum = this.ScriptCharacterTypeEnum;
    _o.ScriptType = this.ScriptType;
    _o.ScriptTypeShow = this.ScriptTypeShow;
    _o.CharacterInfoID = this.CharacterInfoID;
    _o.CharacterCountenanceID = this.CharacterCountenanceID;
    _o.ScripTxt1 = this.ScripTxt1;
    _o.ScripTxt2 = this.ScripTxt2;
    _o.SceneBGM = this.SceneBGM;
    _o.ScenarioDirectingType = this.ScenarioDirectingType;
    _o.ScenarioDirectingValue01 = this.ScenarioDirectingValue01;
    _o.ScenarioDirectingValue02 = this.ScenarioDirectingValue02;
    _o.ScenarioDirectingValue03 = this.ScenarioDirectingValue03;
    _o.ScenarioDirectingValue04 = this.ScenarioDirectingValue04;
  }
  public static Offset<GDT.ScenarioScene> Pack(FlatBufferBuilder builder, ScenarioSceneT _o) {
    if (_o == null) return default(Offset<GDT.ScenarioScene>);
    var _ScripTxt1 = _o.ScripTxt1 == null ? default(StringOffset) : builder.CreateString(_o.ScripTxt1);
    var _ScripTxt2 = _o.ScripTxt2 == null ? default(StringOffset) : builder.CreateString(_o.ScripTxt2);
    var _ScenarioDirectingValue01 = _o.ScenarioDirectingValue01 == null ? default(StringOffset) : builder.CreateString(_o.ScenarioDirectingValue01);
    var _ScenarioDirectingValue02 = _o.ScenarioDirectingValue02 == null ? default(StringOffset) : builder.CreateString(_o.ScenarioDirectingValue02);
    return CreateScenarioScene(
      builder,
      _o.QuestScriptID,
      _o.ScriptStep,
      _o.ScriptNextStep,
      _o.SceneTime,
      _o.ScriptSkip,
      _o.ScriptCharacterTypeEnum,
      _o.ScriptType,
      _o.ScriptTypeShow,
      _o.CharacterInfoID,
      _o.CharacterCountenanceID,
      _ScripTxt1,
      _ScripTxt2,
      _o.SceneBGM,
      _o.ScenarioDirectingType,
      _ScenarioDirectingValue01,
      _ScenarioDirectingValue02,
      _o.ScenarioDirectingValue03,
      _o.ScenarioDirectingValue04);
  }
};

public class ScenarioSceneT
{
  public int QuestScriptID { get; set; }
  public int ScriptStep { get; set; }
  public int ScriptNextStep { get; set; }
  public int SceneTime { get; set; }
  public bool ScriptSkip { get; set; }
  public GDT.ScriptCharacterType ScriptCharacterTypeEnum { get; set; }
  public GDT.ScriptType ScriptType { get; set; }
  public bool ScriptTypeShow { get; set; }
  public int CharacterInfoID { get; set; }
  public int CharacterCountenanceID { get; set; }
  public string ScripTxt1 { get; set; }
  public string ScripTxt2 { get; set; }
  public int SceneBGM { get; set; }
  public GDT.ScenarioDirectingType ScenarioDirectingType { get; set; }
  public string ScenarioDirectingValue01 { get; set; }
  public string ScenarioDirectingValue02 { get; set; }
  public int ScenarioDirectingValue03 { get; set; }
  public int ScenarioDirectingValue04 { get; set; }

  public ScenarioSceneT() {
    this.QuestScriptID = 0;
    this.ScriptStep = 0;
    this.ScriptNextStep = 0;
    this.SceneTime = 0;
    this.ScriptSkip = false;
    this.ScriptCharacterTypeEnum = GDT.ScriptCharacterType.None;
    this.ScriptType = GDT.ScriptType.ST_None;
    this.ScriptTypeShow = false;
    this.CharacterInfoID = 0;
    this.CharacterCountenanceID = 0;
    this.ScripTxt1 = null;
    this.ScripTxt2 = null;
    this.SceneBGM = 0;
    this.ScenarioDirectingType = GDT.ScenarioDirectingType.None;
    this.ScenarioDirectingValue01 = null;
    this.ScenarioDirectingValue02 = null;
    this.ScenarioDirectingValue03 = 0;
    this.ScenarioDirectingValue04 = 0;
  }
}

public struct ScenarioSceneTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ScenarioSceneTable GetRootAsScenarioSceneTable(ByteBuffer _bb) { return GetRootAsScenarioSceneTable(_bb, new ScenarioSceneTable()); }
  public static ScenarioSceneTable GetRootAsScenarioSceneTable(ByteBuffer _bb, ScenarioSceneTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ScenarioSceneTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ScenarioScene? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ScenarioScene?)(new GDT.ScenarioScene()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ScenarioSceneTable> CreateScenarioSceneTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ScenarioSceneTable.AddRows(builder, RowsOffset);
    return ScenarioSceneTable.EndScenarioSceneTable(builder);
  }

  public static void StartScenarioSceneTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ScenarioScene>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ScenarioScene>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ScenarioSceneTable> EndScenarioSceneTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ScenarioSceneTable>(o);
  }
  public ScenarioSceneTableT UnPack() {
    var _o = new ScenarioSceneTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ScenarioSceneTableT _o) {
    _o.Rows = new List<GDT.ScenarioSceneT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ScenarioSceneTable> Pack(FlatBufferBuilder builder, ScenarioSceneTableT _o) {
    if (_o == null) return default(Offset<GDT.ScenarioSceneTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ScenarioScene>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ScenarioScene.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateScenarioSceneTable(
      builder,
      _Rows);
  }
};

public class ScenarioSceneTableT
{
  public List<GDT.ScenarioSceneT> Rows { get; set; }

  public ScenarioSceneTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct SkillInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillInfo GetRootAsSkillInfo(ByteBuffer _bb) { return GetRootAsSkillInfo(_bb, new SkillInfo()); }
  public static SkillInfo GetRootAsSkillInfo(ByteBuffer _bb, SkillInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.SkillGradeType SkillGradeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.SkillGradeType)__p.bb.Get(o + __p.bb_pos) : GDT.SkillGradeType.SGT_None; } }
  public string SkillName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSkillNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSkillNameArray() { return __p.__vector_as_array<byte>(8); }
  public string SkillDesc { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillDescBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetSkillDescBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetSkillDescArray() { return __p.__vector_as_array<byte>(10); }
  public GDT.SkillType SkillTypeID { get { int o = __p.__offset(12); return o != 0 ? (GDT.SkillType)__p.bb.Get(o + __p.bb_pos) : GDT.SkillType.ST_None; } }
  public GDT.MapType MapTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.MapType)__p.bb.Get(o + __p.bb_pos) : GDT.MapType.MT_None; } }
  public GDT.ItemDetailsType ItemDetailsTypeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.ItemDetailsType)__p.bb.Get(o + __p.bb_pos) : GDT.ItemDetailsType.IDT_None; } }
  public GDT.SkillUseType SkillUseTypeID { get { int o = __p.__offset(18); return o != 0 ? (GDT.SkillUseType)__p.bb.Get(o + __p.bb_pos) : GDT.SkillUseType.SUT_None; } }
  public GDT.SkillGetType SkillGetTypeID { get { int o = __p.__offset(20); return o != 0 ? (GDT.SkillGetType)__p.bb.Get(o + __p.bb_pos) : GDT.SkillGetType.SGT_Basic; } }
  public int SkillUnlockLevel { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.TierType TierTypeID { get { int o = __p.__offset(24); return o != 0 ? (GDT.TierType)__p.bb.Get(o + __p.bb_pos) : GDT.TierType.TT_None; } }
  public int TierGrade { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool SkillQuickSlot { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SkillCoolTime { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.SkillCostType SkillCostTypeID { get { int o = __p.__offset(32); return o != 0 ? (GDT.SkillCostType)__p.bb.Get(o + __p.bb_pos) : GDT.SkillCostType.SCT_None; } }
  public int SkillCostValue { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillGroupCoolTime { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float SkillUseDistanceMax { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool SkillTargeting { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool ConditionUse { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string SkillIconName { get { int o = __p.__offset(44); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillIconNameBytes() { return __p.__vector_as_span<byte>(44, 1); }
#else
  public ArraySegment<byte>? GetSkillIconNameBytes() { return __p.__vector_as_arraysegment(44); }
#endif
  public byte[] GetSkillIconNameArray() { return __p.__vector_as_array<byte>(44); }
  public int SkillGroup { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.TierType UpgradeTierTypeID { get { int o = __p.__offset(48); return o != 0 ? (GDT.TierType)__p.bb.Get(o + __p.bb_pos) : GDT.TierType.TT_None; } }
  public int UpgradeTierGrade { get { int o = __p.__offset(50); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencyMainType GradeCurrencyMainTypeID { get { int o = __p.__offset(52); return o != 0 ? (GDT.CurrencyMainType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencyMainType.CMT_None; } }
  public int GradeCurrencySubTypeID { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int GradeCurrencyCost { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NextSkillID { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SkillInfo> CreateSkillInfo(FlatBufferBuilder builder,
      int SkillID = 0,
      GDT.SkillGradeType SkillGradeID = GDT.SkillGradeType.SGT_None,
      StringOffset SkillNameOffset = default(StringOffset),
      StringOffset SkillDescOffset = default(StringOffset),
      GDT.SkillType SkillTypeID = GDT.SkillType.ST_None,
      GDT.MapType MapTypeID = GDT.MapType.MT_None,
      GDT.ItemDetailsType ItemDetailsTypeID = GDT.ItemDetailsType.IDT_None,
      GDT.SkillUseType SkillUseTypeID = GDT.SkillUseType.SUT_None,
      GDT.SkillGetType SkillGetTypeID = GDT.SkillGetType.SGT_Basic,
      int SkillUnlockLevel = 0,
      GDT.TierType TierTypeID = GDT.TierType.TT_None,
      int TierGrade = 0,
      bool SkillQuickSlot = false,
      int SkillCoolTime = 0,
      GDT.SkillCostType SkillCostTypeID = GDT.SkillCostType.SCT_None,
      int SkillCostValue = 0,
      int SkillGroupCoolTime = 0,
      float SkillUseDistanceMax = 0.0f,
      bool SkillTargeting = false,
      bool ConditionUse = false,
      StringOffset SkillIconNameOffset = default(StringOffset),
      int SkillGroup = 0,
      GDT.TierType UpgradeTierTypeID = GDT.TierType.TT_None,
      int UpgradeTierGrade = 0,
      GDT.CurrencyMainType GradeCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None,
      int GradeCurrencySubTypeID = 0,
      int GradeCurrencyCost = 0,
      int NextSkillID = 0) {
    builder.StartTable(28);
    SkillInfo.AddNextSkillID(builder, NextSkillID);
    SkillInfo.AddGradeCurrencyCost(builder, GradeCurrencyCost);
    SkillInfo.AddGradeCurrencySubTypeID(builder, GradeCurrencySubTypeID);
    SkillInfo.AddUpgradeTierGrade(builder, UpgradeTierGrade);
    SkillInfo.AddSkillGroup(builder, SkillGroup);
    SkillInfo.AddSkillIconName(builder, SkillIconNameOffset);
    SkillInfo.AddSkillUseDistanceMax(builder, SkillUseDistanceMax);
    SkillInfo.AddSkillGroupCoolTime(builder, SkillGroupCoolTime);
    SkillInfo.AddSkillCostValue(builder, SkillCostValue);
    SkillInfo.AddSkillCoolTime(builder, SkillCoolTime);
    SkillInfo.AddTierGrade(builder, TierGrade);
    SkillInfo.AddSkillUnlockLevel(builder, SkillUnlockLevel);
    SkillInfo.AddSkillDesc(builder, SkillDescOffset);
    SkillInfo.AddSkillName(builder, SkillNameOffset);
    SkillInfo.AddSkillID(builder, SkillID);
    SkillInfo.AddGradeCurrencyMainTypeID(builder, GradeCurrencyMainTypeID);
    SkillInfo.AddUpgradeTierTypeID(builder, UpgradeTierTypeID);
    SkillInfo.AddConditionUse(builder, ConditionUse);
    SkillInfo.AddSkillTargeting(builder, SkillTargeting);
    SkillInfo.AddSkillCostTypeID(builder, SkillCostTypeID);
    SkillInfo.AddSkillQuickSlot(builder, SkillQuickSlot);
    SkillInfo.AddTierTypeID(builder, TierTypeID);
    SkillInfo.AddSkillGetTypeID(builder, SkillGetTypeID);
    SkillInfo.AddSkillUseTypeID(builder, SkillUseTypeID);
    SkillInfo.AddItemDetailsTypeID(builder, ItemDetailsTypeID);
    SkillInfo.AddMapTypeID(builder, MapTypeID);
    SkillInfo.AddSkillTypeID(builder, SkillTypeID);
    SkillInfo.AddSkillGradeID(builder, SkillGradeID);
    return SkillInfo.EndSkillInfo(builder);
  }

  public static void StartSkillInfo(FlatBufferBuilder builder) { builder.StartTable(28); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(0, SkillID, 0); }
  public static void AddSkillGradeID(FlatBufferBuilder builder, GDT.SkillGradeType SkillGradeID) { builder.AddByte(1, (byte)SkillGradeID, 0); }
  public static void AddSkillName(FlatBufferBuilder builder, StringOffset SkillNameOffset) { builder.AddOffset(2, SkillNameOffset.Value, 0); }
  public static void AddSkillDesc(FlatBufferBuilder builder, StringOffset SkillDescOffset) { builder.AddOffset(3, SkillDescOffset.Value, 0); }
  public static void AddSkillTypeID(FlatBufferBuilder builder, GDT.SkillType SkillTypeID) { builder.AddByte(4, (byte)SkillTypeID, 0); }
  public static void AddMapTypeID(FlatBufferBuilder builder, GDT.MapType MapTypeID) { builder.AddByte(5, (byte)MapTypeID, 0); }
  public static void AddItemDetailsTypeID(FlatBufferBuilder builder, GDT.ItemDetailsType ItemDetailsTypeID) { builder.AddByte(6, (byte)ItemDetailsTypeID, 0); }
  public static void AddSkillUseTypeID(FlatBufferBuilder builder, GDT.SkillUseType SkillUseTypeID) { builder.AddByte(7, (byte)SkillUseTypeID, 0); }
  public static void AddSkillGetTypeID(FlatBufferBuilder builder, GDT.SkillGetType SkillGetTypeID) { builder.AddByte(8, (byte)SkillGetTypeID, 0); }
  public static void AddSkillUnlockLevel(FlatBufferBuilder builder, int SkillUnlockLevel) { builder.AddInt(9, SkillUnlockLevel, 0); }
  public static void AddTierTypeID(FlatBufferBuilder builder, GDT.TierType TierTypeID) { builder.AddByte(10, (byte)TierTypeID, 0); }
  public static void AddTierGrade(FlatBufferBuilder builder, int TierGrade) { builder.AddInt(11, TierGrade, 0); }
  public static void AddSkillQuickSlot(FlatBufferBuilder builder, bool SkillQuickSlot) { builder.AddBool(12, SkillQuickSlot, false); }
  public static void AddSkillCoolTime(FlatBufferBuilder builder, int SkillCoolTime) { builder.AddInt(13, SkillCoolTime, 0); }
  public static void AddSkillCostTypeID(FlatBufferBuilder builder, GDT.SkillCostType SkillCostTypeID) { builder.AddByte(14, (byte)SkillCostTypeID, 0); }
  public static void AddSkillCostValue(FlatBufferBuilder builder, int SkillCostValue) { builder.AddInt(15, SkillCostValue, 0); }
  public static void AddSkillGroupCoolTime(FlatBufferBuilder builder, int SkillGroupCoolTime) { builder.AddInt(16, SkillGroupCoolTime, 0); }
  public static void AddSkillUseDistanceMax(FlatBufferBuilder builder, float SkillUseDistanceMax) { builder.AddFloat(17, SkillUseDistanceMax, 0.0f); }
  public static void AddSkillTargeting(FlatBufferBuilder builder, bool SkillTargeting) { builder.AddBool(18, SkillTargeting, false); }
  public static void AddConditionUse(FlatBufferBuilder builder, bool ConditionUse) { builder.AddBool(19, ConditionUse, false); }
  public static void AddSkillIconName(FlatBufferBuilder builder, StringOffset SkillIconNameOffset) { builder.AddOffset(20, SkillIconNameOffset.Value, 0); }
  public static void AddSkillGroup(FlatBufferBuilder builder, int SkillGroup) { builder.AddInt(21, SkillGroup, 0); }
  public static void AddUpgradeTierTypeID(FlatBufferBuilder builder, GDT.TierType UpgradeTierTypeID) { builder.AddByte(22, (byte)UpgradeTierTypeID, 0); }
  public static void AddUpgradeTierGrade(FlatBufferBuilder builder, int UpgradeTierGrade) { builder.AddInt(23, UpgradeTierGrade, 0); }
  public static void AddGradeCurrencyMainTypeID(FlatBufferBuilder builder, GDT.CurrencyMainType GradeCurrencyMainTypeID) { builder.AddByte(24, (byte)GradeCurrencyMainTypeID, 0); }
  public static void AddGradeCurrencySubTypeID(FlatBufferBuilder builder, int GradeCurrencySubTypeID) { builder.AddInt(25, GradeCurrencySubTypeID, 0); }
  public static void AddGradeCurrencyCost(FlatBufferBuilder builder, int GradeCurrencyCost) { builder.AddInt(26, GradeCurrencyCost, 0); }
  public static void AddNextSkillID(FlatBufferBuilder builder, int NextSkillID) { builder.AddInt(27, NextSkillID, 0); }
  public static Offset<GDT.SkillInfo> EndSkillInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillInfo>(o);
  }
  public SkillInfoT UnPack() {
    var _o = new SkillInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillInfoT _o) {
    _o.SkillID = this.SkillID;
    _o.SkillGradeID = this.SkillGradeID;
    _o.SkillName = this.SkillName;
    _o.SkillDesc = this.SkillDesc;
    _o.SkillTypeID = this.SkillTypeID;
    _o.MapTypeID = this.MapTypeID;
    _o.ItemDetailsTypeID = this.ItemDetailsTypeID;
    _o.SkillUseTypeID = this.SkillUseTypeID;
    _o.SkillGetTypeID = this.SkillGetTypeID;
    _o.SkillUnlockLevel = this.SkillUnlockLevel;
    _o.TierTypeID = this.TierTypeID;
    _o.TierGrade = this.TierGrade;
    _o.SkillQuickSlot = this.SkillQuickSlot;
    _o.SkillCoolTime = this.SkillCoolTime;
    _o.SkillCostTypeID = this.SkillCostTypeID;
    _o.SkillCostValue = this.SkillCostValue;
    _o.SkillGroupCoolTime = this.SkillGroupCoolTime;
    _o.SkillUseDistanceMax = this.SkillUseDistanceMax;
    _o.SkillTargeting = this.SkillTargeting;
    _o.ConditionUse = this.ConditionUse;
    _o.SkillIconName = this.SkillIconName;
    _o.SkillGroup = this.SkillGroup;
    _o.UpgradeTierTypeID = this.UpgradeTierTypeID;
    _o.UpgradeTierGrade = this.UpgradeTierGrade;
    _o.GradeCurrencyMainTypeID = this.GradeCurrencyMainTypeID;
    _o.GradeCurrencySubTypeID = this.GradeCurrencySubTypeID;
    _o.GradeCurrencyCost = this.GradeCurrencyCost;
    _o.NextSkillID = this.NextSkillID;
  }
  public static Offset<GDT.SkillInfo> Pack(FlatBufferBuilder builder, SkillInfoT _o) {
    if (_o == null) return default(Offset<GDT.SkillInfo>);
    var _SkillName = _o.SkillName == null ? default(StringOffset) : builder.CreateString(_o.SkillName);
    var _SkillDesc = _o.SkillDesc == null ? default(StringOffset) : builder.CreateString(_o.SkillDesc);
    var _SkillIconName = _o.SkillIconName == null ? default(StringOffset) : builder.CreateString(_o.SkillIconName);
    return CreateSkillInfo(
      builder,
      _o.SkillID,
      _o.SkillGradeID,
      _SkillName,
      _SkillDesc,
      _o.SkillTypeID,
      _o.MapTypeID,
      _o.ItemDetailsTypeID,
      _o.SkillUseTypeID,
      _o.SkillGetTypeID,
      _o.SkillUnlockLevel,
      _o.TierTypeID,
      _o.TierGrade,
      _o.SkillQuickSlot,
      _o.SkillCoolTime,
      _o.SkillCostTypeID,
      _o.SkillCostValue,
      _o.SkillGroupCoolTime,
      _o.SkillUseDistanceMax,
      _o.SkillTargeting,
      _o.ConditionUse,
      _SkillIconName,
      _o.SkillGroup,
      _o.UpgradeTierTypeID,
      _o.UpgradeTierGrade,
      _o.GradeCurrencyMainTypeID,
      _o.GradeCurrencySubTypeID,
      _o.GradeCurrencyCost,
      _o.NextSkillID);
  }
};

public class SkillInfoT
{
  public int SkillID { get; set; }
  public GDT.SkillGradeType SkillGradeID { get; set; }
  public string SkillName { get; set; }
  public string SkillDesc { get; set; }
  public GDT.SkillType SkillTypeID { get; set; }
  public GDT.MapType MapTypeID { get; set; }
  public GDT.ItemDetailsType ItemDetailsTypeID { get; set; }
  public GDT.SkillUseType SkillUseTypeID { get; set; }
  public GDT.SkillGetType SkillGetTypeID { get; set; }
  public int SkillUnlockLevel { get; set; }
  public GDT.TierType TierTypeID { get; set; }
  public int TierGrade { get; set; }
  public bool SkillQuickSlot { get; set; }
  public int SkillCoolTime { get; set; }
  public GDT.SkillCostType SkillCostTypeID { get; set; }
  public int SkillCostValue { get; set; }
  public int SkillGroupCoolTime { get; set; }
  public float SkillUseDistanceMax { get; set; }
  public bool SkillTargeting { get; set; }
  public bool ConditionUse { get; set; }
  public string SkillIconName { get; set; }
  public int SkillGroup { get; set; }
  public GDT.TierType UpgradeTierTypeID { get; set; }
  public int UpgradeTierGrade { get; set; }
  public GDT.CurrencyMainType GradeCurrencyMainTypeID { get; set; }
  public int GradeCurrencySubTypeID { get; set; }
  public int GradeCurrencyCost { get; set; }
  public int NextSkillID { get; set; }

  public SkillInfoT() {
    this.SkillID = 0;
    this.SkillGradeID = GDT.SkillGradeType.SGT_None;
    this.SkillName = null;
    this.SkillDesc = null;
    this.SkillTypeID = GDT.SkillType.ST_None;
    this.MapTypeID = GDT.MapType.MT_None;
    this.ItemDetailsTypeID = GDT.ItemDetailsType.IDT_None;
    this.SkillUseTypeID = GDT.SkillUseType.SUT_None;
    this.SkillGetTypeID = GDT.SkillGetType.SGT_Basic;
    this.SkillUnlockLevel = 0;
    this.TierTypeID = GDT.TierType.TT_None;
    this.TierGrade = 0;
    this.SkillQuickSlot = false;
    this.SkillCoolTime = 0;
    this.SkillCostTypeID = GDT.SkillCostType.SCT_None;
    this.SkillCostValue = 0;
    this.SkillGroupCoolTime = 0;
    this.SkillUseDistanceMax = 0.0f;
    this.SkillTargeting = false;
    this.ConditionUse = false;
    this.SkillIconName = null;
    this.SkillGroup = 0;
    this.UpgradeTierTypeID = GDT.TierType.TT_None;
    this.UpgradeTierGrade = 0;
    this.GradeCurrencyMainTypeID = GDT.CurrencyMainType.CMT_None;
    this.GradeCurrencySubTypeID = 0;
    this.GradeCurrencyCost = 0;
    this.NextSkillID = 0;
  }
}

public struct SkillInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillInfoTable GetRootAsSkillInfoTable(ByteBuffer _bb) { return GetRootAsSkillInfoTable(_bb, new SkillInfoTable()); }
  public static SkillInfoTable GetRootAsSkillInfoTable(ByteBuffer _bb, SkillInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SkillInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SkillInfo?)(new GDT.SkillInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SkillInfoTable> CreateSkillInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillInfoTable.AddRows(builder, RowsOffset);
    return SkillInfoTable.EndSkillInfoTable(builder);
  }

  public static void StartSkillInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SkillInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SkillInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SkillInfoTable> EndSkillInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillInfoTable>(o);
  }
  public SkillInfoTableT UnPack() {
    var _o = new SkillInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillInfoTableT _o) {
    _o.Rows = new List<GDT.SkillInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SkillInfoTable> Pack(FlatBufferBuilder builder, SkillInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.SkillInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SkillInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SkillInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSkillInfoTable(
      builder,
      _Rows);
  }
};

public class SkillInfoTableT
{
  public List<GDT.SkillInfoT> Rows { get; set; }

  public SkillInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct SkillAnimationData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillAnimationData GetRootAsSkillAnimationData(ByteBuffer _bb) { return GetRootAsSkillAnimationData(_bb, new SkillAnimationData()); }
  public static SkillAnimationData GetRootAsSkillAnimationData(ByteBuffer _bb, SkillAnimationData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillAnimationData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillAnimationID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int AnimationTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SkillAnimationData> CreateSkillAnimationData(FlatBufferBuilder builder,
      int SkillID = 0,
      int SkillAnimationID = 0,
      int AnimationTime = 0) {
    builder.StartTable(3);
    SkillAnimationData.AddAnimationTime(builder, AnimationTime);
    SkillAnimationData.AddSkillAnimationID(builder, SkillAnimationID);
    SkillAnimationData.AddSkillID(builder, SkillID);
    return SkillAnimationData.EndSkillAnimationData(builder);
  }

  public static void StartSkillAnimationData(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(0, SkillID, 0); }
  public static void AddSkillAnimationID(FlatBufferBuilder builder, int SkillAnimationID) { builder.AddInt(1, SkillAnimationID, 0); }
  public static void AddAnimationTime(FlatBufferBuilder builder, int AnimationTime) { builder.AddInt(2, AnimationTime, 0); }
  public static Offset<GDT.SkillAnimationData> EndSkillAnimationData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillAnimationData>(o);
  }
  public SkillAnimationDataT UnPack() {
    var _o = new SkillAnimationDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillAnimationDataT _o) {
    _o.SkillID = this.SkillID;
    _o.SkillAnimationID = this.SkillAnimationID;
    _o.AnimationTime = this.AnimationTime;
  }
  public static Offset<GDT.SkillAnimationData> Pack(FlatBufferBuilder builder, SkillAnimationDataT _o) {
    if (_o == null) return default(Offset<GDT.SkillAnimationData>);
    return CreateSkillAnimationData(
      builder,
      _o.SkillID,
      _o.SkillAnimationID,
      _o.AnimationTime);
  }
};

public class SkillAnimationDataT
{
  public int SkillID { get; set; }
  public int SkillAnimationID { get; set; }
  public int AnimationTime { get; set; }

  public SkillAnimationDataT() {
    this.SkillID = 0;
    this.SkillAnimationID = 0;
    this.AnimationTime = 0;
  }
}

public struct SkillAnimationDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillAnimationDataTable GetRootAsSkillAnimationDataTable(ByteBuffer _bb) { return GetRootAsSkillAnimationDataTable(_bb, new SkillAnimationDataTable()); }
  public static SkillAnimationDataTable GetRootAsSkillAnimationDataTable(ByteBuffer _bb, SkillAnimationDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillAnimationDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SkillAnimationData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SkillAnimationData?)(new GDT.SkillAnimationData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SkillAnimationDataTable> CreateSkillAnimationDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillAnimationDataTable.AddRows(builder, RowsOffset);
    return SkillAnimationDataTable.EndSkillAnimationDataTable(builder);
  }

  public static void StartSkillAnimationDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SkillAnimationData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SkillAnimationData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SkillAnimationDataTable> EndSkillAnimationDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillAnimationDataTable>(o);
  }
  public SkillAnimationDataTableT UnPack() {
    var _o = new SkillAnimationDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillAnimationDataTableT _o) {
    _o.Rows = new List<GDT.SkillAnimationDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SkillAnimationDataTable> Pack(FlatBufferBuilder builder, SkillAnimationDataTableT _o) {
    if (_o == null) return default(Offset<GDT.SkillAnimationDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SkillAnimationData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SkillAnimationData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSkillAnimationDataTable(
      builder,
      _Rows);
  }
};

public class SkillAnimationDataTableT
{
  public List<GDT.SkillAnimationDataT> Rows { get; set; }

  public SkillAnimationDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct SkillEventData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillEventData GetRootAsSkillEventData(ByteBuffer _bb) { return GetRootAsSkillEventData(_bb, new SkillEventData()); }
  public static SkillEventData GetRootAsSkillEventData(ByteBuffer _bb, SkillEventData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillEventData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillEventID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillEventFrame { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EventRunMS { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float EventRunSec { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.SkillRangeType SkillRangeTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.SkillRangeType)__p.bb.Get(o + __p.bb_pos) : GDT.SkillRangeType.SRT_None; } }
  public float SkillRangeWidth { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SkillRangelLength { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SkillRangelAngle { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public GDT.ApplyType ApplyTypeID { get { int o = __p.__offset(22); return o != 0 ? (GDT.ApplyType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplyType.AT_None; } }
  public int ApplyCount { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillProjectileID { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillHitAni { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillHitFX { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitSound { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HitCount { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CalculationType SkillEffectID { get { int o = __p.__offset(36); return o != 0 ? (GDT.CalculationType)__p.bb.Get(o + __p.bb_pos) : GDT.CalculationType.none; } }
  public int SkillEffectValue { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffID { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillEffectName { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EffectOutputType EffectOutputTypeID { get { int o = __p.__offset(44); return o != 0 ? (GDT.EffectOutputType)__p.bb.Get(o + __p.bb_pos) : GDT.EffectOutputType.EOT_Player; } }
  public GDT.EffectOutputLocationType EffectOutputLocationTypeID { get { int o = __p.__offset(46); return o != 0 ? (GDT.EffectOutputLocationType)__p.bb.Get(o + __p.bb_pos) : GDT.EffectOutputLocationType.EOLT_None; } }
  public int SoundID { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SkillEventData> CreateSkillEventData(FlatBufferBuilder builder,
      int SkillEventID = 0,
      int SkillID = 0,
      int SkillEventFrame = 0,
      int EventRunMS = 0,
      float EventRunSec = 0.0f,
      GDT.SkillRangeType SkillRangeTypeID = GDT.SkillRangeType.SRT_None,
      float SkillRangeWidth = 0.0f,
      float SkillRangelLength = 0.0f,
      float SkillRangelAngle = 0.0f,
      GDT.ApplyType ApplyTypeID = GDT.ApplyType.AT_None,
      int ApplyCount = 0,
      int SkillProjectileID = 0,
      int SkillHitAni = 0,
      int SkillHitFX = 0,
      int HitSound = 0,
      int HitCount = 0,
      GDT.CalculationType SkillEffectID = GDT.CalculationType.none,
      int SkillEffectValue = 0,
      int BuffID = 0,
      int SkillEffectName = 0,
      GDT.EffectOutputType EffectOutputTypeID = GDT.EffectOutputType.EOT_Player,
      GDT.EffectOutputLocationType EffectOutputLocationTypeID = GDT.EffectOutputLocationType.EOLT_None,
      int SoundID = 0) {
    builder.StartTable(23);
    SkillEventData.AddSoundID(builder, SoundID);
    SkillEventData.AddSkillEffectName(builder, SkillEffectName);
    SkillEventData.AddBuffID(builder, BuffID);
    SkillEventData.AddSkillEffectValue(builder, SkillEffectValue);
    SkillEventData.AddHitCount(builder, HitCount);
    SkillEventData.AddHitSound(builder, HitSound);
    SkillEventData.AddSkillHitFX(builder, SkillHitFX);
    SkillEventData.AddSkillHitAni(builder, SkillHitAni);
    SkillEventData.AddSkillProjectileID(builder, SkillProjectileID);
    SkillEventData.AddApplyCount(builder, ApplyCount);
    SkillEventData.AddSkillRangelAngle(builder, SkillRangelAngle);
    SkillEventData.AddSkillRangelLength(builder, SkillRangelLength);
    SkillEventData.AddSkillRangeWidth(builder, SkillRangeWidth);
    SkillEventData.AddEventRunSec(builder, EventRunSec);
    SkillEventData.AddEventRunMS(builder, EventRunMS);
    SkillEventData.AddSkillEventFrame(builder, SkillEventFrame);
    SkillEventData.AddSkillID(builder, SkillID);
    SkillEventData.AddSkillEventID(builder, SkillEventID);
    SkillEventData.AddEffectOutputLocationTypeID(builder, EffectOutputLocationTypeID);
    SkillEventData.AddEffectOutputTypeID(builder, EffectOutputTypeID);
    SkillEventData.AddSkillEffectID(builder, SkillEffectID);
    SkillEventData.AddApplyTypeID(builder, ApplyTypeID);
    SkillEventData.AddSkillRangeTypeID(builder, SkillRangeTypeID);
    return SkillEventData.EndSkillEventData(builder);
  }

  public static void StartSkillEventData(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddSkillEventID(FlatBufferBuilder builder, int SkillEventID) { builder.AddInt(0, SkillEventID, 0); }
  public static void AddSkillID(FlatBufferBuilder builder, int SkillID) { builder.AddInt(1, SkillID, 0); }
  public static void AddSkillEventFrame(FlatBufferBuilder builder, int SkillEventFrame) { builder.AddInt(2, SkillEventFrame, 0); }
  public static void AddEventRunMS(FlatBufferBuilder builder, int EventRunMS) { builder.AddInt(3, EventRunMS, 0); }
  public static void AddEventRunSec(FlatBufferBuilder builder, float EventRunSec) { builder.AddFloat(4, EventRunSec, 0.0f); }
  public static void AddSkillRangeTypeID(FlatBufferBuilder builder, GDT.SkillRangeType SkillRangeTypeID) { builder.AddByte(5, (byte)SkillRangeTypeID, 0); }
  public static void AddSkillRangeWidth(FlatBufferBuilder builder, float SkillRangeWidth) { builder.AddFloat(6, SkillRangeWidth, 0.0f); }
  public static void AddSkillRangelLength(FlatBufferBuilder builder, float SkillRangelLength) { builder.AddFloat(7, SkillRangelLength, 0.0f); }
  public static void AddSkillRangelAngle(FlatBufferBuilder builder, float SkillRangelAngle) { builder.AddFloat(8, SkillRangelAngle, 0.0f); }
  public static void AddApplyTypeID(FlatBufferBuilder builder, GDT.ApplyType ApplyTypeID) { builder.AddByte(9, (byte)ApplyTypeID, 0); }
  public static void AddApplyCount(FlatBufferBuilder builder, int ApplyCount) { builder.AddInt(10, ApplyCount, 0); }
  public static void AddSkillProjectileID(FlatBufferBuilder builder, int SkillProjectileID) { builder.AddInt(11, SkillProjectileID, 0); }
  public static void AddSkillHitAni(FlatBufferBuilder builder, int SkillHitAni) { builder.AddInt(12, SkillHitAni, 0); }
  public static void AddSkillHitFX(FlatBufferBuilder builder, int SkillHitFX) { builder.AddInt(13, SkillHitFX, 0); }
  public static void AddHitSound(FlatBufferBuilder builder, int HitSound) { builder.AddInt(14, HitSound, 0); }
  public static void AddHitCount(FlatBufferBuilder builder, int HitCount) { builder.AddInt(15, HitCount, 0); }
  public static void AddSkillEffectID(FlatBufferBuilder builder, GDT.CalculationType SkillEffectID) { builder.AddByte(16, (byte)SkillEffectID, 0); }
  public static void AddSkillEffectValue(FlatBufferBuilder builder, int SkillEffectValue) { builder.AddInt(17, SkillEffectValue, 0); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(18, BuffID, 0); }
  public static void AddSkillEffectName(FlatBufferBuilder builder, int SkillEffectName) { builder.AddInt(19, SkillEffectName, 0); }
  public static void AddEffectOutputTypeID(FlatBufferBuilder builder, GDT.EffectOutputType EffectOutputTypeID) { builder.AddByte(20, (byte)EffectOutputTypeID, 0); }
  public static void AddEffectOutputLocationTypeID(FlatBufferBuilder builder, GDT.EffectOutputLocationType EffectOutputLocationTypeID) { builder.AddByte(21, (byte)EffectOutputLocationTypeID, 0); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(22, SoundID, 0); }
  public static Offset<GDT.SkillEventData> EndSkillEventData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillEventData>(o);
  }
  public SkillEventDataT UnPack() {
    var _o = new SkillEventDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillEventDataT _o) {
    _o.SkillEventID = this.SkillEventID;
    _o.SkillID = this.SkillID;
    _o.SkillEventFrame = this.SkillEventFrame;
    _o.EventRunMS = this.EventRunMS;
    _o.EventRunSec = this.EventRunSec;
    _o.SkillRangeTypeID = this.SkillRangeTypeID;
    _o.SkillRangeWidth = this.SkillRangeWidth;
    _o.SkillRangelLength = this.SkillRangelLength;
    _o.SkillRangelAngle = this.SkillRangelAngle;
    _o.ApplyTypeID = this.ApplyTypeID;
    _o.ApplyCount = this.ApplyCount;
    _o.SkillProjectileID = this.SkillProjectileID;
    _o.SkillHitAni = this.SkillHitAni;
    _o.SkillHitFX = this.SkillHitFX;
    _o.HitSound = this.HitSound;
    _o.HitCount = this.HitCount;
    _o.SkillEffectID = this.SkillEffectID;
    _o.SkillEffectValue = this.SkillEffectValue;
    _o.BuffID = this.BuffID;
    _o.SkillEffectName = this.SkillEffectName;
    _o.EffectOutputTypeID = this.EffectOutputTypeID;
    _o.EffectOutputLocationTypeID = this.EffectOutputLocationTypeID;
    _o.SoundID = this.SoundID;
  }
  public static Offset<GDT.SkillEventData> Pack(FlatBufferBuilder builder, SkillEventDataT _o) {
    if (_o == null) return default(Offset<GDT.SkillEventData>);
    return CreateSkillEventData(
      builder,
      _o.SkillEventID,
      _o.SkillID,
      _o.SkillEventFrame,
      _o.EventRunMS,
      _o.EventRunSec,
      _o.SkillRangeTypeID,
      _o.SkillRangeWidth,
      _o.SkillRangelLength,
      _o.SkillRangelAngle,
      _o.ApplyTypeID,
      _o.ApplyCount,
      _o.SkillProjectileID,
      _o.SkillHitAni,
      _o.SkillHitFX,
      _o.HitSound,
      _o.HitCount,
      _o.SkillEffectID,
      _o.SkillEffectValue,
      _o.BuffID,
      _o.SkillEffectName,
      _o.EffectOutputTypeID,
      _o.EffectOutputLocationTypeID,
      _o.SoundID);
  }
};

public class SkillEventDataT
{
  public int SkillEventID { get; set; }
  public int SkillID { get; set; }
  public int SkillEventFrame { get; set; }
  public int EventRunMS { get; set; }
  public float EventRunSec { get; set; }
  public GDT.SkillRangeType SkillRangeTypeID { get; set; }
  public float SkillRangeWidth { get; set; }
  public float SkillRangelLength { get; set; }
  public float SkillRangelAngle { get; set; }
  public GDT.ApplyType ApplyTypeID { get; set; }
  public int ApplyCount { get; set; }
  public int SkillProjectileID { get; set; }
  public int SkillHitAni { get; set; }
  public int SkillHitFX { get; set; }
  public int HitSound { get; set; }
  public int HitCount { get; set; }
  public GDT.CalculationType SkillEffectID { get; set; }
  public int SkillEffectValue { get; set; }
  public int BuffID { get; set; }
  public int SkillEffectName { get; set; }
  public GDT.EffectOutputType EffectOutputTypeID { get; set; }
  public GDT.EffectOutputLocationType EffectOutputLocationTypeID { get; set; }
  public int SoundID { get; set; }

  public SkillEventDataT() {
    this.SkillEventID = 0;
    this.SkillID = 0;
    this.SkillEventFrame = 0;
    this.EventRunMS = 0;
    this.EventRunSec = 0.0f;
    this.SkillRangeTypeID = GDT.SkillRangeType.SRT_None;
    this.SkillRangeWidth = 0.0f;
    this.SkillRangelLength = 0.0f;
    this.SkillRangelAngle = 0.0f;
    this.ApplyTypeID = GDT.ApplyType.AT_None;
    this.ApplyCount = 0;
    this.SkillProjectileID = 0;
    this.SkillHitAni = 0;
    this.SkillHitFX = 0;
    this.HitSound = 0;
    this.HitCount = 0;
    this.SkillEffectID = GDT.CalculationType.none;
    this.SkillEffectValue = 0;
    this.BuffID = 0;
    this.SkillEffectName = 0;
    this.EffectOutputTypeID = GDT.EffectOutputType.EOT_Player;
    this.EffectOutputLocationTypeID = GDT.EffectOutputLocationType.EOLT_None;
    this.SoundID = 0;
  }
}

public struct SkillEventDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillEventDataTable GetRootAsSkillEventDataTable(ByteBuffer _bb) { return GetRootAsSkillEventDataTable(_bb, new SkillEventDataTable()); }
  public static SkillEventDataTable GetRootAsSkillEventDataTable(ByteBuffer _bb, SkillEventDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillEventDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SkillEventData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SkillEventData?)(new GDT.SkillEventData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SkillEventDataTable> CreateSkillEventDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillEventDataTable.AddRows(builder, RowsOffset);
    return SkillEventDataTable.EndSkillEventDataTable(builder);
  }

  public static void StartSkillEventDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SkillEventData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SkillEventData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SkillEventDataTable> EndSkillEventDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillEventDataTable>(o);
  }
  public SkillEventDataTableT UnPack() {
    var _o = new SkillEventDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillEventDataTableT _o) {
    _o.Rows = new List<GDT.SkillEventDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SkillEventDataTable> Pack(FlatBufferBuilder builder, SkillEventDataTableT _o) {
    if (_o == null) return default(Offset<GDT.SkillEventDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SkillEventData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SkillEventData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSkillEventDataTable(
      builder,
      _Rows);
  }
};

public class SkillEventDataTableT
{
  public List<GDT.SkillEventDataT> Rows { get; set; }

  public SkillEventDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct Projectile : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Projectile GetRootAsProjectile(ByteBuffer _bb) { return GetRootAsProjectile(_bb, new Projectile()); }
  public static Projectile GetRootAsProjectile(ByteBuffer _bb, Projectile obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Projectile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ProjectileID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillProjectileFX { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillProjectileFXBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSkillProjectileFXBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSkillProjectileFXArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<GDT.Projectile> CreateProjectile(FlatBufferBuilder builder,
      int ProjectileID = 0,
      StringOffset SkillProjectileFXOffset = default(StringOffset)) {
    builder.StartTable(2);
    Projectile.AddSkillProjectileFX(builder, SkillProjectileFXOffset);
    Projectile.AddProjectileID(builder, ProjectileID);
    return Projectile.EndProjectile(builder);
  }

  public static void StartProjectile(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddProjectileID(FlatBufferBuilder builder, int ProjectileID) { builder.AddInt(0, ProjectileID, 0); }
  public static void AddSkillProjectileFX(FlatBufferBuilder builder, StringOffset SkillProjectileFXOffset) { builder.AddOffset(1, SkillProjectileFXOffset.Value, 0); }
  public static Offset<GDT.Projectile> EndProjectile(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Projectile>(o);
  }
  public ProjectileT UnPack() {
    var _o = new ProjectileT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProjectileT _o) {
    _o.ProjectileID = this.ProjectileID;
    _o.SkillProjectileFX = this.SkillProjectileFX;
  }
  public static Offset<GDT.Projectile> Pack(FlatBufferBuilder builder, ProjectileT _o) {
    if (_o == null) return default(Offset<GDT.Projectile>);
    var _SkillProjectileFX = _o.SkillProjectileFX == null ? default(StringOffset) : builder.CreateString(_o.SkillProjectileFX);
    return CreateProjectile(
      builder,
      _o.ProjectileID,
      _SkillProjectileFX);
  }
};

public class ProjectileT
{
  public int ProjectileID { get; set; }
  public string SkillProjectileFX { get; set; }

  public ProjectileT() {
    this.ProjectileID = 0;
    this.SkillProjectileFX = null;
  }
}

public struct ProjectileTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ProjectileTable GetRootAsProjectileTable(ByteBuffer _bb) { return GetRootAsProjectileTable(_bb, new ProjectileTable()); }
  public static ProjectileTable GetRootAsProjectileTable(ByteBuffer _bb, ProjectileTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProjectileTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Projectile? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Projectile?)(new GDT.Projectile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ProjectileTable> CreateProjectileTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ProjectileTable.AddRows(builder, RowsOffset);
    return ProjectileTable.EndProjectileTable(builder);
  }

  public static void StartProjectileTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Projectile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Projectile>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ProjectileTable> EndProjectileTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ProjectileTable>(o);
  }
  public ProjectileTableT UnPack() {
    var _o = new ProjectileTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProjectileTableT _o) {
    _o.Rows = new List<GDT.ProjectileT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ProjectileTable> Pack(FlatBufferBuilder builder, ProjectileTableT _o) {
    if (_o == null) return default(Offset<GDT.ProjectileTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Projectile>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Projectile.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateProjectileTable(
      builder,
      _Rows);
  }
};

public class ProjectileTableT
{
  public List<GDT.ProjectileT> Rows { get; set; }

  public ProjectileTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct SkillGrowthGroup : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillGrowthGroup GetRootAsSkillGrowthGroup(ByteBuffer _bb) { return GetRootAsSkillGrowthGroup(_bb, new SkillGrowthGroup()); }
  public static SkillGrowthGroup GetRootAsSkillGrowthGroup(ByteBuffer _bb, SkillGrowthGroup obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillGrowthGroup __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SkillGrowthGroupID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SkillSort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SkillGroupName { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSkillGroupNameBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetSkillGroupNameBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetSkillGroupNameArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<GDT.SkillGrowthGroup> CreateSkillGrowthGroup(FlatBufferBuilder builder,
      int SkillGrowthGroupID = 0,
      int SkillSort = 0,
      StringOffset SkillGroupNameOffset = default(StringOffset)) {
    builder.StartTable(3);
    SkillGrowthGroup.AddSkillGroupName(builder, SkillGroupNameOffset);
    SkillGrowthGroup.AddSkillSort(builder, SkillSort);
    SkillGrowthGroup.AddSkillGrowthGroupID(builder, SkillGrowthGroupID);
    return SkillGrowthGroup.EndSkillGrowthGroup(builder);
  }

  public static void StartSkillGrowthGroup(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddSkillGrowthGroupID(FlatBufferBuilder builder, int SkillGrowthGroupID) { builder.AddInt(0, SkillGrowthGroupID, 0); }
  public static void AddSkillSort(FlatBufferBuilder builder, int SkillSort) { builder.AddInt(1, SkillSort, 0); }
  public static void AddSkillGroupName(FlatBufferBuilder builder, StringOffset SkillGroupNameOffset) { builder.AddOffset(2, SkillGroupNameOffset.Value, 0); }
  public static Offset<GDT.SkillGrowthGroup> EndSkillGrowthGroup(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillGrowthGroup>(o);
  }
  public SkillGrowthGroupT UnPack() {
    var _o = new SkillGrowthGroupT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillGrowthGroupT _o) {
    _o.SkillGrowthGroupID = this.SkillGrowthGroupID;
    _o.SkillSort = this.SkillSort;
    _o.SkillGroupName = this.SkillGroupName;
  }
  public static Offset<GDT.SkillGrowthGroup> Pack(FlatBufferBuilder builder, SkillGrowthGroupT _o) {
    if (_o == null) return default(Offset<GDT.SkillGrowthGroup>);
    var _SkillGroupName = _o.SkillGroupName == null ? default(StringOffset) : builder.CreateString(_o.SkillGroupName);
    return CreateSkillGrowthGroup(
      builder,
      _o.SkillGrowthGroupID,
      _o.SkillSort,
      _SkillGroupName);
  }
};

public class SkillGrowthGroupT
{
  public int SkillGrowthGroupID { get; set; }
  public int SkillSort { get; set; }
  public string SkillGroupName { get; set; }

  public SkillGrowthGroupT() {
    this.SkillGrowthGroupID = 0;
    this.SkillSort = 0;
    this.SkillGroupName = null;
  }
}

public struct SkillGrowthGroupTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SkillGrowthGroupTable GetRootAsSkillGrowthGroupTable(ByteBuffer _bb) { return GetRootAsSkillGrowthGroupTable(_bb, new SkillGrowthGroupTable()); }
  public static SkillGrowthGroupTable GetRootAsSkillGrowthGroupTable(ByteBuffer _bb, SkillGrowthGroupTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SkillGrowthGroupTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SkillGrowthGroup? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SkillGrowthGroup?)(new GDT.SkillGrowthGroup()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SkillGrowthGroupTable> CreateSkillGrowthGroupTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SkillGrowthGroupTable.AddRows(builder, RowsOffset);
    return SkillGrowthGroupTable.EndSkillGrowthGroupTable(builder);
  }

  public static void StartSkillGrowthGroupTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SkillGrowthGroup>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SkillGrowthGroup>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SkillGrowthGroupTable> EndSkillGrowthGroupTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SkillGrowthGroupTable>(o);
  }
  public SkillGrowthGroupTableT UnPack() {
    var _o = new SkillGrowthGroupTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SkillGrowthGroupTableT _o) {
    _o.Rows = new List<GDT.SkillGrowthGroupT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SkillGrowthGroupTable> Pack(FlatBufferBuilder builder, SkillGrowthGroupTableT _o) {
    if (_o == null) return default(Offset<GDT.SkillGrowthGroupTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SkillGrowthGroup>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SkillGrowthGroup.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSkillGrowthGroupTable(
      builder,
      _Rows);
  }
};

public class SkillGrowthGroupTableT
{
  public List<GDT.SkillGrowthGroupT> Rows { get; set; }

  public SkillGrowthGroupTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct BuffInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BuffInfo GetRootAsBuffInfo(ByteBuffer _bb) { return GetRootAsBuffInfo(_bb, new BuffInfo()); }
  public static BuffInfo GetRootAsBuffInfo(ByteBuffer _bb, BuffInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuffInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BuffID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.BuffType BuffTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.BuffType)__p.bb.Get(o + __p.bb_pos) : GDT.BuffType.BT_None; } }
  public int BuffEffect { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BuffTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ApplyAnimationID { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EffectOutputType EffectOutputTypeID { get { int o = __p.__offset(14); return o != 0 ? (GDT.EffectOutputType)__p.bb.Get(o + __p.bb_pos) : GDT.EffectOutputType.EOT_Player; } }
  public GDT.EffectOutputLocationType EffectOutputLocationTypeID { get { int o = __p.__offset(16); return o != 0 ? (GDT.EffectOutputLocationType)__p.bb.Get(o + __p.bb_pos) : GDT.EffectOutputLocationType.EOLT_None; } }
  public int EffectSoundName { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Loop { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int LiftBuffEffect { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.EffectOutputType LiftEffectOutputTypeID { get { int o = __p.__offset(24); return o != 0 ? (GDT.EffectOutputType)__p.bb.Get(o + __p.bb_pos) : GDT.EffectOutputType.EOT_Player; } }
  public GDT.EffectOutputLocationType LiftEffectOutputLocationTypeID { get { int o = __p.__offset(26); return o != 0 ? (GDT.EffectOutputLocationType)__p.bb.Get(o + __p.bb_pos) : GDT.EffectOutputLocationType.EOLT_None; } }
  public int LiftEffectSoundName { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool EffectSync { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string IconName { get { int o = __p.__offset(32); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconNameBytes() { return __p.__vector_as_span<byte>(32, 1); }
#else
  public ArraySegment<byte>? GetIconNameBytes() { return __p.__vector_as_arraysegment(32); }
#endif
  public byte[] GetIconNameArray() { return __p.__vector_as_array<byte>(32); }

  public static Offset<GDT.BuffInfo> CreateBuffInfo(FlatBufferBuilder builder,
      int BuffID = 0,
      GDT.BuffType BuffTypeID = GDT.BuffType.BT_None,
      int BuffEffect = 0,
      int BuffTime = 0,
      int ApplyAnimationID = 0,
      GDT.EffectOutputType EffectOutputTypeID = GDT.EffectOutputType.EOT_Player,
      GDT.EffectOutputLocationType EffectOutputLocationTypeID = GDT.EffectOutputLocationType.EOLT_None,
      int EffectSoundName = 0,
      bool Loop = false,
      int LiftBuffEffect = 0,
      GDT.EffectOutputType LiftEffectOutputTypeID = GDT.EffectOutputType.EOT_Player,
      GDT.EffectOutputLocationType LiftEffectOutputLocationTypeID = GDT.EffectOutputLocationType.EOLT_None,
      int LiftEffectSoundName = 0,
      bool EffectSync = false,
      StringOffset IconNameOffset = default(StringOffset)) {
    builder.StartTable(15);
    BuffInfo.AddIconName(builder, IconNameOffset);
    BuffInfo.AddLiftEffectSoundName(builder, LiftEffectSoundName);
    BuffInfo.AddLiftBuffEffect(builder, LiftBuffEffect);
    BuffInfo.AddEffectSoundName(builder, EffectSoundName);
    BuffInfo.AddApplyAnimationID(builder, ApplyAnimationID);
    BuffInfo.AddBuffTime(builder, BuffTime);
    BuffInfo.AddBuffEffect(builder, BuffEffect);
    BuffInfo.AddBuffID(builder, BuffID);
    BuffInfo.AddEffectSync(builder, EffectSync);
    BuffInfo.AddLiftEffectOutputLocationTypeID(builder, LiftEffectOutputLocationTypeID);
    BuffInfo.AddLiftEffectOutputTypeID(builder, LiftEffectOutputTypeID);
    BuffInfo.AddLoop(builder, Loop);
    BuffInfo.AddEffectOutputLocationTypeID(builder, EffectOutputLocationTypeID);
    BuffInfo.AddEffectOutputTypeID(builder, EffectOutputTypeID);
    BuffInfo.AddBuffTypeID(builder, BuffTypeID);
    return BuffInfo.EndBuffInfo(builder);
  }

  public static void StartBuffInfo(FlatBufferBuilder builder) { builder.StartTable(15); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(0, BuffID, 0); }
  public static void AddBuffTypeID(FlatBufferBuilder builder, GDT.BuffType BuffTypeID) { builder.AddByte(1, (byte)BuffTypeID, 0); }
  public static void AddBuffEffect(FlatBufferBuilder builder, int BuffEffect) { builder.AddInt(2, BuffEffect, 0); }
  public static void AddBuffTime(FlatBufferBuilder builder, int BuffTime) { builder.AddInt(3, BuffTime, 0); }
  public static void AddApplyAnimationID(FlatBufferBuilder builder, int ApplyAnimationID) { builder.AddInt(4, ApplyAnimationID, 0); }
  public static void AddEffectOutputTypeID(FlatBufferBuilder builder, GDT.EffectOutputType EffectOutputTypeID) { builder.AddByte(5, (byte)EffectOutputTypeID, 0); }
  public static void AddEffectOutputLocationTypeID(FlatBufferBuilder builder, GDT.EffectOutputLocationType EffectOutputLocationTypeID) { builder.AddByte(6, (byte)EffectOutputLocationTypeID, 0); }
  public static void AddEffectSoundName(FlatBufferBuilder builder, int EffectSoundName) { builder.AddInt(7, EffectSoundName, 0); }
  public static void AddLoop(FlatBufferBuilder builder, bool Loop) { builder.AddBool(8, Loop, false); }
  public static void AddLiftBuffEffect(FlatBufferBuilder builder, int LiftBuffEffect) { builder.AddInt(9, LiftBuffEffect, 0); }
  public static void AddLiftEffectOutputTypeID(FlatBufferBuilder builder, GDT.EffectOutputType LiftEffectOutputTypeID) { builder.AddByte(10, (byte)LiftEffectOutputTypeID, 0); }
  public static void AddLiftEffectOutputLocationTypeID(FlatBufferBuilder builder, GDT.EffectOutputLocationType LiftEffectOutputLocationTypeID) { builder.AddByte(11, (byte)LiftEffectOutputLocationTypeID, 0); }
  public static void AddLiftEffectSoundName(FlatBufferBuilder builder, int LiftEffectSoundName) { builder.AddInt(12, LiftEffectSoundName, 0); }
  public static void AddEffectSync(FlatBufferBuilder builder, bool EffectSync) { builder.AddBool(13, EffectSync, false); }
  public static void AddIconName(FlatBufferBuilder builder, StringOffset IconNameOffset) { builder.AddOffset(14, IconNameOffset.Value, 0); }
  public static Offset<GDT.BuffInfo> EndBuffInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.BuffInfo>(o);
  }
  public BuffInfoT UnPack() {
    var _o = new BuffInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuffInfoT _o) {
    _o.BuffID = this.BuffID;
    _o.BuffTypeID = this.BuffTypeID;
    _o.BuffEffect = this.BuffEffect;
    _o.BuffTime = this.BuffTime;
    _o.ApplyAnimationID = this.ApplyAnimationID;
    _o.EffectOutputTypeID = this.EffectOutputTypeID;
    _o.EffectOutputLocationTypeID = this.EffectOutputLocationTypeID;
    _o.EffectSoundName = this.EffectSoundName;
    _o.Loop = this.Loop;
    _o.LiftBuffEffect = this.LiftBuffEffect;
    _o.LiftEffectOutputTypeID = this.LiftEffectOutputTypeID;
    _o.LiftEffectOutputLocationTypeID = this.LiftEffectOutputLocationTypeID;
    _o.LiftEffectSoundName = this.LiftEffectSoundName;
    _o.EffectSync = this.EffectSync;
    _o.IconName = this.IconName;
  }
  public static Offset<GDT.BuffInfo> Pack(FlatBufferBuilder builder, BuffInfoT _o) {
    if (_o == null) return default(Offset<GDT.BuffInfo>);
    var _IconName = _o.IconName == null ? default(StringOffset) : builder.CreateString(_o.IconName);
    return CreateBuffInfo(
      builder,
      _o.BuffID,
      _o.BuffTypeID,
      _o.BuffEffect,
      _o.BuffTime,
      _o.ApplyAnimationID,
      _o.EffectOutputTypeID,
      _o.EffectOutputLocationTypeID,
      _o.EffectSoundName,
      _o.Loop,
      _o.LiftBuffEffect,
      _o.LiftEffectOutputTypeID,
      _o.LiftEffectOutputLocationTypeID,
      _o.LiftEffectSoundName,
      _o.EffectSync,
      _IconName);
  }
};

public class BuffInfoT
{
  public int BuffID { get; set; }
  public GDT.BuffType BuffTypeID { get; set; }
  public int BuffEffect { get; set; }
  public int BuffTime { get; set; }
  public int ApplyAnimationID { get; set; }
  public GDT.EffectOutputType EffectOutputTypeID { get; set; }
  public GDT.EffectOutputLocationType EffectOutputLocationTypeID { get; set; }
  public int EffectSoundName { get; set; }
  public bool Loop { get; set; }
  public int LiftBuffEffect { get; set; }
  public GDT.EffectOutputType LiftEffectOutputTypeID { get; set; }
  public GDT.EffectOutputLocationType LiftEffectOutputLocationTypeID { get; set; }
  public int LiftEffectSoundName { get; set; }
  public bool EffectSync { get; set; }
  public string IconName { get; set; }

  public BuffInfoT() {
    this.BuffID = 0;
    this.BuffTypeID = GDT.BuffType.BT_None;
    this.BuffEffect = 0;
    this.BuffTime = 0;
    this.ApplyAnimationID = 0;
    this.EffectOutputTypeID = GDT.EffectOutputType.EOT_Player;
    this.EffectOutputLocationTypeID = GDT.EffectOutputLocationType.EOLT_None;
    this.EffectSoundName = 0;
    this.Loop = false;
    this.LiftBuffEffect = 0;
    this.LiftEffectOutputTypeID = GDT.EffectOutputType.EOT_Player;
    this.LiftEffectOutputLocationTypeID = GDT.EffectOutputLocationType.EOLT_None;
    this.LiftEffectSoundName = 0;
    this.EffectSync = false;
    this.IconName = null;
  }
}

public struct BuffInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BuffInfoTable GetRootAsBuffInfoTable(ByteBuffer _bb) { return GetRootAsBuffInfoTable(_bb, new BuffInfoTable()); }
  public static BuffInfoTable GetRootAsBuffInfoTable(ByteBuffer _bb, BuffInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuffInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.BuffInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.BuffInfo?)(new GDT.BuffInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.BuffInfoTable> CreateBuffInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BuffInfoTable.AddRows(builder, RowsOffset);
    return BuffInfoTable.EndBuffInfoTable(builder);
  }

  public static void StartBuffInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.BuffInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.BuffInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.BuffInfoTable> EndBuffInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.BuffInfoTable>(o);
  }
  public BuffInfoTableT UnPack() {
    var _o = new BuffInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuffInfoTableT _o) {
    _o.Rows = new List<GDT.BuffInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.BuffInfoTable> Pack(FlatBufferBuilder builder, BuffInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.BuffInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.BuffInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.BuffInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateBuffInfoTable(
      builder,
      _Rows);
  }
};

public class BuffInfoTableT
{
  public List<GDT.BuffInfoT> Rows { get; set; }

  public BuffInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by Skill.xlsx
public struct BuffData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BuffData GetRootAsBuffData(ByteBuffer _bb) { return GetRootAsBuffData(_bb, new BuffData()); }
  public static BuffData GetRootAsBuffData(ByteBuffer _bb, BuffData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuffData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BuffID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CalculationType StatID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CalculationType)__p.bb.Get(o + __p.bb_pos) : GDT.CalculationType.none; } }
  public int StatValue { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ApplyTime { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.ApplyType ApplyTargetID { get { int o = __p.__offset(12); return o != 0 ? (GDT.ApplyType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplyType.AT_None; } }
  public float ApplyRange { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GDT.BuffData> CreateBuffData(FlatBufferBuilder builder,
      int BuffID = 0,
      GDT.CalculationType StatID = GDT.CalculationType.none,
      int StatValue = 0,
      int ApplyTime = 0,
      GDT.ApplyType ApplyTargetID = GDT.ApplyType.AT_None,
      float ApplyRange = 0.0f) {
    builder.StartTable(6);
    BuffData.AddApplyRange(builder, ApplyRange);
    BuffData.AddApplyTime(builder, ApplyTime);
    BuffData.AddStatValue(builder, StatValue);
    BuffData.AddBuffID(builder, BuffID);
    BuffData.AddApplyTargetID(builder, ApplyTargetID);
    BuffData.AddStatID(builder, StatID);
    return BuffData.EndBuffData(builder);
  }

  public static void StartBuffData(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddBuffID(FlatBufferBuilder builder, int BuffID) { builder.AddInt(0, BuffID, 0); }
  public static void AddStatID(FlatBufferBuilder builder, GDT.CalculationType StatID) { builder.AddByte(1, (byte)StatID, 0); }
  public static void AddStatValue(FlatBufferBuilder builder, int StatValue) { builder.AddInt(2, StatValue, 0); }
  public static void AddApplyTime(FlatBufferBuilder builder, int ApplyTime) { builder.AddInt(3, ApplyTime, 0); }
  public static void AddApplyTargetID(FlatBufferBuilder builder, GDT.ApplyType ApplyTargetID) { builder.AddByte(4, (byte)ApplyTargetID, 0); }
  public static void AddApplyRange(FlatBufferBuilder builder, float ApplyRange) { builder.AddFloat(5, ApplyRange, 0.0f); }
  public static Offset<GDT.BuffData> EndBuffData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.BuffData>(o);
  }
  public BuffDataT UnPack() {
    var _o = new BuffDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuffDataT _o) {
    _o.BuffID = this.BuffID;
    _o.StatID = this.StatID;
    _o.StatValue = this.StatValue;
    _o.ApplyTime = this.ApplyTime;
    _o.ApplyTargetID = this.ApplyTargetID;
    _o.ApplyRange = this.ApplyRange;
  }
  public static Offset<GDT.BuffData> Pack(FlatBufferBuilder builder, BuffDataT _o) {
    if (_o == null) return default(Offset<GDT.BuffData>);
    return CreateBuffData(
      builder,
      _o.BuffID,
      _o.StatID,
      _o.StatValue,
      _o.ApplyTime,
      _o.ApplyTargetID,
      _o.ApplyRange);
  }
};

public class BuffDataT
{
  public int BuffID { get; set; }
  public GDT.CalculationType StatID { get; set; }
  public int StatValue { get; set; }
  public int ApplyTime { get; set; }
  public GDT.ApplyType ApplyTargetID { get; set; }
  public float ApplyRange { get; set; }

  public BuffDataT() {
    this.BuffID = 0;
    this.StatID = GDT.CalculationType.none;
    this.StatValue = 0;
    this.ApplyTime = 0;
    this.ApplyTargetID = GDT.ApplyType.AT_None;
    this.ApplyRange = 0.0f;
  }
}

public struct BuffDataTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BuffDataTable GetRootAsBuffDataTable(ByteBuffer _bb) { return GetRootAsBuffDataTable(_bb, new BuffDataTable()); }
  public static BuffDataTable GetRootAsBuffDataTable(ByteBuffer _bb, BuffDataTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BuffDataTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.BuffData? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.BuffData?)(new GDT.BuffData()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.BuffDataTable> CreateBuffDataTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    BuffDataTable.AddRows(builder, RowsOffset);
    return BuffDataTable.EndBuffDataTable(builder);
  }

  public static void StartBuffDataTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.BuffData>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.BuffData>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.BuffDataTable> EndBuffDataTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.BuffDataTable>(o);
  }
  public BuffDataTableT UnPack() {
    var _o = new BuffDataTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(BuffDataTableT _o) {
    _o.Rows = new List<GDT.BuffDataT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.BuffDataTable> Pack(FlatBufferBuilder builder, BuffDataTableT _o) {
    if (_o == null) return default(Offset<GDT.BuffDataTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.BuffData>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.BuffData.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateBuffDataTable(
      builder,
      _Rows);
  }
};

public class BuffDataTableT
{
  public List<GDT.BuffDataT> Rows { get; set; }

  public BuffDataTableT() {
    this.Rows = null;
  }
}

/// Defined by Slang.xlsx
public struct Slang : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Slang GetRootAsSlang(ByteBuffer _bb) { return GetRootAsSlang(_bb, new Slang()); }
  public static Slang GetRootAsSlang(ByteBuffer _bb, Slang obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Slang __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Index { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SlangWord { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSlangWordBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSlangWordBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSlangWordArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<GDT.Slang> CreateSlang(FlatBufferBuilder builder,
      int Index = 0,
      StringOffset SlangWordOffset = default(StringOffset)) {
    builder.StartTable(2);
    Slang.AddSlangWord(builder, SlangWordOffset);
    Slang.AddIndex(builder, Index);
    return Slang.EndSlang(builder);
  }

  public static void StartSlang(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddIndex(FlatBufferBuilder builder, int Index) { builder.AddInt(0, Index, 0); }
  public static void AddSlangWord(FlatBufferBuilder builder, StringOffset SlangWordOffset) { builder.AddOffset(1, SlangWordOffset.Value, 0); }
  public static Offset<GDT.Slang> EndSlang(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Slang>(o);
  }
  public SlangT UnPack() {
    var _o = new SlangT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SlangT _o) {
    _o.Index = this.Index;
    _o.SlangWord = this.SlangWord;
  }
  public static Offset<GDT.Slang> Pack(FlatBufferBuilder builder, SlangT _o) {
    if (_o == null) return default(Offset<GDT.Slang>);
    var _SlangWord = _o.SlangWord == null ? default(StringOffset) : builder.CreateString(_o.SlangWord);
    return CreateSlang(
      builder,
      _o.Index,
      _SlangWord);
  }
};

public class SlangT
{
  public int Index { get; set; }
  public string SlangWord { get; set; }

  public SlangT() {
    this.Index = 0;
    this.SlangWord = null;
  }
}

public struct SlangTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SlangTable GetRootAsSlangTable(ByteBuffer _bb) { return GetRootAsSlangTable(_bb, new SlangTable()); }
  public static SlangTable GetRootAsSlangTable(ByteBuffer _bb, SlangTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SlangTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Slang? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Slang?)(new GDT.Slang()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SlangTable> CreateSlangTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SlangTable.AddRows(builder, RowsOffset);
    return SlangTable.EndSlangTable(builder);
  }

  public static void StartSlangTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Slang>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Slang>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SlangTable> EndSlangTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SlangTable>(o);
  }
  public SlangTableT UnPack() {
    var _o = new SlangTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SlangTableT _o) {
    _o.Rows = new List<GDT.SlangT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SlangTable> Pack(FlatBufferBuilder builder, SlangTableT _o) {
    if (_o == null) return default(Offset<GDT.SlangTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Slang>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Slang.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSlangTable(
      builder,
      _Rows);
  }
};

public class SlangTableT
{
  public List<GDT.SlangT> Rows { get; set; }

  public SlangTableT() {
    this.Rows = null;
  }
}

/// Defined by Sound.xlsx
public struct Sound : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Sound GetRootAsSound(ByteBuffer _bb) { return GetRootAsSound(_bb, new Sound()); }
  public static Sound GetRootAsSound(ByteBuffer _bb, Sound obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Sound __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SoundID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SoundName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSoundNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetSoundNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetSoundNameArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.AudioSourceType SoundType { get { int o = __p.__offset(8); return o != 0 ? (GDT.AudioSourceType)__p.bb.Get(o + __p.bb_pos) : GDT.AudioSourceType.AST_Bgm; } }
  public GDT.AudioSourcePositionType SoundPositionType { get { int o = __p.__offset(10); return o != 0 ? (GDT.AudioSourcePositionType)__p.bb.Get(o + __p.bb_pos) : GDT.AudioSourcePositionType.ASPT_Local; } }
  public bool SoundStandAlone { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public float SoundVolume { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SoundPitch { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SoundSpatialBlend { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SoundMinDistance { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float SoundMaxDistance { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GDT.Sound> CreateSound(FlatBufferBuilder builder,
      int SoundID = 0,
      StringOffset SoundNameOffset = default(StringOffset),
      GDT.AudioSourceType SoundType = GDT.AudioSourceType.AST_Bgm,
      GDT.AudioSourcePositionType SoundPositionType = GDT.AudioSourcePositionType.ASPT_Local,
      bool SoundStandAlone = false,
      float SoundVolume = 0.0f,
      float SoundPitch = 0.0f,
      float SoundSpatialBlend = 0.0f,
      float SoundMinDistance = 0.0f,
      float SoundMaxDistance = 0.0f) {
    builder.StartTable(10);
    Sound.AddSoundMaxDistance(builder, SoundMaxDistance);
    Sound.AddSoundMinDistance(builder, SoundMinDistance);
    Sound.AddSoundSpatialBlend(builder, SoundSpatialBlend);
    Sound.AddSoundPitch(builder, SoundPitch);
    Sound.AddSoundVolume(builder, SoundVolume);
    Sound.AddSoundName(builder, SoundNameOffset);
    Sound.AddSoundID(builder, SoundID);
    Sound.AddSoundStandAlone(builder, SoundStandAlone);
    Sound.AddSoundPositionType(builder, SoundPositionType);
    Sound.AddSoundType(builder, SoundType);
    return Sound.EndSound(builder);
  }

  public static void StartSound(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(0, SoundID, 0); }
  public static void AddSoundName(FlatBufferBuilder builder, StringOffset SoundNameOffset) { builder.AddOffset(1, SoundNameOffset.Value, 0); }
  public static void AddSoundType(FlatBufferBuilder builder, GDT.AudioSourceType SoundType) { builder.AddByte(2, (byte)SoundType, 0); }
  public static void AddSoundPositionType(FlatBufferBuilder builder, GDT.AudioSourcePositionType SoundPositionType) { builder.AddByte(3, (byte)SoundPositionType, 0); }
  public static void AddSoundStandAlone(FlatBufferBuilder builder, bool SoundStandAlone) { builder.AddBool(4, SoundStandAlone, false); }
  public static void AddSoundVolume(FlatBufferBuilder builder, float SoundVolume) { builder.AddFloat(5, SoundVolume, 0.0f); }
  public static void AddSoundPitch(FlatBufferBuilder builder, float SoundPitch) { builder.AddFloat(6, SoundPitch, 0.0f); }
  public static void AddSoundSpatialBlend(FlatBufferBuilder builder, float SoundSpatialBlend) { builder.AddFloat(7, SoundSpatialBlend, 0.0f); }
  public static void AddSoundMinDistance(FlatBufferBuilder builder, float SoundMinDistance) { builder.AddFloat(8, SoundMinDistance, 0.0f); }
  public static void AddSoundMaxDistance(FlatBufferBuilder builder, float SoundMaxDistance) { builder.AddFloat(9, SoundMaxDistance, 0.0f); }
  public static Offset<GDT.Sound> EndSound(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Sound>(o);
  }
  public SoundT UnPack() {
    var _o = new SoundT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SoundT _o) {
    _o.SoundID = this.SoundID;
    _o.SoundName = this.SoundName;
    _o.SoundType = this.SoundType;
    _o.SoundPositionType = this.SoundPositionType;
    _o.SoundStandAlone = this.SoundStandAlone;
    _o.SoundVolume = this.SoundVolume;
    _o.SoundPitch = this.SoundPitch;
    _o.SoundSpatialBlend = this.SoundSpatialBlend;
    _o.SoundMinDistance = this.SoundMinDistance;
    _o.SoundMaxDistance = this.SoundMaxDistance;
  }
  public static Offset<GDT.Sound> Pack(FlatBufferBuilder builder, SoundT _o) {
    if (_o == null) return default(Offset<GDT.Sound>);
    var _SoundName = _o.SoundName == null ? default(StringOffset) : builder.CreateString(_o.SoundName);
    return CreateSound(
      builder,
      _o.SoundID,
      _SoundName,
      _o.SoundType,
      _o.SoundPositionType,
      _o.SoundStandAlone,
      _o.SoundVolume,
      _o.SoundPitch,
      _o.SoundSpatialBlend,
      _o.SoundMinDistance,
      _o.SoundMaxDistance);
  }
};

public class SoundT
{
  public int SoundID { get; set; }
  public string SoundName { get; set; }
  public GDT.AudioSourceType SoundType { get; set; }
  public GDT.AudioSourcePositionType SoundPositionType { get; set; }
  public bool SoundStandAlone { get; set; }
  public float SoundVolume { get; set; }
  public float SoundPitch { get; set; }
  public float SoundSpatialBlend { get; set; }
  public float SoundMinDistance { get; set; }
  public float SoundMaxDistance { get; set; }

  public SoundT() {
    this.SoundID = 0;
    this.SoundName = null;
    this.SoundType = GDT.AudioSourceType.AST_Bgm;
    this.SoundPositionType = GDT.AudioSourcePositionType.ASPT_Local;
    this.SoundStandAlone = false;
    this.SoundVolume = 0.0f;
    this.SoundPitch = 0.0f;
    this.SoundSpatialBlend = 0.0f;
    this.SoundMinDistance = 0.0f;
    this.SoundMaxDistance = 0.0f;
  }
}

public struct SoundTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SoundTable GetRootAsSoundTable(ByteBuffer _bb) { return GetRootAsSoundTable(_bb, new SoundTable()); }
  public static SoundTable GetRootAsSoundTable(ByteBuffer _bb, SoundTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SoundTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Sound? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Sound?)(new GDT.Sound()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SoundTable> CreateSoundTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SoundTable.AddRows(builder, RowsOffset);
    return SoundTable.EndSoundTable(builder);
  }

  public static void StartSoundTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Sound>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Sound>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SoundTable> EndSoundTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SoundTable>(o);
  }
  public SoundTableT UnPack() {
    var _o = new SoundTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SoundTableT _o) {
    _o.Rows = new List<GDT.SoundT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SoundTable> Pack(FlatBufferBuilder builder, SoundTableT _o) {
    if (_o == null) return default(Offset<GDT.SoundTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Sound>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Sound.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSoundTable(
      builder,
      _Rows);
  }
};

public class SoundTableT
{
  public List<GDT.SoundT> Rows { get; set; }

  public SoundTableT() {
    this.Rows = null;
  }
}

/// Defined by SwapCoin.xlsx
public struct SwapCoin : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SwapCoin GetRootAsSwapCoin(ByteBuffer _bb) { return GetRootAsSwapCoin(_bb, new SwapCoin()); }
  public static SwapCoin GetRootAsSwapCoin(ByteBuffer _bb, SwapCoin obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SwapCoin __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CoinID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public GDT.SwapCoinType SwapCoinTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.SwapCoinType)__p.bb.Get(o + __p.bb_pos) : GDT.SwapCoinType.SCT_None; } }
  public int Sort { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SwapCoin> CreateSwapCoin(FlatBufferBuilder builder,
      int CoinID = 0,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      GDT.SwapCoinType SwapCoinTypeID = GDT.SwapCoinType.SCT_None,
      int Sort = 0) {
    builder.StartTable(4);
    SwapCoin.AddSort(builder, Sort);
    SwapCoin.AddCoinID(builder, CoinID);
    SwapCoin.AddSwapCoinTypeID(builder, SwapCoinTypeID);
    SwapCoin.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    return SwapCoin.EndSwapCoin(builder);
  }

  public static void StartSwapCoin(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCoinID(FlatBufferBuilder builder, int CoinID) { builder.AddInt(0, CoinID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(1, (byte)CurrencySubTypeID, 0); }
  public static void AddSwapCoinTypeID(FlatBufferBuilder builder, GDT.SwapCoinType SwapCoinTypeID) { builder.AddByte(2, (byte)SwapCoinTypeID, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(3, Sort, 0); }
  public static Offset<GDT.SwapCoin> EndSwapCoin(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SwapCoin>(o);
  }
  public SwapCoinT UnPack() {
    var _o = new SwapCoinT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SwapCoinT _o) {
    _o.CoinID = this.CoinID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.SwapCoinTypeID = this.SwapCoinTypeID;
    _o.Sort = this.Sort;
  }
  public static Offset<GDT.SwapCoin> Pack(FlatBufferBuilder builder, SwapCoinT _o) {
    if (_o == null) return default(Offset<GDT.SwapCoin>);
    return CreateSwapCoin(
      builder,
      _o.CoinID,
      _o.CurrencySubTypeID,
      _o.SwapCoinTypeID,
      _o.Sort);
  }
};

public class SwapCoinT
{
  public int CoinID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public GDT.SwapCoinType SwapCoinTypeID { get; set; }
  public int Sort { get; set; }

  public SwapCoinT() {
    this.CoinID = 0;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.SwapCoinTypeID = GDT.SwapCoinType.SCT_None;
    this.Sort = 0;
  }
}

public struct SwapCoinTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SwapCoinTable GetRootAsSwapCoinTable(ByteBuffer _bb) { return GetRootAsSwapCoinTable(_bb, new SwapCoinTable()); }
  public static SwapCoinTable GetRootAsSwapCoinTable(ByteBuffer _bb, SwapCoinTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SwapCoinTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SwapCoin? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SwapCoin?)(new GDT.SwapCoin()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SwapCoinTable> CreateSwapCoinTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SwapCoinTable.AddRows(builder, RowsOffset);
    return SwapCoinTable.EndSwapCoinTable(builder);
  }

  public static void StartSwapCoinTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SwapCoin>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SwapCoin>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SwapCoinTable> EndSwapCoinTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SwapCoinTable>(o);
  }
  public SwapCoinTableT UnPack() {
    var _o = new SwapCoinTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SwapCoinTableT _o) {
    _o.Rows = new List<GDT.SwapCoinT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SwapCoinTable> Pack(FlatBufferBuilder builder, SwapCoinTableT _o) {
    if (_o == null) return default(Offset<GDT.SwapCoinTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SwapCoin>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SwapCoin.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSwapCoinTable(
      builder,
      _Rows);
  }
};

public class SwapCoinTableT
{
  public List<GDT.SwapCoinT> Rows { get; set; }

  public SwapCoinTableT() {
    this.Rows = null;
  }
}

/// Defined by SwapCoin.xlsx
public struct SwapCurrency : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SwapCurrency GetRootAsSwapCurrency(ByteBuffer _bb) { return GetRootAsSwapCurrency(_bb, new SwapCurrency()); }
  public static SwapCurrency GetRootAsSwapCurrency(ByteBuffer _bb, SwapCurrency obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SwapCurrency __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.CurrencySubType CurrencyID { get { int o = __p.__offset(4); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int Sort { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SwapCurrency> CreateSwapCurrency(FlatBufferBuilder builder,
      GDT.CurrencySubType CurrencyID = GDT.CurrencySubType.CST_None,
      int Sort = 0) {
    builder.StartTable(2);
    SwapCurrency.AddSort(builder, Sort);
    SwapCurrency.AddCurrencyID(builder, CurrencyID);
    return SwapCurrency.EndSwapCurrency(builder);
  }

  public static void StartSwapCurrency(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddCurrencyID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencyID) { builder.AddByte(0, (byte)CurrencyID, 0); }
  public static void AddSort(FlatBufferBuilder builder, int Sort) { builder.AddInt(1, Sort, 0); }
  public static Offset<GDT.SwapCurrency> EndSwapCurrency(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SwapCurrency>(o);
  }
  public SwapCurrencyT UnPack() {
    var _o = new SwapCurrencyT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SwapCurrencyT _o) {
    _o.CurrencyID = this.CurrencyID;
    _o.Sort = this.Sort;
  }
  public static Offset<GDT.SwapCurrency> Pack(FlatBufferBuilder builder, SwapCurrencyT _o) {
    if (_o == null) return default(Offset<GDT.SwapCurrency>);
    return CreateSwapCurrency(
      builder,
      _o.CurrencyID,
      _o.Sort);
  }
};

public class SwapCurrencyT
{
  public GDT.CurrencySubType CurrencyID { get; set; }
  public int Sort { get; set; }

  public SwapCurrencyT() {
    this.CurrencyID = GDT.CurrencySubType.CST_None;
    this.Sort = 0;
  }
}

public struct SwapCurrencyTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SwapCurrencyTable GetRootAsSwapCurrencyTable(ByteBuffer _bb) { return GetRootAsSwapCurrencyTable(_bb, new SwapCurrencyTable()); }
  public static SwapCurrencyTable GetRootAsSwapCurrencyTable(ByteBuffer _bb, SwapCurrencyTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SwapCurrencyTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SwapCurrency? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SwapCurrency?)(new GDT.SwapCurrency()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SwapCurrencyTable> CreateSwapCurrencyTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SwapCurrencyTable.AddRows(builder, RowsOffset);
    return SwapCurrencyTable.EndSwapCurrencyTable(builder);
  }

  public static void StartSwapCurrencyTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SwapCurrency>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SwapCurrency>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SwapCurrencyTable> EndSwapCurrencyTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SwapCurrencyTable>(o);
  }
  public SwapCurrencyTableT UnPack() {
    var _o = new SwapCurrencyTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SwapCurrencyTableT _o) {
    _o.Rows = new List<GDT.SwapCurrencyT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SwapCurrencyTable> Pack(FlatBufferBuilder builder, SwapCurrencyTableT _o) {
    if (_o == null) return default(Offset<GDT.SwapCurrencyTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SwapCurrency>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SwapCurrency.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSwapCurrencyTable(
      builder,
      _Rows);
  }
};

public class SwapCurrencyTableT
{
  public List<GDT.SwapCurrencyT> Rows { get; set; }

  public SwapCurrencyTableT() {
    this.Rows = null;
  }
}

/// Defined by SystemMessage.xlsx
public struct SystemMessage : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SystemMessage GetRootAsSystemMessage(ByteBuffer _bb) { return GetRootAsSystemMessage(_bb, new SystemMessage()); }
  public static SystemMessage GetRootAsSystemMessage(ByteBuffer _bb, SystemMessage obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SystemMessage __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string SystemMsgText { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSystemMsgTextBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetSystemMsgTextBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetSystemMsgTextArray() { return __p.__vector_as_array<byte>(4); }
  public GDT.SystemMsgType SystemMsgType { get { int o = __p.__offset(6); return o != 0 ? (GDT.SystemMsgType)__p.bb.Get(o + __p.bb_pos) : GDT.SystemMsgType.SMT_NONE; } }
  public int SystemMsgOutputTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool OutputChatting { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool OverWrite { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int SoundID { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.SystemMessage> CreateSystemMessage(FlatBufferBuilder builder,
      StringOffset SystemMsgTextOffset = default(StringOffset),
      GDT.SystemMsgType SystemMsgType = GDT.SystemMsgType.SMT_NONE,
      int SystemMsgOutputTime = 0,
      bool OutputChatting = false,
      bool OverWrite = false,
      int SoundID = 0) {
    builder.StartTable(6);
    SystemMessage.AddSoundID(builder, SoundID);
    SystemMessage.AddSystemMsgOutputTime(builder, SystemMsgOutputTime);
    SystemMessage.AddSystemMsgText(builder, SystemMsgTextOffset);
    SystemMessage.AddOverWrite(builder, OverWrite);
    SystemMessage.AddOutputChatting(builder, OutputChatting);
    SystemMessage.AddSystemMsgType(builder, SystemMsgType);
    return SystemMessage.EndSystemMessage(builder);
  }

  public static void StartSystemMessage(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddSystemMsgText(FlatBufferBuilder builder, StringOffset SystemMsgTextOffset) { builder.AddOffset(0, SystemMsgTextOffset.Value, 0); }
  public static void AddSystemMsgType(FlatBufferBuilder builder, GDT.SystemMsgType SystemMsgType) { builder.AddByte(1, (byte)SystemMsgType, 0); }
  public static void AddSystemMsgOutputTime(FlatBufferBuilder builder, int SystemMsgOutputTime) { builder.AddInt(2, SystemMsgOutputTime, 0); }
  public static void AddOutputChatting(FlatBufferBuilder builder, bool OutputChatting) { builder.AddBool(3, OutputChatting, false); }
  public static void AddOverWrite(FlatBufferBuilder builder, bool OverWrite) { builder.AddBool(4, OverWrite, false); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(5, SoundID, 0); }
  public static Offset<GDT.SystemMessage> EndSystemMessage(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SystemMessage>(o);
  }
  public SystemMessageT UnPack() {
    var _o = new SystemMessageT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SystemMessageT _o) {
    _o.SystemMsgText = this.SystemMsgText;
    _o.SystemMsgType = this.SystemMsgType;
    _o.SystemMsgOutputTime = this.SystemMsgOutputTime;
    _o.OutputChatting = this.OutputChatting;
    _o.OverWrite = this.OverWrite;
    _o.SoundID = this.SoundID;
  }
  public static Offset<GDT.SystemMessage> Pack(FlatBufferBuilder builder, SystemMessageT _o) {
    if (_o == null) return default(Offset<GDT.SystemMessage>);
    var _SystemMsgText = _o.SystemMsgText == null ? default(StringOffset) : builder.CreateString(_o.SystemMsgText);
    return CreateSystemMessage(
      builder,
      _SystemMsgText,
      _o.SystemMsgType,
      _o.SystemMsgOutputTime,
      _o.OutputChatting,
      _o.OverWrite,
      _o.SoundID);
  }
};

public class SystemMessageT
{
  public string SystemMsgText { get; set; }
  public GDT.SystemMsgType SystemMsgType { get; set; }
  public int SystemMsgOutputTime { get; set; }
  public bool OutputChatting { get; set; }
  public bool OverWrite { get; set; }
  public int SoundID { get; set; }

  public SystemMessageT() {
    this.SystemMsgText = null;
    this.SystemMsgType = GDT.SystemMsgType.SMT_NONE;
    this.SystemMsgOutputTime = 0;
    this.OutputChatting = false;
    this.OverWrite = false;
    this.SoundID = 0;
  }
}

public struct SystemMessageTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static SystemMessageTable GetRootAsSystemMessageTable(ByteBuffer _bb) { return GetRootAsSystemMessageTable(_bb, new SystemMessageTable()); }
  public static SystemMessageTable GetRootAsSystemMessageTable(ByteBuffer _bb, SystemMessageTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SystemMessageTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.SystemMessage? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.SystemMessage?)(new GDT.SystemMessage()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.SystemMessageTable> CreateSystemMessageTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    SystemMessageTable.AddRows(builder, RowsOffset);
    return SystemMessageTable.EndSystemMessageTable(builder);
  }

  public static void StartSystemMessageTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.SystemMessage>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.SystemMessage>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.SystemMessageTable> EndSystemMessageTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.SystemMessageTable>(o);
  }
  public SystemMessageTableT UnPack() {
    var _o = new SystemMessageTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(SystemMessageTableT _o) {
    _o.Rows = new List<GDT.SystemMessageT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.SystemMessageTable> Pack(FlatBufferBuilder builder, SystemMessageTableT _o) {
    if (_o == null) return default(Offset<GDT.SystemMessageTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.SystemMessage>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.SystemMessage.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateSystemMessageTable(
      builder,
      _Rows);
  }
};

public class SystemMessageTableT
{
  public List<GDT.SystemMessageT> Rows { get; set; }

  public SystemMessageTableT() {
    this.Rows = null;
  }
}

/// Defined by Tier.xlsx
public struct Tier : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Tier GetRootAsTier(ByteBuffer _bb) { return GetRootAsTier(_bb, new Tier()); }
  public static Tier GetRootAsTier(ByteBuffer _bb, Tier obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Tier __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TierType TierTypeID { get { int o = __p.__offset(4); return o != 0 ? (GDT.TierType)__p.bb.Get(o + __p.bb_pos) : GDT.TierType.TT_None; } }
  public int TierGrade { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IsOpen { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public GDT.ApplicationType ApplicationTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.ApplicationType)__p.bb.Get(o + __p.bb_pos) : GDT.ApplicationType.AT_Account; } }
  public long TotalExp { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public int GradeupEffect { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItemID { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItemCnt { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string IconResourceName { get { int o = __p.__offset(20); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIconResourceNameBytes() { return __p.__vector_as_span<byte>(20, 1); }
#else
  public ArraySegment<byte>? GetIconResourceNameBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public byte[] GetIconResourceNameArray() { return __p.__vector_as_array<byte>(20); }
  public int IconEffectResourceName { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int HoldemFeeSaleValue { get { int o = __p.__offset(24); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FutureHunterFeeSaleValue { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int CoinFlipFeeSaleValue { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SpendingAdd { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.Tier> CreateTier(FlatBufferBuilder builder,
      GDT.TierType TierTypeID = GDT.TierType.TT_None,
      int TierGrade = 0,
      bool IsOpen = false,
      GDT.ApplicationType ApplicationTypeID = GDT.ApplicationType.AT_Account,
      long TotalExp = 0,
      int GradeupEffect = 0,
      int RewardItemID = 0,
      int RewardItemCnt = 0,
      StringOffset IconResourceNameOffset = default(StringOffset),
      int IconEffectResourceName = 0,
      int HoldemFeeSaleValue = 0,
      int FutureHunterFeeSaleValue = 0,
      int CoinFlipFeeSaleValue = 0,
      int SpendingAdd = 0) {
    builder.StartTable(14);
    Tier.AddTotalExp(builder, TotalExp);
    Tier.AddSpendingAdd(builder, SpendingAdd);
    Tier.AddCoinFlipFeeSaleValue(builder, CoinFlipFeeSaleValue);
    Tier.AddFutureHunterFeeSaleValue(builder, FutureHunterFeeSaleValue);
    Tier.AddHoldemFeeSaleValue(builder, HoldemFeeSaleValue);
    Tier.AddIconEffectResourceName(builder, IconEffectResourceName);
    Tier.AddIconResourceName(builder, IconResourceNameOffset);
    Tier.AddRewardItemCnt(builder, RewardItemCnt);
    Tier.AddRewardItemID(builder, RewardItemID);
    Tier.AddGradeupEffect(builder, GradeupEffect);
    Tier.AddTierGrade(builder, TierGrade);
    Tier.AddApplicationTypeID(builder, ApplicationTypeID);
    Tier.AddIsOpen(builder, IsOpen);
    Tier.AddTierTypeID(builder, TierTypeID);
    return Tier.EndTier(builder);
  }

  public static void StartTier(FlatBufferBuilder builder) { builder.StartTable(14); }
  public static void AddTierTypeID(FlatBufferBuilder builder, GDT.TierType TierTypeID) { builder.AddByte(0, (byte)TierTypeID, 0); }
  public static void AddTierGrade(FlatBufferBuilder builder, int TierGrade) { builder.AddInt(1, TierGrade, 0); }
  public static void AddIsOpen(FlatBufferBuilder builder, bool IsOpen) { builder.AddBool(2, IsOpen, false); }
  public static void AddApplicationTypeID(FlatBufferBuilder builder, GDT.ApplicationType ApplicationTypeID) { builder.AddByte(3, (byte)ApplicationTypeID, 0); }
  public static void AddTotalExp(FlatBufferBuilder builder, long TotalExp) { builder.AddLong(4, TotalExp, 0); }
  public static void AddGradeupEffect(FlatBufferBuilder builder, int GradeupEffect) { builder.AddInt(5, GradeupEffect, 0); }
  public static void AddRewardItemID(FlatBufferBuilder builder, int RewardItemID) { builder.AddInt(6, RewardItemID, 0); }
  public static void AddRewardItemCnt(FlatBufferBuilder builder, int RewardItemCnt) { builder.AddInt(7, RewardItemCnt, 0); }
  public static void AddIconResourceName(FlatBufferBuilder builder, StringOffset IconResourceNameOffset) { builder.AddOffset(8, IconResourceNameOffset.Value, 0); }
  public static void AddIconEffectResourceName(FlatBufferBuilder builder, int IconEffectResourceName) { builder.AddInt(9, IconEffectResourceName, 0); }
  public static void AddHoldemFeeSaleValue(FlatBufferBuilder builder, int HoldemFeeSaleValue) { builder.AddInt(10, HoldemFeeSaleValue, 0); }
  public static void AddFutureHunterFeeSaleValue(FlatBufferBuilder builder, int FutureHunterFeeSaleValue) { builder.AddInt(11, FutureHunterFeeSaleValue, 0); }
  public static void AddCoinFlipFeeSaleValue(FlatBufferBuilder builder, int CoinFlipFeeSaleValue) { builder.AddInt(12, CoinFlipFeeSaleValue, 0); }
  public static void AddSpendingAdd(FlatBufferBuilder builder, int SpendingAdd) { builder.AddInt(13, SpendingAdd, 0); }
  public static Offset<GDT.Tier> EndTier(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.Tier>(o);
  }
  public TierT UnPack() {
    var _o = new TierT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TierT _o) {
    _o.TierTypeID = this.TierTypeID;
    _o.TierGrade = this.TierGrade;
    _o.IsOpen = this.IsOpen;
    _o.ApplicationTypeID = this.ApplicationTypeID;
    _o.TotalExp = this.TotalExp;
    _o.GradeupEffect = this.GradeupEffect;
    _o.RewardItemID = this.RewardItemID;
    _o.RewardItemCnt = this.RewardItemCnt;
    _o.IconResourceName = this.IconResourceName;
    _o.IconEffectResourceName = this.IconEffectResourceName;
    _o.HoldemFeeSaleValue = this.HoldemFeeSaleValue;
    _o.FutureHunterFeeSaleValue = this.FutureHunterFeeSaleValue;
    _o.CoinFlipFeeSaleValue = this.CoinFlipFeeSaleValue;
    _o.SpendingAdd = this.SpendingAdd;
  }
  public static Offset<GDT.Tier> Pack(FlatBufferBuilder builder, TierT _o) {
    if (_o == null) return default(Offset<GDT.Tier>);
    var _IconResourceName = _o.IconResourceName == null ? default(StringOffset) : builder.CreateString(_o.IconResourceName);
    return CreateTier(
      builder,
      _o.TierTypeID,
      _o.TierGrade,
      _o.IsOpen,
      _o.ApplicationTypeID,
      _o.TotalExp,
      _o.GradeupEffect,
      _o.RewardItemID,
      _o.RewardItemCnt,
      _IconResourceName,
      _o.IconEffectResourceName,
      _o.HoldemFeeSaleValue,
      _o.FutureHunterFeeSaleValue,
      _o.CoinFlipFeeSaleValue,
      _o.SpendingAdd);
  }
};

public class TierT
{
  public GDT.TierType TierTypeID { get; set; }
  public int TierGrade { get; set; }
  public bool IsOpen { get; set; }
  public GDT.ApplicationType ApplicationTypeID { get; set; }
  public long TotalExp { get; set; }
  public int GradeupEffect { get; set; }
  public int RewardItemID { get; set; }
  public int RewardItemCnt { get; set; }
  public string IconResourceName { get; set; }
  public int IconEffectResourceName { get; set; }
  public int HoldemFeeSaleValue { get; set; }
  public int FutureHunterFeeSaleValue { get; set; }
  public int CoinFlipFeeSaleValue { get; set; }
  public int SpendingAdd { get; set; }

  public TierT() {
    this.TierTypeID = GDT.TierType.TT_None;
    this.TierGrade = 0;
    this.IsOpen = false;
    this.ApplicationTypeID = GDT.ApplicationType.AT_Account;
    this.TotalExp = 0;
    this.GradeupEffect = 0;
    this.RewardItemID = 0;
    this.RewardItemCnt = 0;
    this.IconResourceName = null;
    this.IconEffectResourceName = 0;
    this.HoldemFeeSaleValue = 0;
    this.FutureHunterFeeSaleValue = 0;
    this.CoinFlipFeeSaleValue = 0;
    this.SpendingAdd = 0;
  }
}

public struct TierTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TierTable GetRootAsTierTable(ByteBuffer _bb) { return GetRootAsTierTable(_bb, new TierTable()); }
  public static TierTable GetRootAsTierTable(ByteBuffer _bb, TierTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TierTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.Tier? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.Tier?)(new GDT.Tier()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TierTable> CreateTierTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TierTable.AddRows(builder, RowsOffset);
    return TierTable.EndTierTable(builder);
  }

  public static void StartTierTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.Tier>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.Tier>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TierTable> EndTierTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TierTable>(o);
  }
  public TierTableT UnPack() {
    var _o = new TierTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TierTableT _o) {
    _o.Rows = new List<GDT.TierT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TierTable> Pack(FlatBufferBuilder builder, TierTableT _o) {
    if (_o == null) return default(Offset<GDT.TierTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.Tier>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.Tier.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTierTable(
      builder,
      _Rows);
  }
};

public class TierTableT
{
  public List<GDT.TierT> Rows { get; set; }

  public TierTableT() {
    this.Rows = null;
  }
}

/// Defined by TokenAddress.xlsx
public struct TokenAddress : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TokenAddress GetRootAsTokenAddress(ByteBuffer _bb) { return GetRootAsTokenAddress(_bb, new TokenAddress()); }
  public static TokenAddress GetRootAsTokenAddress(ByteBuffer _bb, TokenAddress obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TokenAddress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string TokenAddressID { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenAddressIDBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetTokenAddressIDBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetTokenAddressIDArray() { return __p.__vector_as_array<byte>(4); }
  public GDT.TokenAddressType TokenAddressTypeID { get { int o = __p.__offset(6); return o != 0 ? (GDT.TokenAddressType)__p.bb.Get(o + __p.bb_pos) : GDT.TokenAddressType.TAT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public bool StackCheck { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.TokenAddress> CreateTokenAddress(FlatBufferBuilder builder,
      StringOffset TokenAddressIDOffset = default(StringOffset),
      GDT.TokenAddressType TokenAddressTypeID = GDT.TokenAddressType.TAT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      bool StackCheck = false) {
    builder.StartTable(4);
    TokenAddress.AddTokenAddressID(builder, TokenAddressIDOffset);
    TokenAddress.AddStackCheck(builder, StackCheck);
    TokenAddress.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    TokenAddress.AddTokenAddressTypeID(builder, TokenAddressTypeID);
    return TokenAddress.EndTokenAddress(builder);
  }

  public static void StartTokenAddress(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTokenAddressID(FlatBufferBuilder builder, StringOffset TokenAddressIDOffset) { builder.AddOffset(0, TokenAddressIDOffset.Value, 0); }
  public static void AddTokenAddressTypeID(FlatBufferBuilder builder, GDT.TokenAddressType TokenAddressTypeID) { builder.AddByte(1, (byte)TokenAddressTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(2, (byte)CurrencySubTypeID, 0); }
  public static void AddStackCheck(FlatBufferBuilder builder, bool StackCheck) { builder.AddBool(3, StackCheck, false); }
  public static Offset<GDT.TokenAddress> EndTokenAddress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TokenAddress>(o);
  }
  public TokenAddressT UnPack() {
    var _o = new TokenAddressT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TokenAddressT _o) {
    _o.TokenAddressID = this.TokenAddressID;
    _o.TokenAddressTypeID = this.TokenAddressTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.StackCheck = this.StackCheck;
  }
  public static Offset<GDT.TokenAddress> Pack(FlatBufferBuilder builder, TokenAddressT _o) {
    if (_o == null) return default(Offset<GDT.TokenAddress>);
    var _TokenAddressID = _o.TokenAddressID == null ? default(StringOffset) : builder.CreateString(_o.TokenAddressID);
    return CreateTokenAddress(
      builder,
      _TokenAddressID,
      _o.TokenAddressTypeID,
      _o.CurrencySubTypeID,
      _o.StackCheck);
  }
};

public class TokenAddressT
{
  public string TokenAddressID { get; set; }
  public GDT.TokenAddressType TokenAddressTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public bool StackCheck { get; set; }

  public TokenAddressT() {
    this.TokenAddressID = null;
    this.TokenAddressTypeID = GDT.TokenAddressType.TAT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.StackCheck = false;
  }
}

public struct TokenAddressTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TokenAddressTable GetRootAsTokenAddressTable(ByteBuffer _bb) { return GetRootAsTokenAddressTable(_bb, new TokenAddressTable()); }
  public static TokenAddressTable GetRootAsTokenAddressTable(ByteBuffer _bb, TokenAddressTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TokenAddressTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TokenAddress? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TokenAddress?)(new GDT.TokenAddress()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TokenAddressTable> CreateTokenAddressTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TokenAddressTable.AddRows(builder, RowsOffset);
    return TokenAddressTable.EndTokenAddressTable(builder);
  }

  public static void StartTokenAddressTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TokenAddress>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TokenAddress>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TokenAddressTable> EndTokenAddressTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TokenAddressTable>(o);
  }
  public TokenAddressTableT UnPack() {
    var _o = new TokenAddressTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TokenAddressTableT _o) {
    _o.Rows = new List<GDT.TokenAddressT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TokenAddressTable> Pack(FlatBufferBuilder builder, TokenAddressTableT _o) {
    if (_o == null) return default(Offset<GDT.TokenAddressTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TokenAddress>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TokenAddress.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTokenAddressTable(
      builder,
      _Rows);
  }
};

public class TokenAddressTableT
{
  public List<GDT.TokenAddressT> Rows { get; set; }

  public TokenAddressTableT() {
    this.Rows = null;
  }
}

/// Defined by TokenAddress.xlsx
public struct DevTokenAddress : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DevTokenAddress GetRootAsDevTokenAddress(ByteBuffer _bb) { return GetRootAsDevTokenAddress(_bb, new DevTokenAddress()); }
  public static DevTokenAddress GetRootAsDevTokenAddress(ByteBuffer _bb, DevTokenAddress obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DevTokenAddress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TokenID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TokenAddressID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenAddressIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTokenAddressIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTokenAddressIDArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.TokenAddressType TokenAddressTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.TokenAddressType)__p.bb.Get(o + __p.bb_pos) : GDT.TokenAddressType.TAT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public bool StackCheck { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.DevTokenAddress> CreateDevTokenAddress(FlatBufferBuilder builder,
      int TokenID = 0,
      StringOffset TokenAddressIDOffset = default(StringOffset),
      GDT.TokenAddressType TokenAddressTypeID = GDT.TokenAddressType.TAT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      bool StackCheck = false) {
    builder.StartTable(5);
    DevTokenAddress.AddTokenAddressID(builder, TokenAddressIDOffset);
    DevTokenAddress.AddTokenID(builder, TokenID);
    DevTokenAddress.AddStackCheck(builder, StackCheck);
    DevTokenAddress.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    DevTokenAddress.AddTokenAddressTypeID(builder, TokenAddressTypeID);
    return DevTokenAddress.EndDevTokenAddress(builder);
  }

  public static void StartDevTokenAddress(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTokenID(FlatBufferBuilder builder, int TokenID) { builder.AddInt(0, TokenID, 0); }
  public static void AddTokenAddressID(FlatBufferBuilder builder, StringOffset TokenAddressIDOffset) { builder.AddOffset(1, TokenAddressIDOffset.Value, 0); }
  public static void AddTokenAddressTypeID(FlatBufferBuilder builder, GDT.TokenAddressType TokenAddressTypeID) { builder.AddByte(2, (byte)TokenAddressTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(3, (byte)CurrencySubTypeID, 0); }
  public static void AddStackCheck(FlatBufferBuilder builder, bool StackCheck) { builder.AddBool(4, StackCheck, false); }
  public static Offset<GDT.DevTokenAddress> EndDevTokenAddress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.DevTokenAddress>(o);
  }
  public DevTokenAddressT UnPack() {
    var _o = new DevTokenAddressT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DevTokenAddressT _o) {
    _o.TokenID = this.TokenID;
    _o.TokenAddressID = this.TokenAddressID;
    _o.TokenAddressTypeID = this.TokenAddressTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.StackCheck = this.StackCheck;
  }
  public static Offset<GDT.DevTokenAddress> Pack(FlatBufferBuilder builder, DevTokenAddressT _o) {
    if (_o == null) return default(Offset<GDT.DevTokenAddress>);
    var _TokenAddressID = _o.TokenAddressID == null ? default(StringOffset) : builder.CreateString(_o.TokenAddressID);
    return CreateDevTokenAddress(
      builder,
      _o.TokenID,
      _TokenAddressID,
      _o.TokenAddressTypeID,
      _o.CurrencySubTypeID,
      _o.StackCheck);
  }
};

public class DevTokenAddressT
{
  public int TokenID { get; set; }
  public string TokenAddressID { get; set; }
  public GDT.TokenAddressType TokenAddressTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public bool StackCheck { get; set; }

  public DevTokenAddressT() {
    this.TokenID = 0;
    this.TokenAddressID = null;
    this.TokenAddressTypeID = GDT.TokenAddressType.TAT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.StackCheck = false;
  }
}

public struct DevTokenAddressTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static DevTokenAddressTable GetRootAsDevTokenAddressTable(ByteBuffer _bb) { return GetRootAsDevTokenAddressTable(_bb, new DevTokenAddressTable()); }
  public static DevTokenAddressTable GetRootAsDevTokenAddressTable(ByteBuffer _bb, DevTokenAddressTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DevTokenAddressTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.DevTokenAddress? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.DevTokenAddress?)(new GDT.DevTokenAddress()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.DevTokenAddressTable> CreateDevTokenAddressTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DevTokenAddressTable.AddRows(builder, RowsOffset);
    return DevTokenAddressTable.EndDevTokenAddressTable(builder);
  }

  public static void StartDevTokenAddressTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.DevTokenAddress>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.DevTokenAddress>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.DevTokenAddressTable> EndDevTokenAddressTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.DevTokenAddressTable>(o);
  }
  public DevTokenAddressTableT UnPack() {
    var _o = new DevTokenAddressTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DevTokenAddressTableT _o) {
    _o.Rows = new List<GDT.DevTokenAddressT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.DevTokenAddressTable> Pack(FlatBufferBuilder builder, DevTokenAddressTableT _o) {
    if (_o == null) return default(Offset<GDT.DevTokenAddressTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.DevTokenAddress>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.DevTokenAddress.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateDevTokenAddressTable(
      builder,
      _Rows);
  }
};

public class DevTokenAddressTableT
{
  public List<GDT.DevTokenAddressT> Rows { get; set; }

  public DevTokenAddressTableT() {
    this.Rows = null;
  }
}

/// Defined by TokenAddress.xlsx
public struct QATokenAddress : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QATokenAddress GetRootAsQATokenAddress(ByteBuffer _bb) { return GetRootAsQATokenAddress(_bb, new QATokenAddress()); }
  public static QATokenAddress GetRootAsQATokenAddress(ByteBuffer _bb, QATokenAddress obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QATokenAddress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TokenID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TokenAddressID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenAddressIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTokenAddressIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTokenAddressIDArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.TokenAddressType TokenAddressTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.TokenAddressType)__p.bb.Get(o + __p.bb_pos) : GDT.TokenAddressType.TAT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public bool StackCheck { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.QATokenAddress> CreateQATokenAddress(FlatBufferBuilder builder,
      int TokenID = 0,
      StringOffset TokenAddressIDOffset = default(StringOffset),
      GDT.TokenAddressType TokenAddressTypeID = GDT.TokenAddressType.TAT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      bool StackCheck = false) {
    builder.StartTable(5);
    QATokenAddress.AddTokenAddressID(builder, TokenAddressIDOffset);
    QATokenAddress.AddTokenID(builder, TokenID);
    QATokenAddress.AddStackCheck(builder, StackCheck);
    QATokenAddress.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    QATokenAddress.AddTokenAddressTypeID(builder, TokenAddressTypeID);
    return QATokenAddress.EndQATokenAddress(builder);
  }

  public static void StartQATokenAddress(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTokenID(FlatBufferBuilder builder, int TokenID) { builder.AddInt(0, TokenID, 0); }
  public static void AddTokenAddressID(FlatBufferBuilder builder, StringOffset TokenAddressIDOffset) { builder.AddOffset(1, TokenAddressIDOffset.Value, 0); }
  public static void AddTokenAddressTypeID(FlatBufferBuilder builder, GDT.TokenAddressType TokenAddressTypeID) { builder.AddByte(2, (byte)TokenAddressTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(3, (byte)CurrencySubTypeID, 0); }
  public static void AddStackCheck(FlatBufferBuilder builder, bool StackCheck) { builder.AddBool(4, StackCheck, false); }
  public static Offset<GDT.QATokenAddress> EndQATokenAddress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QATokenAddress>(o);
  }
  public QATokenAddressT UnPack() {
    var _o = new QATokenAddressT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QATokenAddressT _o) {
    _o.TokenID = this.TokenID;
    _o.TokenAddressID = this.TokenAddressID;
    _o.TokenAddressTypeID = this.TokenAddressTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.StackCheck = this.StackCheck;
  }
  public static Offset<GDT.QATokenAddress> Pack(FlatBufferBuilder builder, QATokenAddressT _o) {
    if (_o == null) return default(Offset<GDT.QATokenAddress>);
    var _TokenAddressID = _o.TokenAddressID == null ? default(StringOffset) : builder.CreateString(_o.TokenAddressID);
    return CreateQATokenAddress(
      builder,
      _o.TokenID,
      _TokenAddressID,
      _o.TokenAddressTypeID,
      _o.CurrencySubTypeID,
      _o.StackCheck);
  }
};

public class QATokenAddressT
{
  public int TokenID { get; set; }
  public string TokenAddressID { get; set; }
  public GDT.TokenAddressType TokenAddressTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public bool StackCheck { get; set; }

  public QATokenAddressT() {
    this.TokenID = 0;
    this.TokenAddressID = null;
    this.TokenAddressTypeID = GDT.TokenAddressType.TAT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.StackCheck = false;
  }
}

public struct QATokenAddressTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static QATokenAddressTable GetRootAsQATokenAddressTable(ByteBuffer _bb) { return GetRootAsQATokenAddressTable(_bb, new QATokenAddressTable()); }
  public static QATokenAddressTable GetRootAsQATokenAddressTable(ByteBuffer _bb, QATokenAddressTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public QATokenAddressTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.QATokenAddress? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.QATokenAddress?)(new GDT.QATokenAddress()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.QATokenAddressTable> CreateQATokenAddressTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    QATokenAddressTable.AddRows(builder, RowsOffset);
    return QATokenAddressTable.EndQATokenAddressTable(builder);
  }

  public static void StartQATokenAddressTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.QATokenAddress>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.QATokenAddress>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.QATokenAddressTable> EndQATokenAddressTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.QATokenAddressTable>(o);
  }
  public QATokenAddressTableT UnPack() {
    var _o = new QATokenAddressTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(QATokenAddressTableT _o) {
    _o.Rows = new List<GDT.QATokenAddressT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.QATokenAddressTable> Pack(FlatBufferBuilder builder, QATokenAddressTableT _o) {
    if (_o == null) return default(Offset<GDT.QATokenAddressTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.QATokenAddress>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.QATokenAddress.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateQATokenAddressTable(
      builder,
      _Rows);
  }
};

public class QATokenAddressTableT
{
  public List<GDT.QATokenAddressT> Rows { get; set; }

  public QATokenAddressTableT() {
    this.Rows = null;
  }
}

/// Defined by TokenAddress.xlsx
public struct ProductionTokenAddress : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ProductionTokenAddress GetRootAsProductionTokenAddress(ByteBuffer _bb) { return GetRootAsProductionTokenAddress(_bb, new ProductionTokenAddress()); }
  public static ProductionTokenAddress GetRootAsProductionTokenAddress(ByteBuffer _bb, ProductionTokenAddress obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProductionTokenAddress __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TokenID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string TokenAddressID { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetTokenAddressIDBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetTokenAddressIDBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetTokenAddressIDArray() { return __p.__vector_as_array<byte>(6); }
  public GDT.TokenAddressType TokenAddressTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.TokenAddressType)__p.bb.Get(o + __p.bb_pos) : GDT.TokenAddressType.TAT_None; } }
  public GDT.CurrencySubType CurrencySubTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public bool StackCheck { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<GDT.ProductionTokenAddress> CreateProductionTokenAddress(FlatBufferBuilder builder,
      int TokenID = 0,
      StringOffset TokenAddressIDOffset = default(StringOffset),
      GDT.TokenAddressType TokenAddressTypeID = GDT.TokenAddressType.TAT_None,
      GDT.CurrencySubType CurrencySubTypeID = GDT.CurrencySubType.CST_None,
      bool StackCheck = false) {
    builder.StartTable(5);
    ProductionTokenAddress.AddTokenAddressID(builder, TokenAddressIDOffset);
    ProductionTokenAddress.AddTokenID(builder, TokenID);
    ProductionTokenAddress.AddStackCheck(builder, StackCheck);
    ProductionTokenAddress.AddCurrencySubTypeID(builder, CurrencySubTypeID);
    ProductionTokenAddress.AddTokenAddressTypeID(builder, TokenAddressTypeID);
    return ProductionTokenAddress.EndProductionTokenAddress(builder);
  }

  public static void StartProductionTokenAddress(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddTokenID(FlatBufferBuilder builder, int TokenID) { builder.AddInt(0, TokenID, 0); }
  public static void AddTokenAddressID(FlatBufferBuilder builder, StringOffset TokenAddressIDOffset) { builder.AddOffset(1, TokenAddressIDOffset.Value, 0); }
  public static void AddTokenAddressTypeID(FlatBufferBuilder builder, GDT.TokenAddressType TokenAddressTypeID) { builder.AddByte(2, (byte)TokenAddressTypeID, 0); }
  public static void AddCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType CurrencySubTypeID) { builder.AddByte(3, (byte)CurrencySubTypeID, 0); }
  public static void AddStackCheck(FlatBufferBuilder builder, bool StackCheck) { builder.AddBool(4, StackCheck, false); }
  public static Offset<GDT.ProductionTokenAddress> EndProductionTokenAddress(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ProductionTokenAddress>(o);
  }
  public ProductionTokenAddressT UnPack() {
    var _o = new ProductionTokenAddressT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProductionTokenAddressT _o) {
    _o.TokenID = this.TokenID;
    _o.TokenAddressID = this.TokenAddressID;
    _o.TokenAddressTypeID = this.TokenAddressTypeID;
    _o.CurrencySubTypeID = this.CurrencySubTypeID;
    _o.StackCheck = this.StackCheck;
  }
  public static Offset<GDT.ProductionTokenAddress> Pack(FlatBufferBuilder builder, ProductionTokenAddressT _o) {
    if (_o == null) return default(Offset<GDT.ProductionTokenAddress>);
    var _TokenAddressID = _o.TokenAddressID == null ? default(StringOffset) : builder.CreateString(_o.TokenAddressID);
    return CreateProductionTokenAddress(
      builder,
      _o.TokenID,
      _TokenAddressID,
      _o.TokenAddressTypeID,
      _o.CurrencySubTypeID,
      _o.StackCheck);
  }
};

public class ProductionTokenAddressT
{
  public int TokenID { get; set; }
  public string TokenAddressID { get; set; }
  public GDT.TokenAddressType TokenAddressTypeID { get; set; }
  public GDT.CurrencySubType CurrencySubTypeID { get; set; }
  public bool StackCheck { get; set; }

  public ProductionTokenAddressT() {
    this.TokenID = 0;
    this.TokenAddressID = null;
    this.TokenAddressTypeID = GDT.TokenAddressType.TAT_None;
    this.CurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.StackCheck = false;
  }
}

public struct ProductionTokenAddressTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static ProductionTokenAddressTable GetRootAsProductionTokenAddressTable(ByteBuffer _bb) { return GetRootAsProductionTokenAddressTable(_bb, new ProductionTokenAddressTable()); }
  public static ProductionTokenAddressTable GetRootAsProductionTokenAddressTable(ByteBuffer _bb, ProductionTokenAddressTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ProductionTokenAddressTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.ProductionTokenAddress? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.ProductionTokenAddress?)(new GDT.ProductionTokenAddress()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.ProductionTokenAddressTable> CreateProductionTokenAddressTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    ProductionTokenAddressTable.AddRows(builder, RowsOffset);
    return ProductionTokenAddressTable.EndProductionTokenAddressTable(builder);
  }

  public static void StartProductionTokenAddressTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.ProductionTokenAddress>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.ProductionTokenAddress>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.ProductionTokenAddressTable> EndProductionTokenAddressTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.ProductionTokenAddressTable>(o);
  }
  public ProductionTokenAddressTableT UnPack() {
    var _o = new ProductionTokenAddressTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(ProductionTokenAddressTableT _o) {
    _o.Rows = new List<GDT.ProductionTokenAddressT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.ProductionTokenAddressTable> Pack(FlatBufferBuilder builder, ProductionTokenAddressTableT _o) {
    if (_o == null) return default(Offset<GDT.ProductionTokenAddressTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.ProductionTokenAddress>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.ProductionTokenAddress.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateProductionTokenAddressTable(
      builder,
      _Rows);
  }
};

public class ProductionTokenAddressTableT
{
  public List<GDT.ProductionTokenAddressT> Rows { get; set; }

  public ProductionTokenAddressTableT() {
    this.Rows = null;
  }
}

/// Defined by TreasureLottery.xlsx
public struct TreasureLotteryInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryInfo GetRootAsTreasureLotteryInfo(ByteBuffer _bb) { return GetRootAsTreasureLotteryInfo(_bb, new TreasureLotteryInfo()); }
  public static TreasureLotteryInfo GetRootAsTreasureLotteryInfo(ByteBuffer _bb, TreasureLotteryInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TreasureLotteryID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string GameName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetGameNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetGameNameArray() { return __p.__vector_as_array<byte>(6); }
  public string GameDesc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetGameDescBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetGameDescBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetGameDescArray() { return __p.__vector_as_array<byte>(8); }
  public GDT.CurrencySubType PlayCurrencySubTypeID { get { int o = __p.__offset(10); return o != 0 ? (GDT.CurrencySubType)__p.bb.Get(o + __p.bb_pos) : GDT.CurrencySubType.CST_None; } }
  public int PlayCurrencyTypeValue { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PatternMin { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PatternMax { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PatternGroup { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LotteryItemGroup { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SlotCnt { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SlotBoxResource { get { int o = __p.__offset(24); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSlotBoxResourceBytes() { return __p.__vector_as_span<byte>(24, 1); }
#else
  public ArraySegment<byte>? GetSlotBoxResourceBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public byte[] GetSlotBoxResourceArray() { return __p.__vector_as_array<byte>(24); }
  public int Rake { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepJackpotRate { get { int o = __p.__offset(28); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepNextJackpotRate { get { int o = __p.__offset(30); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int KeepAirdropRate { get { int o = __p.__offset(32); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardTax { get { int o = __p.__offset(34); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardGauge { get { int o = __p.__offset(36); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardGaugeMax { get { int o = __p.__offset(38); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItemID { get { int o = __p.__offset(40); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int RewardItemCnt { get { int o = __p.__offset(42); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MailID { get { int o = __p.__offset(44); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(46); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ObjectID { get { int o = __p.__offset(48); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.TreasureLotteryInfo> CreateTreasureLotteryInfo(FlatBufferBuilder builder,
      int TreasureLotteryID = 0,
      StringOffset GameNameOffset = default(StringOffset),
      StringOffset GameDescOffset = default(StringOffset),
      GDT.CurrencySubType PlayCurrencySubTypeID = GDT.CurrencySubType.CST_None,
      int PlayCurrencyTypeValue = 0,
      int PatternMin = 0,
      int PatternMax = 0,
      int PatternGroup = 0,
      int LotteryItemGroup = 0,
      int SlotCnt = 0,
      StringOffset SlotBoxResourceOffset = default(StringOffset),
      int Rake = 0,
      int KeepJackpotRate = 0,
      int KeepNextJackpotRate = 0,
      int KeepAirdropRate = 0,
      int RewardTax = 0,
      int RewardGauge = 0,
      int RewardGaugeMax = 0,
      int RewardItemID = 0,
      int RewardItemCnt = 0,
      int MailID = 0,
      int MapID = 0,
      int ObjectID = 0) {
    builder.StartTable(23);
    TreasureLotteryInfo.AddObjectID(builder, ObjectID);
    TreasureLotteryInfo.AddMapID(builder, MapID);
    TreasureLotteryInfo.AddMailID(builder, MailID);
    TreasureLotteryInfo.AddRewardItemCnt(builder, RewardItemCnt);
    TreasureLotteryInfo.AddRewardItemID(builder, RewardItemID);
    TreasureLotteryInfo.AddRewardGaugeMax(builder, RewardGaugeMax);
    TreasureLotteryInfo.AddRewardGauge(builder, RewardGauge);
    TreasureLotteryInfo.AddRewardTax(builder, RewardTax);
    TreasureLotteryInfo.AddKeepAirdropRate(builder, KeepAirdropRate);
    TreasureLotteryInfo.AddKeepNextJackpotRate(builder, KeepNextJackpotRate);
    TreasureLotteryInfo.AddKeepJackpotRate(builder, KeepJackpotRate);
    TreasureLotteryInfo.AddRake(builder, Rake);
    TreasureLotteryInfo.AddSlotBoxResource(builder, SlotBoxResourceOffset);
    TreasureLotteryInfo.AddSlotCnt(builder, SlotCnt);
    TreasureLotteryInfo.AddLotteryItemGroup(builder, LotteryItemGroup);
    TreasureLotteryInfo.AddPatternGroup(builder, PatternGroup);
    TreasureLotteryInfo.AddPatternMax(builder, PatternMax);
    TreasureLotteryInfo.AddPatternMin(builder, PatternMin);
    TreasureLotteryInfo.AddPlayCurrencyTypeValue(builder, PlayCurrencyTypeValue);
    TreasureLotteryInfo.AddGameDesc(builder, GameDescOffset);
    TreasureLotteryInfo.AddGameName(builder, GameNameOffset);
    TreasureLotteryInfo.AddTreasureLotteryID(builder, TreasureLotteryID);
    TreasureLotteryInfo.AddPlayCurrencySubTypeID(builder, PlayCurrencySubTypeID);
    return TreasureLotteryInfo.EndTreasureLotteryInfo(builder);
  }

  public static void StartTreasureLotteryInfo(FlatBufferBuilder builder) { builder.StartTable(23); }
  public static void AddTreasureLotteryID(FlatBufferBuilder builder, int TreasureLotteryID) { builder.AddInt(0, TreasureLotteryID, 0); }
  public static void AddGameName(FlatBufferBuilder builder, StringOffset GameNameOffset) { builder.AddOffset(1, GameNameOffset.Value, 0); }
  public static void AddGameDesc(FlatBufferBuilder builder, StringOffset GameDescOffset) { builder.AddOffset(2, GameDescOffset.Value, 0); }
  public static void AddPlayCurrencySubTypeID(FlatBufferBuilder builder, GDT.CurrencySubType PlayCurrencySubTypeID) { builder.AddByte(3, (byte)PlayCurrencySubTypeID, 0); }
  public static void AddPlayCurrencyTypeValue(FlatBufferBuilder builder, int PlayCurrencyTypeValue) { builder.AddInt(4, PlayCurrencyTypeValue, 0); }
  public static void AddPatternMin(FlatBufferBuilder builder, int PatternMin) { builder.AddInt(5, PatternMin, 0); }
  public static void AddPatternMax(FlatBufferBuilder builder, int PatternMax) { builder.AddInt(6, PatternMax, 0); }
  public static void AddPatternGroup(FlatBufferBuilder builder, int PatternGroup) { builder.AddInt(7, PatternGroup, 0); }
  public static void AddLotteryItemGroup(FlatBufferBuilder builder, int LotteryItemGroup) { builder.AddInt(8, LotteryItemGroup, 0); }
  public static void AddSlotCnt(FlatBufferBuilder builder, int SlotCnt) { builder.AddInt(9, SlotCnt, 0); }
  public static void AddSlotBoxResource(FlatBufferBuilder builder, StringOffset SlotBoxResourceOffset) { builder.AddOffset(10, SlotBoxResourceOffset.Value, 0); }
  public static void AddRake(FlatBufferBuilder builder, int Rake) { builder.AddInt(11, Rake, 0); }
  public static void AddKeepJackpotRate(FlatBufferBuilder builder, int KeepJackpotRate) { builder.AddInt(12, KeepJackpotRate, 0); }
  public static void AddKeepNextJackpotRate(FlatBufferBuilder builder, int KeepNextJackpotRate) { builder.AddInt(13, KeepNextJackpotRate, 0); }
  public static void AddKeepAirdropRate(FlatBufferBuilder builder, int KeepAirdropRate) { builder.AddInt(14, KeepAirdropRate, 0); }
  public static void AddRewardTax(FlatBufferBuilder builder, int RewardTax) { builder.AddInt(15, RewardTax, 0); }
  public static void AddRewardGauge(FlatBufferBuilder builder, int RewardGauge) { builder.AddInt(16, RewardGauge, 0); }
  public static void AddRewardGaugeMax(FlatBufferBuilder builder, int RewardGaugeMax) { builder.AddInt(17, RewardGaugeMax, 0); }
  public static void AddRewardItemID(FlatBufferBuilder builder, int RewardItemID) { builder.AddInt(18, RewardItemID, 0); }
  public static void AddRewardItemCnt(FlatBufferBuilder builder, int RewardItemCnt) { builder.AddInt(19, RewardItemCnt, 0); }
  public static void AddMailID(FlatBufferBuilder builder, int MailID) { builder.AddInt(20, MailID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(21, MapID, 0); }
  public static void AddObjectID(FlatBufferBuilder builder, int ObjectID) { builder.AddInt(22, ObjectID, 0); }
  public static Offset<GDT.TreasureLotteryInfo> EndTreasureLotteryInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryInfo>(o);
  }
  public TreasureLotteryInfoT UnPack() {
    var _o = new TreasureLotteryInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryInfoT _o) {
    _o.TreasureLotteryID = this.TreasureLotteryID;
    _o.GameName = this.GameName;
    _o.GameDesc = this.GameDesc;
    _o.PlayCurrencySubTypeID = this.PlayCurrencySubTypeID;
    _o.PlayCurrencyTypeValue = this.PlayCurrencyTypeValue;
    _o.PatternMin = this.PatternMin;
    _o.PatternMax = this.PatternMax;
    _o.PatternGroup = this.PatternGroup;
    _o.LotteryItemGroup = this.LotteryItemGroup;
    _o.SlotCnt = this.SlotCnt;
    _o.SlotBoxResource = this.SlotBoxResource;
    _o.Rake = this.Rake;
    _o.KeepJackpotRate = this.KeepJackpotRate;
    _o.KeepNextJackpotRate = this.KeepNextJackpotRate;
    _o.KeepAirdropRate = this.KeepAirdropRate;
    _o.RewardTax = this.RewardTax;
    _o.RewardGauge = this.RewardGauge;
    _o.RewardGaugeMax = this.RewardGaugeMax;
    _o.RewardItemID = this.RewardItemID;
    _o.RewardItemCnt = this.RewardItemCnt;
    _o.MailID = this.MailID;
    _o.MapID = this.MapID;
    _o.ObjectID = this.ObjectID;
  }
  public static Offset<GDT.TreasureLotteryInfo> Pack(FlatBufferBuilder builder, TreasureLotteryInfoT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryInfo>);
    var _GameName = _o.GameName == null ? default(StringOffset) : builder.CreateString(_o.GameName);
    var _GameDesc = _o.GameDesc == null ? default(StringOffset) : builder.CreateString(_o.GameDesc);
    var _SlotBoxResource = _o.SlotBoxResource == null ? default(StringOffset) : builder.CreateString(_o.SlotBoxResource);
    return CreateTreasureLotteryInfo(
      builder,
      _o.TreasureLotteryID,
      _GameName,
      _GameDesc,
      _o.PlayCurrencySubTypeID,
      _o.PlayCurrencyTypeValue,
      _o.PatternMin,
      _o.PatternMax,
      _o.PatternGroup,
      _o.LotteryItemGroup,
      _o.SlotCnt,
      _SlotBoxResource,
      _o.Rake,
      _o.KeepJackpotRate,
      _o.KeepNextJackpotRate,
      _o.KeepAirdropRate,
      _o.RewardTax,
      _o.RewardGauge,
      _o.RewardGaugeMax,
      _o.RewardItemID,
      _o.RewardItemCnt,
      _o.MailID,
      _o.MapID,
      _o.ObjectID);
  }
};

public class TreasureLotteryInfoT
{
  public int TreasureLotteryID { get; set; }
  public string GameName { get; set; }
  public string GameDesc { get; set; }
  public GDT.CurrencySubType PlayCurrencySubTypeID { get; set; }
  public int PlayCurrencyTypeValue { get; set; }
  public int PatternMin { get; set; }
  public int PatternMax { get; set; }
  public int PatternGroup { get; set; }
  public int LotteryItemGroup { get; set; }
  public int SlotCnt { get; set; }
  public string SlotBoxResource { get; set; }
  public int Rake { get; set; }
  public int KeepJackpotRate { get; set; }
  public int KeepNextJackpotRate { get; set; }
  public int KeepAirdropRate { get; set; }
  public int RewardTax { get; set; }
  public int RewardGauge { get; set; }
  public int RewardGaugeMax { get; set; }
  public int RewardItemID { get; set; }
  public int RewardItemCnt { get; set; }
  public int MailID { get; set; }
  public int MapID { get; set; }
  public int ObjectID { get; set; }

  public TreasureLotteryInfoT() {
    this.TreasureLotteryID = 0;
    this.GameName = null;
    this.GameDesc = null;
    this.PlayCurrencySubTypeID = GDT.CurrencySubType.CST_None;
    this.PlayCurrencyTypeValue = 0;
    this.PatternMin = 0;
    this.PatternMax = 0;
    this.PatternGroup = 0;
    this.LotteryItemGroup = 0;
    this.SlotCnt = 0;
    this.SlotBoxResource = null;
    this.Rake = 0;
    this.KeepJackpotRate = 0;
    this.KeepNextJackpotRate = 0;
    this.KeepAirdropRate = 0;
    this.RewardTax = 0;
    this.RewardGauge = 0;
    this.RewardGaugeMax = 0;
    this.RewardItemID = 0;
    this.RewardItemCnt = 0;
    this.MailID = 0;
    this.MapID = 0;
    this.ObjectID = 0;
  }
}

public struct TreasureLotteryInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryInfoTable GetRootAsTreasureLotteryInfoTable(ByteBuffer _bb) { return GetRootAsTreasureLotteryInfoTable(_bb, new TreasureLotteryInfoTable()); }
  public static TreasureLotteryInfoTable GetRootAsTreasureLotteryInfoTable(ByteBuffer _bb, TreasureLotteryInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TreasureLotteryInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TreasureLotteryInfo?)(new GDT.TreasureLotteryInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TreasureLotteryInfoTable> CreateTreasureLotteryInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TreasureLotteryInfoTable.AddRows(builder, RowsOffset);
    return TreasureLotteryInfoTable.EndTreasureLotteryInfoTable(builder);
  }

  public static void StartTreasureLotteryInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TreasureLotteryInfoTable> EndTreasureLotteryInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryInfoTable>(o);
  }
  public TreasureLotteryInfoTableT UnPack() {
    var _o = new TreasureLotteryInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryInfoTableT _o) {
    _o.Rows = new List<GDT.TreasureLotteryInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TreasureLotteryInfoTable> Pack(FlatBufferBuilder builder, TreasureLotteryInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TreasureLotteryInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TreasureLotteryInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTreasureLotteryInfoTable(
      builder,
      _Rows);
  }
};

public class TreasureLotteryInfoTableT
{
  public List<GDT.TreasureLotteryInfoT> Rows { get; set; }

  public TreasureLotteryInfoTableT() {
    this.Rows = null;
  }
}

/// Defined by TreasureLottery.xlsx
public struct TreasureLotteryPattern : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryPattern GetRootAsTreasureLotteryPattern(ByteBuffer _bb) { return GetRootAsTreasureLotteryPattern(_bb, new TreasureLotteryPattern()); }
  public static TreasureLotteryPattern GetRootAsTreasureLotteryPattern(ByteBuffer _bb, TreasureLotteryPattern obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryPattern __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int PatternID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PatternGroup { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool Slot01 { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot02 { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot03 { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot04 { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot05 { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot06 { get { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot07 { get { int o = __p.__offset(20); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot08 { get { int o = __p.__offset(22); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot09 { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot10 { get { int o = __p.__offset(26); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot11 { get { int o = __p.__offset(28); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot12 { get { int o = __p.__offset(30); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot13 { get { int o = __p.__offset(32); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot14 { get { int o = __p.__offset(34); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot15 { get { int o = __p.__offset(36); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot16 { get { int o = __p.__offset(38); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot17 { get { int o = __p.__offset(40); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot18 { get { int o = __p.__offset(42); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot19 { get { int o = __p.__offset(44); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool Slot20 { get { int o = __p.__offset(46); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string PatternImg { get { int o = __p.__offset(48); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPatternImgBytes() { return __p.__vector_as_span<byte>(48, 1); }
#else
  public ArraySegment<byte>? GetPatternImgBytes() { return __p.__vector_as_arraysegment(48); }
#endif
  public byte[] GetPatternImgArray() { return __p.__vector_as_array<byte>(48); }
  public bool DefaultChoice { get { int o = __p.__offset(50); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int Output01 { get { int o = __p.__offset(52); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Output02 { get { int o = __p.__offset(54); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Output03 { get { int o = __p.__offset(56); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Output04 { get { int o = __p.__offset(58); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Output05 { get { int o = __p.__offset(60); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.TreasureLotteryPattern> CreateTreasureLotteryPattern(FlatBufferBuilder builder,
      int PatternID = 0,
      int PatternGroup = 0,
      bool Slot01 = false,
      bool Slot02 = false,
      bool Slot03 = false,
      bool Slot04 = false,
      bool Slot05 = false,
      bool Slot06 = false,
      bool Slot07 = false,
      bool Slot08 = false,
      bool Slot09 = false,
      bool Slot10 = false,
      bool Slot11 = false,
      bool Slot12 = false,
      bool Slot13 = false,
      bool Slot14 = false,
      bool Slot15 = false,
      bool Slot16 = false,
      bool Slot17 = false,
      bool Slot18 = false,
      bool Slot19 = false,
      bool Slot20 = false,
      StringOffset PatternImgOffset = default(StringOffset),
      bool DefaultChoice = false,
      int Output01 = 0,
      int Output02 = 0,
      int Output03 = 0,
      int Output04 = 0,
      int Output05 = 0) {
    builder.StartTable(29);
    TreasureLotteryPattern.AddOutput05(builder, Output05);
    TreasureLotteryPattern.AddOutput04(builder, Output04);
    TreasureLotteryPattern.AddOutput03(builder, Output03);
    TreasureLotteryPattern.AddOutput02(builder, Output02);
    TreasureLotteryPattern.AddOutput01(builder, Output01);
    TreasureLotteryPattern.AddPatternImg(builder, PatternImgOffset);
    TreasureLotteryPattern.AddPatternGroup(builder, PatternGroup);
    TreasureLotteryPattern.AddPatternID(builder, PatternID);
    TreasureLotteryPattern.AddDefaultChoice(builder, DefaultChoice);
    TreasureLotteryPattern.AddSlot20(builder, Slot20);
    TreasureLotteryPattern.AddSlot19(builder, Slot19);
    TreasureLotteryPattern.AddSlot18(builder, Slot18);
    TreasureLotteryPattern.AddSlot17(builder, Slot17);
    TreasureLotteryPattern.AddSlot16(builder, Slot16);
    TreasureLotteryPattern.AddSlot15(builder, Slot15);
    TreasureLotteryPattern.AddSlot14(builder, Slot14);
    TreasureLotteryPattern.AddSlot13(builder, Slot13);
    TreasureLotteryPattern.AddSlot12(builder, Slot12);
    TreasureLotteryPattern.AddSlot11(builder, Slot11);
    TreasureLotteryPattern.AddSlot10(builder, Slot10);
    TreasureLotteryPattern.AddSlot09(builder, Slot09);
    TreasureLotteryPattern.AddSlot08(builder, Slot08);
    TreasureLotteryPattern.AddSlot07(builder, Slot07);
    TreasureLotteryPattern.AddSlot06(builder, Slot06);
    TreasureLotteryPattern.AddSlot05(builder, Slot05);
    TreasureLotteryPattern.AddSlot04(builder, Slot04);
    TreasureLotteryPattern.AddSlot03(builder, Slot03);
    TreasureLotteryPattern.AddSlot02(builder, Slot02);
    TreasureLotteryPattern.AddSlot01(builder, Slot01);
    return TreasureLotteryPattern.EndTreasureLotteryPattern(builder);
  }

  public static void StartTreasureLotteryPattern(FlatBufferBuilder builder) { builder.StartTable(29); }
  public static void AddPatternID(FlatBufferBuilder builder, int PatternID) { builder.AddInt(0, PatternID, 0); }
  public static void AddPatternGroup(FlatBufferBuilder builder, int PatternGroup) { builder.AddInt(1, PatternGroup, 0); }
  public static void AddSlot01(FlatBufferBuilder builder, bool Slot01) { builder.AddBool(2, Slot01, false); }
  public static void AddSlot02(FlatBufferBuilder builder, bool Slot02) { builder.AddBool(3, Slot02, false); }
  public static void AddSlot03(FlatBufferBuilder builder, bool Slot03) { builder.AddBool(4, Slot03, false); }
  public static void AddSlot04(FlatBufferBuilder builder, bool Slot04) { builder.AddBool(5, Slot04, false); }
  public static void AddSlot05(FlatBufferBuilder builder, bool Slot05) { builder.AddBool(6, Slot05, false); }
  public static void AddSlot06(FlatBufferBuilder builder, bool Slot06) { builder.AddBool(7, Slot06, false); }
  public static void AddSlot07(FlatBufferBuilder builder, bool Slot07) { builder.AddBool(8, Slot07, false); }
  public static void AddSlot08(FlatBufferBuilder builder, bool Slot08) { builder.AddBool(9, Slot08, false); }
  public static void AddSlot09(FlatBufferBuilder builder, bool Slot09) { builder.AddBool(10, Slot09, false); }
  public static void AddSlot10(FlatBufferBuilder builder, bool Slot10) { builder.AddBool(11, Slot10, false); }
  public static void AddSlot11(FlatBufferBuilder builder, bool Slot11) { builder.AddBool(12, Slot11, false); }
  public static void AddSlot12(FlatBufferBuilder builder, bool Slot12) { builder.AddBool(13, Slot12, false); }
  public static void AddSlot13(FlatBufferBuilder builder, bool Slot13) { builder.AddBool(14, Slot13, false); }
  public static void AddSlot14(FlatBufferBuilder builder, bool Slot14) { builder.AddBool(15, Slot14, false); }
  public static void AddSlot15(FlatBufferBuilder builder, bool Slot15) { builder.AddBool(16, Slot15, false); }
  public static void AddSlot16(FlatBufferBuilder builder, bool Slot16) { builder.AddBool(17, Slot16, false); }
  public static void AddSlot17(FlatBufferBuilder builder, bool Slot17) { builder.AddBool(18, Slot17, false); }
  public static void AddSlot18(FlatBufferBuilder builder, bool Slot18) { builder.AddBool(19, Slot18, false); }
  public static void AddSlot19(FlatBufferBuilder builder, bool Slot19) { builder.AddBool(20, Slot19, false); }
  public static void AddSlot20(FlatBufferBuilder builder, bool Slot20) { builder.AddBool(21, Slot20, false); }
  public static void AddPatternImg(FlatBufferBuilder builder, StringOffset PatternImgOffset) { builder.AddOffset(22, PatternImgOffset.Value, 0); }
  public static void AddDefaultChoice(FlatBufferBuilder builder, bool DefaultChoice) { builder.AddBool(23, DefaultChoice, false); }
  public static void AddOutput01(FlatBufferBuilder builder, int Output01) { builder.AddInt(24, Output01, 0); }
  public static void AddOutput02(FlatBufferBuilder builder, int Output02) { builder.AddInt(25, Output02, 0); }
  public static void AddOutput03(FlatBufferBuilder builder, int Output03) { builder.AddInt(26, Output03, 0); }
  public static void AddOutput04(FlatBufferBuilder builder, int Output04) { builder.AddInt(27, Output04, 0); }
  public static void AddOutput05(FlatBufferBuilder builder, int Output05) { builder.AddInt(28, Output05, 0); }
  public static Offset<GDT.TreasureLotteryPattern> EndTreasureLotteryPattern(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryPattern>(o);
  }
  public TreasureLotteryPatternT UnPack() {
    var _o = new TreasureLotteryPatternT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryPatternT _o) {
    _o.PatternID = this.PatternID;
    _o.PatternGroup = this.PatternGroup;
    _o.Slot01 = this.Slot01;
    _o.Slot02 = this.Slot02;
    _o.Slot03 = this.Slot03;
    _o.Slot04 = this.Slot04;
    _o.Slot05 = this.Slot05;
    _o.Slot06 = this.Slot06;
    _o.Slot07 = this.Slot07;
    _o.Slot08 = this.Slot08;
    _o.Slot09 = this.Slot09;
    _o.Slot10 = this.Slot10;
    _o.Slot11 = this.Slot11;
    _o.Slot12 = this.Slot12;
    _o.Slot13 = this.Slot13;
    _o.Slot14 = this.Slot14;
    _o.Slot15 = this.Slot15;
    _o.Slot16 = this.Slot16;
    _o.Slot17 = this.Slot17;
    _o.Slot18 = this.Slot18;
    _o.Slot19 = this.Slot19;
    _o.Slot20 = this.Slot20;
    _o.PatternImg = this.PatternImg;
    _o.DefaultChoice = this.DefaultChoice;
    _o.Output01 = this.Output01;
    _o.Output02 = this.Output02;
    _o.Output03 = this.Output03;
    _o.Output04 = this.Output04;
    _o.Output05 = this.Output05;
  }
  public static Offset<GDT.TreasureLotteryPattern> Pack(FlatBufferBuilder builder, TreasureLotteryPatternT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryPattern>);
    var _PatternImg = _o.PatternImg == null ? default(StringOffset) : builder.CreateString(_o.PatternImg);
    return CreateTreasureLotteryPattern(
      builder,
      _o.PatternID,
      _o.PatternGroup,
      _o.Slot01,
      _o.Slot02,
      _o.Slot03,
      _o.Slot04,
      _o.Slot05,
      _o.Slot06,
      _o.Slot07,
      _o.Slot08,
      _o.Slot09,
      _o.Slot10,
      _o.Slot11,
      _o.Slot12,
      _o.Slot13,
      _o.Slot14,
      _o.Slot15,
      _o.Slot16,
      _o.Slot17,
      _o.Slot18,
      _o.Slot19,
      _o.Slot20,
      _PatternImg,
      _o.DefaultChoice,
      _o.Output01,
      _o.Output02,
      _o.Output03,
      _o.Output04,
      _o.Output05);
  }
};

public class TreasureLotteryPatternT
{
  public int PatternID { get; set; }
  public int PatternGroup { get; set; }
  public bool Slot01 { get; set; }
  public bool Slot02 { get; set; }
  public bool Slot03 { get; set; }
  public bool Slot04 { get; set; }
  public bool Slot05 { get; set; }
  public bool Slot06 { get; set; }
  public bool Slot07 { get; set; }
  public bool Slot08 { get; set; }
  public bool Slot09 { get; set; }
  public bool Slot10 { get; set; }
  public bool Slot11 { get; set; }
  public bool Slot12 { get; set; }
  public bool Slot13 { get; set; }
  public bool Slot14 { get; set; }
  public bool Slot15 { get; set; }
  public bool Slot16 { get; set; }
  public bool Slot17 { get; set; }
  public bool Slot18 { get; set; }
  public bool Slot19 { get; set; }
  public bool Slot20 { get; set; }
  public string PatternImg { get; set; }
  public bool DefaultChoice { get; set; }
  public int Output01 { get; set; }
  public int Output02 { get; set; }
  public int Output03 { get; set; }
  public int Output04 { get; set; }
  public int Output05 { get; set; }

  public TreasureLotteryPatternT() {
    this.PatternID = 0;
    this.PatternGroup = 0;
    this.Slot01 = false;
    this.Slot02 = false;
    this.Slot03 = false;
    this.Slot04 = false;
    this.Slot05 = false;
    this.Slot06 = false;
    this.Slot07 = false;
    this.Slot08 = false;
    this.Slot09 = false;
    this.Slot10 = false;
    this.Slot11 = false;
    this.Slot12 = false;
    this.Slot13 = false;
    this.Slot14 = false;
    this.Slot15 = false;
    this.Slot16 = false;
    this.Slot17 = false;
    this.Slot18 = false;
    this.Slot19 = false;
    this.Slot20 = false;
    this.PatternImg = null;
    this.DefaultChoice = false;
    this.Output01 = 0;
    this.Output02 = 0;
    this.Output03 = 0;
    this.Output04 = 0;
    this.Output05 = 0;
  }
}

public struct TreasureLotteryPatternTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryPatternTable GetRootAsTreasureLotteryPatternTable(ByteBuffer _bb) { return GetRootAsTreasureLotteryPatternTable(_bb, new TreasureLotteryPatternTable()); }
  public static TreasureLotteryPatternTable GetRootAsTreasureLotteryPatternTable(ByteBuffer _bb, TreasureLotteryPatternTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryPatternTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TreasureLotteryPattern? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TreasureLotteryPattern?)(new GDT.TreasureLotteryPattern()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TreasureLotteryPatternTable> CreateTreasureLotteryPatternTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TreasureLotteryPatternTable.AddRows(builder, RowsOffset);
    return TreasureLotteryPatternTable.EndTreasureLotteryPatternTable(builder);
  }

  public static void StartTreasureLotteryPatternTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryPattern>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryPattern>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TreasureLotteryPatternTable> EndTreasureLotteryPatternTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryPatternTable>(o);
  }
  public TreasureLotteryPatternTableT UnPack() {
    var _o = new TreasureLotteryPatternTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryPatternTableT _o) {
    _o.Rows = new List<GDT.TreasureLotteryPatternT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TreasureLotteryPatternTable> Pack(FlatBufferBuilder builder, TreasureLotteryPatternTableT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryPatternTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TreasureLotteryPattern>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TreasureLotteryPattern.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTreasureLotteryPatternTable(
      builder,
      _Rows);
  }
};

public class TreasureLotteryPatternTableT
{
  public List<GDT.TreasureLotteryPatternT> Rows { get; set; }

  public TreasureLotteryPatternTableT() {
    this.Rows = null;
  }
}

/// Defined by TreasureLottery.xlsx
public struct TreasureLotteryItem : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryItem GetRootAsTreasureLotteryItem(ByteBuffer _bb) { return GetRootAsTreasureLotteryItem(_bb, new TreasureLotteryItem()); }
  public static TreasureLotteryItem GetRootAsTreasureLotteryItem(ByteBuffer _bb, TreasureLotteryItem obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryItem __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SlotID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int LotteryItemGroup { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.SlotType SlotTypeID { get { int o = __p.__offset(8); return o != 0 ? (GDT.SlotType)__p.bb.Get(o + __p.bb_pos) : GDT.SlotType.ST_None; } }
  public float AddMultiplier { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public string SlotResultResouce { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSlotResultResouceBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetSlotResultResouceBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetSlotResultResouceArray() { return __p.__vector_as_array<byte>(12); }
  public string EffectID { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEffectIDBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetEffectIDBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetEffectIDArray() { return __p.__vector_as_array<byte>(14); }
  public int SoundID { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string SlotIcon { get { int o = __p.__offset(18); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSlotIconBytes() { return __p.__vector_as_span<byte>(18, 1); }
#else
  public ArraySegment<byte>? GetSlotIconBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public byte[] GetSlotIconArray() { return __p.__vector_as_array<byte>(18); }
  public int SlotMaxCnt { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SlotRate { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.TreasureLotteryItem> CreateTreasureLotteryItem(FlatBufferBuilder builder,
      int SlotID = 0,
      int LotteryItemGroup = 0,
      GDT.SlotType SlotTypeID = GDT.SlotType.ST_None,
      float AddMultiplier = 0.0f,
      StringOffset SlotResultResouceOffset = default(StringOffset),
      StringOffset EffectIDOffset = default(StringOffset),
      int SoundID = 0,
      StringOffset SlotIconOffset = default(StringOffset),
      int SlotMaxCnt = 0,
      int SlotRate = 0) {
    builder.StartTable(10);
    TreasureLotteryItem.AddSlotRate(builder, SlotRate);
    TreasureLotteryItem.AddSlotMaxCnt(builder, SlotMaxCnt);
    TreasureLotteryItem.AddSlotIcon(builder, SlotIconOffset);
    TreasureLotteryItem.AddSoundID(builder, SoundID);
    TreasureLotteryItem.AddEffectID(builder, EffectIDOffset);
    TreasureLotteryItem.AddSlotResultResouce(builder, SlotResultResouceOffset);
    TreasureLotteryItem.AddAddMultiplier(builder, AddMultiplier);
    TreasureLotteryItem.AddLotteryItemGroup(builder, LotteryItemGroup);
    TreasureLotteryItem.AddSlotID(builder, SlotID);
    TreasureLotteryItem.AddSlotTypeID(builder, SlotTypeID);
    return TreasureLotteryItem.EndTreasureLotteryItem(builder);
  }

  public static void StartTreasureLotteryItem(FlatBufferBuilder builder) { builder.StartTable(10); }
  public static void AddSlotID(FlatBufferBuilder builder, int SlotID) { builder.AddInt(0, SlotID, 0); }
  public static void AddLotteryItemGroup(FlatBufferBuilder builder, int LotteryItemGroup) { builder.AddInt(1, LotteryItemGroup, 0); }
  public static void AddSlotTypeID(FlatBufferBuilder builder, GDT.SlotType SlotTypeID) { builder.AddByte(2, (byte)SlotTypeID, 0); }
  public static void AddAddMultiplier(FlatBufferBuilder builder, float AddMultiplier) { builder.AddFloat(3, AddMultiplier, 0.0f); }
  public static void AddSlotResultResouce(FlatBufferBuilder builder, StringOffset SlotResultResouceOffset) { builder.AddOffset(4, SlotResultResouceOffset.Value, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, StringOffset EffectIDOffset) { builder.AddOffset(5, EffectIDOffset.Value, 0); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(6, SoundID, 0); }
  public static void AddSlotIcon(FlatBufferBuilder builder, StringOffset SlotIconOffset) { builder.AddOffset(7, SlotIconOffset.Value, 0); }
  public static void AddSlotMaxCnt(FlatBufferBuilder builder, int SlotMaxCnt) { builder.AddInt(8, SlotMaxCnt, 0); }
  public static void AddSlotRate(FlatBufferBuilder builder, int SlotRate) { builder.AddInt(9, SlotRate, 0); }
  public static Offset<GDT.TreasureLotteryItem> EndTreasureLotteryItem(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryItem>(o);
  }
  public TreasureLotteryItemT UnPack() {
    var _o = new TreasureLotteryItemT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryItemT _o) {
    _o.SlotID = this.SlotID;
    _o.LotteryItemGroup = this.LotteryItemGroup;
    _o.SlotTypeID = this.SlotTypeID;
    _o.AddMultiplier = this.AddMultiplier;
    _o.SlotResultResouce = this.SlotResultResouce;
    _o.EffectID = this.EffectID;
    _o.SoundID = this.SoundID;
    _o.SlotIcon = this.SlotIcon;
    _o.SlotMaxCnt = this.SlotMaxCnt;
    _o.SlotRate = this.SlotRate;
  }
  public static Offset<GDT.TreasureLotteryItem> Pack(FlatBufferBuilder builder, TreasureLotteryItemT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryItem>);
    var _SlotResultResouce = _o.SlotResultResouce == null ? default(StringOffset) : builder.CreateString(_o.SlotResultResouce);
    var _EffectID = _o.EffectID == null ? default(StringOffset) : builder.CreateString(_o.EffectID);
    var _SlotIcon = _o.SlotIcon == null ? default(StringOffset) : builder.CreateString(_o.SlotIcon);
    return CreateTreasureLotteryItem(
      builder,
      _o.SlotID,
      _o.LotteryItemGroup,
      _o.SlotTypeID,
      _o.AddMultiplier,
      _SlotResultResouce,
      _EffectID,
      _o.SoundID,
      _SlotIcon,
      _o.SlotMaxCnt,
      _o.SlotRate);
  }
};

public class TreasureLotteryItemT
{
  public int SlotID { get; set; }
  public int LotteryItemGroup { get; set; }
  public GDT.SlotType SlotTypeID { get; set; }
  public float AddMultiplier { get; set; }
  public string SlotResultResouce { get; set; }
  public string EffectID { get; set; }
  public int SoundID { get; set; }
  public string SlotIcon { get; set; }
  public int SlotMaxCnt { get; set; }
  public int SlotRate { get; set; }

  public TreasureLotteryItemT() {
    this.SlotID = 0;
    this.LotteryItemGroup = 0;
    this.SlotTypeID = GDT.SlotType.ST_None;
    this.AddMultiplier = 0.0f;
    this.SlotResultResouce = null;
    this.EffectID = null;
    this.SoundID = 0;
    this.SlotIcon = null;
    this.SlotMaxCnt = 0;
    this.SlotRate = 0;
  }
}

public struct TreasureLotteryItemTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryItemTable GetRootAsTreasureLotteryItemTable(ByteBuffer _bb) { return GetRootAsTreasureLotteryItemTable(_bb, new TreasureLotteryItemTable()); }
  public static TreasureLotteryItemTable GetRootAsTreasureLotteryItemTable(ByteBuffer _bb, TreasureLotteryItemTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryItemTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TreasureLotteryItem? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TreasureLotteryItem?)(new GDT.TreasureLotteryItem()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TreasureLotteryItemTable> CreateTreasureLotteryItemTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TreasureLotteryItemTable.AddRows(builder, RowsOffset);
    return TreasureLotteryItemTable.EndTreasureLotteryItemTable(builder);
  }

  public static void StartTreasureLotteryItemTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryItem>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryItem>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TreasureLotteryItemTable> EndTreasureLotteryItemTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryItemTable>(o);
  }
  public TreasureLotteryItemTableT UnPack() {
    var _o = new TreasureLotteryItemTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryItemTableT _o) {
    _o.Rows = new List<GDT.TreasureLotteryItemT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TreasureLotteryItemTable> Pack(FlatBufferBuilder builder, TreasureLotteryItemTableT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryItemTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TreasureLotteryItem>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TreasureLotteryItem.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTreasureLotteryItemTable(
      builder,
      _Rows);
  }
};

public class TreasureLotteryItemTableT
{
  public List<GDT.TreasureLotteryItemT> Rows { get; set; }

  public TreasureLotteryItemTableT() {
    this.Rows = null;
  }
}

/// Defined by TreasureLottery.xlsx
public struct TreasureLotteryReward : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryReward GetRootAsTreasureLotteryReward(ByteBuffer _bb) { return GetRootAsTreasureLotteryReward(_bb, new TreasureLotteryReward()); }
  public static TreasureLotteryReward GetRootAsTreasureLotteryReward(ByteBuffer _bb, TreasureLotteryReward obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryReward __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TreasureLotteryID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreasureLotterySlotID01 { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreasureLotterySlotID02 { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreasureLotterySlotID03 { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreasureLotterySlotID04 { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreasureLotterySlotID05 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool ApplyMulti { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int RewardDataID { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EffectID { get { int o = __p.__offset(20); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int SoundID { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool FirstPrizeWinner { get { int o = __p.__offset(24); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public int EventInfoID { get { int o = __p.__offset(26); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GDT.TreasureLotteryReward> CreateTreasureLotteryReward(FlatBufferBuilder builder,
      int TreasureLotteryID = 0,
      int TreasureLotterySlotID01 = 0,
      int TreasureLotterySlotID02 = 0,
      int TreasureLotterySlotID03 = 0,
      int TreasureLotterySlotID04 = 0,
      int TreasureLotterySlotID05 = 0,
      bool ApplyMulti = false,
      int RewardDataID = 0,
      int EffectID = 0,
      int SoundID = 0,
      bool FirstPrizeWinner = false,
      int EventInfoID = 0) {
    builder.StartTable(12);
    TreasureLotteryReward.AddEventInfoID(builder, EventInfoID);
    TreasureLotteryReward.AddSoundID(builder, SoundID);
    TreasureLotteryReward.AddEffectID(builder, EffectID);
    TreasureLotteryReward.AddRewardDataID(builder, RewardDataID);
    TreasureLotteryReward.AddTreasureLotterySlotID05(builder, TreasureLotterySlotID05);
    TreasureLotteryReward.AddTreasureLotterySlotID04(builder, TreasureLotterySlotID04);
    TreasureLotteryReward.AddTreasureLotterySlotID03(builder, TreasureLotterySlotID03);
    TreasureLotteryReward.AddTreasureLotterySlotID02(builder, TreasureLotterySlotID02);
    TreasureLotteryReward.AddTreasureLotterySlotID01(builder, TreasureLotterySlotID01);
    TreasureLotteryReward.AddTreasureLotteryID(builder, TreasureLotteryID);
    TreasureLotteryReward.AddFirstPrizeWinner(builder, FirstPrizeWinner);
    TreasureLotteryReward.AddApplyMulti(builder, ApplyMulti);
    return TreasureLotteryReward.EndTreasureLotteryReward(builder);
  }

  public static void StartTreasureLotteryReward(FlatBufferBuilder builder) { builder.StartTable(12); }
  public static void AddTreasureLotteryID(FlatBufferBuilder builder, int TreasureLotteryID) { builder.AddInt(0, TreasureLotteryID, 0); }
  public static void AddTreasureLotterySlotID01(FlatBufferBuilder builder, int TreasureLotterySlotID01) { builder.AddInt(1, TreasureLotterySlotID01, 0); }
  public static void AddTreasureLotterySlotID02(FlatBufferBuilder builder, int TreasureLotterySlotID02) { builder.AddInt(2, TreasureLotterySlotID02, 0); }
  public static void AddTreasureLotterySlotID03(FlatBufferBuilder builder, int TreasureLotterySlotID03) { builder.AddInt(3, TreasureLotterySlotID03, 0); }
  public static void AddTreasureLotterySlotID04(FlatBufferBuilder builder, int TreasureLotterySlotID04) { builder.AddInt(4, TreasureLotterySlotID04, 0); }
  public static void AddTreasureLotterySlotID05(FlatBufferBuilder builder, int TreasureLotterySlotID05) { builder.AddInt(5, TreasureLotterySlotID05, 0); }
  public static void AddApplyMulti(FlatBufferBuilder builder, bool ApplyMulti) { builder.AddBool(6, ApplyMulti, false); }
  public static void AddRewardDataID(FlatBufferBuilder builder, int RewardDataID) { builder.AddInt(7, RewardDataID, 0); }
  public static void AddEffectID(FlatBufferBuilder builder, int EffectID) { builder.AddInt(8, EffectID, 0); }
  public static void AddSoundID(FlatBufferBuilder builder, int SoundID) { builder.AddInt(9, SoundID, 0); }
  public static void AddFirstPrizeWinner(FlatBufferBuilder builder, bool FirstPrizeWinner) { builder.AddBool(10, FirstPrizeWinner, false); }
  public static void AddEventInfoID(FlatBufferBuilder builder, int EventInfoID) { builder.AddInt(11, EventInfoID, 0); }
  public static Offset<GDT.TreasureLotteryReward> EndTreasureLotteryReward(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryReward>(o);
  }
  public TreasureLotteryRewardT UnPack() {
    var _o = new TreasureLotteryRewardT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryRewardT _o) {
    _o.TreasureLotteryID = this.TreasureLotteryID;
    _o.TreasureLotterySlotID01 = this.TreasureLotterySlotID01;
    _o.TreasureLotterySlotID02 = this.TreasureLotterySlotID02;
    _o.TreasureLotterySlotID03 = this.TreasureLotterySlotID03;
    _o.TreasureLotterySlotID04 = this.TreasureLotterySlotID04;
    _o.TreasureLotterySlotID05 = this.TreasureLotterySlotID05;
    _o.ApplyMulti = this.ApplyMulti;
    _o.RewardDataID = this.RewardDataID;
    _o.EffectID = this.EffectID;
    _o.SoundID = this.SoundID;
    _o.FirstPrizeWinner = this.FirstPrizeWinner;
    _o.EventInfoID = this.EventInfoID;
  }
  public static Offset<GDT.TreasureLotteryReward> Pack(FlatBufferBuilder builder, TreasureLotteryRewardT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryReward>);
    return CreateTreasureLotteryReward(
      builder,
      _o.TreasureLotteryID,
      _o.TreasureLotterySlotID01,
      _o.TreasureLotterySlotID02,
      _o.TreasureLotterySlotID03,
      _o.TreasureLotterySlotID04,
      _o.TreasureLotterySlotID05,
      _o.ApplyMulti,
      _o.RewardDataID,
      _o.EffectID,
      _o.SoundID,
      _o.FirstPrizeWinner,
      _o.EventInfoID);
  }
};

public class TreasureLotteryRewardT
{
  public int TreasureLotteryID { get; set; }
  public int TreasureLotterySlotID01 { get; set; }
  public int TreasureLotterySlotID02 { get; set; }
  public int TreasureLotterySlotID03 { get; set; }
  public int TreasureLotterySlotID04 { get; set; }
  public int TreasureLotterySlotID05 { get; set; }
  public bool ApplyMulti { get; set; }
  public int RewardDataID { get; set; }
  public int EffectID { get; set; }
  public int SoundID { get; set; }
  public bool FirstPrizeWinner { get; set; }
  public int EventInfoID { get; set; }

  public TreasureLotteryRewardT() {
    this.TreasureLotteryID = 0;
    this.TreasureLotterySlotID01 = 0;
    this.TreasureLotterySlotID02 = 0;
    this.TreasureLotterySlotID03 = 0;
    this.TreasureLotterySlotID04 = 0;
    this.TreasureLotterySlotID05 = 0;
    this.ApplyMulti = false;
    this.RewardDataID = 0;
    this.EffectID = 0;
    this.SoundID = 0;
    this.FirstPrizeWinner = false;
    this.EventInfoID = 0;
  }
}

public struct TreasureLotteryRewardTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryRewardTable GetRootAsTreasureLotteryRewardTable(ByteBuffer _bb) { return GetRootAsTreasureLotteryRewardTable(_bb, new TreasureLotteryRewardTable()); }
  public static TreasureLotteryRewardTable GetRootAsTreasureLotteryRewardTable(ByteBuffer _bb, TreasureLotteryRewardTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryRewardTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TreasureLotteryReward? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TreasureLotteryReward?)(new GDT.TreasureLotteryReward()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TreasureLotteryRewardTable> CreateTreasureLotteryRewardTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TreasureLotteryRewardTable.AddRows(builder, RowsOffset);
    return TreasureLotteryRewardTable.EndTreasureLotteryRewardTable(builder);
  }

  public static void StartTreasureLotteryRewardTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryReward>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryReward>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TreasureLotteryRewardTable> EndTreasureLotteryRewardTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryRewardTable>(o);
  }
  public TreasureLotteryRewardTableT UnPack() {
    var _o = new TreasureLotteryRewardTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryRewardTableT _o) {
    _o.Rows = new List<GDT.TreasureLotteryRewardT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TreasureLotteryRewardTable> Pack(FlatBufferBuilder builder, TreasureLotteryRewardTableT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryRewardTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TreasureLotteryReward>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TreasureLotteryReward.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTreasureLotteryRewardTable(
      builder,
      _Rows);
  }
};

public class TreasureLotteryRewardTableT
{
  public List<GDT.TreasureLotteryRewardT> Rows { get; set; }

  public TreasureLotteryRewardTableT() {
    this.Rows = null;
  }
}

/// Defined by TreasureLottery.xlsx
public struct TreasureLotteryMultiplier : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryMultiplier GetRootAsTreasureLotteryMultiplier(ByteBuffer _bb) { return GetRootAsTreasureLotteryMultiplier(_bb, new TreasureLotteryMultiplier()); }
  public static TreasureLotteryMultiplier GetRootAsTreasureLotteryMultiplier(ByteBuffer _bb, TreasureLotteryMultiplier obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryMultiplier __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TreasureLotteryID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int PrizeCount { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Multiplier { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GDT.TreasureLotteryMultiplier> CreateTreasureLotteryMultiplier(FlatBufferBuilder builder,
      int TreasureLotteryID = 0,
      int PrizeCount = 0,
      float Multiplier = 0.0f) {
    builder.StartTable(3);
    TreasureLotteryMultiplier.AddMultiplier(builder, Multiplier);
    TreasureLotteryMultiplier.AddPrizeCount(builder, PrizeCount);
    TreasureLotteryMultiplier.AddTreasureLotteryID(builder, TreasureLotteryID);
    return TreasureLotteryMultiplier.EndTreasureLotteryMultiplier(builder);
  }

  public static void StartTreasureLotteryMultiplier(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTreasureLotteryID(FlatBufferBuilder builder, int TreasureLotteryID) { builder.AddInt(0, TreasureLotteryID, 0); }
  public static void AddPrizeCount(FlatBufferBuilder builder, int PrizeCount) { builder.AddInt(1, PrizeCount, 0); }
  public static void AddMultiplier(FlatBufferBuilder builder, float Multiplier) { builder.AddFloat(2, Multiplier, 0.0f); }
  public static Offset<GDT.TreasureLotteryMultiplier> EndTreasureLotteryMultiplier(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryMultiplier>(o);
  }
  public TreasureLotteryMultiplierT UnPack() {
    var _o = new TreasureLotteryMultiplierT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryMultiplierT _o) {
    _o.TreasureLotteryID = this.TreasureLotteryID;
    _o.PrizeCount = this.PrizeCount;
    _o.Multiplier = this.Multiplier;
  }
  public static Offset<GDT.TreasureLotteryMultiplier> Pack(FlatBufferBuilder builder, TreasureLotteryMultiplierT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryMultiplier>);
    return CreateTreasureLotteryMultiplier(
      builder,
      _o.TreasureLotteryID,
      _o.PrizeCount,
      _o.Multiplier);
  }
};

public class TreasureLotteryMultiplierT
{
  public int TreasureLotteryID { get; set; }
  public int PrizeCount { get; set; }
  public float Multiplier { get; set; }

  public TreasureLotteryMultiplierT() {
    this.TreasureLotteryID = 0;
    this.PrizeCount = 0;
    this.Multiplier = 0.0f;
  }
}

public struct TreasureLotteryMultiplierTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotteryMultiplierTable GetRootAsTreasureLotteryMultiplierTable(ByteBuffer _bb) { return GetRootAsTreasureLotteryMultiplierTable(_bb, new TreasureLotteryMultiplierTable()); }
  public static TreasureLotteryMultiplierTable GetRootAsTreasureLotteryMultiplierTable(ByteBuffer _bb, TreasureLotteryMultiplierTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotteryMultiplierTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TreasureLotteryMultiplier? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TreasureLotteryMultiplier?)(new GDT.TreasureLotteryMultiplier()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TreasureLotteryMultiplierTable> CreateTreasureLotteryMultiplierTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TreasureLotteryMultiplierTable.AddRows(builder, RowsOffset);
    return TreasureLotteryMultiplierTable.EndTreasureLotteryMultiplierTable(builder);
  }

  public static void StartTreasureLotteryMultiplierTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryMultiplier>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TreasureLotteryMultiplier>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TreasureLotteryMultiplierTable> EndTreasureLotteryMultiplierTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotteryMultiplierTable>(o);
  }
  public TreasureLotteryMultiplierTableT UnPack() {
    var _o = new TreasureLotteryMultiplierTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotteryMultiplierTableT _o) {
    _o.Rows = new List<GDT.TreasureLotteryMultiplierT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TreasureLotteryMultiplierTable> Pack(FlatBufferBuilder builder, TreasureLotteryMultiplierTableT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotteryMultiplierTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TreasureLotteryMultiplier>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TreasureLotteryMultiplier.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTreasureLotteryMultiplierTable(
      builder,
      _Rows);
  }
};

public class TreasureLotteryMultiplierTableT
{
  public List<GDT.TreasureLotteryMultiplierT> Rows { get; set; }

  public TreasureLotteryMultiplierTableT() {
    this.Rows = null;
  }
}

/// Defined by TreasureLottery.xlsx
public struct TreasureLotterySeason : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotterySeason GetRootAsTreasureLotterySeason(ByteBuffer _bb) { return GetRootAsTreasureLotterySeason(_bb, new TreasureLotterySeason()); }
  public static TreasureLotterySeason GetRootAsTreasureLotterySeason(ByteBuffer _bb, TreasureLotterySeason obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotterySeason __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int TreasureLotterySeasonID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int TreasureLotteryInfoID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.datetime? EventStartTime { get { int o = __p.__offset(8); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public GDT.datetime? EventEndTime { get { int o = __p.__offset(10); return o != 0 ? (GDT.datetime?)(new GDT.datetime()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTreasureLotterySeason(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddTreasureLotterySeasonID(FlatBufferBuilder builder, int TreasureLotterySeasonID) { builder.AddInt(0, TreasureLotterySeasonID, 0); }
  public static void AddTreasureLotteryInfoID(FlatBufferBuilder builder, int TreasureLotteryInfoID) { builder.AddInt(1, TreasureLotteryInfoID, 0); }
  public static void AddEventStartTime(FlatBufferBuilder builder, Offset<GDT.datetime> EventStartTimeOffset) { builder.AddStruct(2, EventStartTimeOffset.Value, 0); }
  public static void AddEventEndTime(FlatBufferBuilder builder, Offset<GDT.datetime> EventEndTimeOffset) { builder.AddStruct(3, EventEndTimeOffset.Value, 0); }
  public static Offset<GDT.TreasureLotterySeason> EndTreasureLotterySeason(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotterySeason>(o);
  }
  public TreasureLotterySeasonT UnPack() {
    var _o = new TreasureLotterySeasonT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotterySeasonT _o) {
    _o.TreasureLotterySeasonID = this.TreasureLotterySeasonID;
    _o.TreasureLotteryInfoID = this.TreasureLotteryInfoID;
    _o.EventStartTime = this.EventStartTime.HasValue ? this.EventStartTime.Value.UnPack() : null;
    _o.EventEndTime = this.EventEndTime.HasValue ? this.EventEndTime.Value.UnPack() : null;
  }
  public static Offset<GDT.TreasureLotterySeason> Pack(FlatBufferBuilder builder, TreasureLotterySeasonT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotterySeason>);
    StartTreasureLotterySeason(builder);
    AddTreasureLotterySeasonID(builder, _o.TreasureLotterySeasonID);
    AddTreasureLotteryInfoID(builder, _o.TreasureLotteryInfoID);
    AddEventStartTime(builder, GDT.datetime.Pack(builder, _o.EventStartTime));
    AddEventEndTime(builder, GDT.datetime.Pack(builder, _o.EventEndTime));
    return EndTreasureLotterySeason(builder);
  }
};

public class TreasureLotterySeasonT
{
  public int TreasureLotterySeasonID { get; set; }
  public int TreasureLotteryInfoID { get; set; }
  public GDT.datetimeT EventStartTime { get; set; }
  public GDT.datetimeT EventEndTime { get; set; }

  public TreasureLotterySeasonT() {
    this.TreasureLotterySeasonID = 0;
    this.TreasureLotteryInfoID = 0;
    this.EventStartTime = new GDT.datetimeT();
    this.EventEndTime = new GDT.datetimeT();
  }
}

public struct TreasureLotterySeasonTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static TreasureLotterySeasonTable GetRootAsTreasureLotterySeasonTable(ByteBuffer _bb) { return GetRootAsTreasureLotterySeasonTable(_bb, new TreasureLotterySeasonTable()); }
  public static TreasureLotterySeasonTable GetRootAsTreasureLotterySeasonTable(ByteBuffer _bb, TreasureLotterySeasonTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TreasureLotterySeasonTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.TreasureLotterySeason? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.TreasureLotterySeason?)(new GDT.TreasureLotterySeason()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.TreasureLotterySeasonTable> CreateTreasureLotterySeasonTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    TreasureLotterySeasonTable.AddRows(builder, RowsOffset);
    return TreasureLotterySeasonTable.EndTreasureLotterySeasonTable(builder);
  }

  public static void StartTreasureLotterySeasonTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.TreasureLotterySeason>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.TreasureLotterySeason>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.TreasureLotterySeasonTable> EndTreasureLotterySeasonTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.TreasureLotterySeasonTable>(o);
  }
  public TreasureLotterySeasonTableT UnPack() {
    var _o = new TreasureLotterySeasonTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(TreasureLotterySeasonTableT _o) {
    _o.Rows = new List<GDT.TreasureLotterySeasonT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.TreasureLotterySeasonTable> Pack(FlatBufferBuilder builder, TreasureLotterySeasonTableT _o) {
    if (_o == null) return default(Offset<GDT.TreasureLotterySeasonTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.TreasureLotterySeason>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.TreasureLotterySeason.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateTreasureLotterySeasonTable(
      builder,
      _Rows);
  }
};

public class TreasureLotterySeasonTableT
{
  public List<GDT.TreasureLotterySeasonT> Rows { get; set; }

  public TreasureLotterySeasonTableT() {
    this.Rows = null;
  }
}

/// Defined by WorldPosition.xlsx
public struct WorldPositionInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static WorldPositionInfo GetRootAsWorldPositionInfo(ByteBuffer _bb) { return GetRootAsWorldPositionInfo(_bb, new WorldPositionInfo()); }
  public static WorldPositionInfo GetRootAsWorldPositionInfo(ByteBuffer _bb, WorldPositionInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorldPositionInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ID { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MapID { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public GDT.vector3? Position { get { int o = __p.__offset(8); return o != 0 ? (GDT.vector3?)(new GDT.vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float RotationY { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartWorldPositionInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddID(FlatBufferBuilder builder, int ID) { builder.AddInt(0, ID, 0); }
  public static void AddMapID(FlatBufferBuilder builder, int MapID) { builder.AddInt(1, MapID, 0); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<GDT.vector3> PositionOffset) { builder.AddStruct(2, PositionOffset.Value, 0); }
  public static void AddRotationY(FlatBufferBuilder builder, float RotationY) { builder.AddFloat(3, RotationY, 0.0f); }
  public static Offset<GDT.WorldPositionInfo> EndWorldPositionInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.WorldPositionInfo>(o);
  }
  public WorldPositionInfoT UnPack() {
    var _o = new WorldPositionInfoT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WorldPositionInfoT _o) {
    _o.ID = this.ID;
    _o.MapID = this.MapID;
    _o.Position = this.Position.HasValue ? this.Position.Value.UnPack() : null;
    _o.RotationY = this.RotationY;
  }
  public static Offset<GDT.WorldPositionInfo> Pack(FlatBufferBuilder builder, WorldPositionInfoT _o) {
    if (_o == null) return default(Offset<GDT.WorldPositionInfo>);
    StartWorldPositionInfo(builder);
    AddID(builder, _o.ID);
    AddMapID(builder, _o.MapID);
    AddPosition(builder, GDT.vector3.Pack(builder, _o.Position));
    AddRotationY(builder, _o.RotationY);
    return EndWorldPositionInfo(builder);
  }
};

public class WorldPositionInfoT
{
  public int ID { get; set; }
  public int MapID { get; set; }
  public GDT.vector3T Position { get; set; }
  public float RotationY { get; set; }

  public WorldPositionInfoT() {
    this.ID = 0;
    this.MapID = 0;
    this.Position = new GDT.vector3T();
    this.RotationY = 0.0f;
  }
}

public struct WorldPositionInfoTable : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static WorldPositionInfoTable GetRootAsWorldPositionInfoTable(ByteBuffer _bb) { return GetRootAsWorldPositionInfoTable(_bb, new WorldPositionInfoTable()); }
  public static WorldPositionInfoTable GetRootAsWorldPositionInfoTable(ByteBuffer _bb, WorldPositionInfoTable obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorldPositionInfoTable __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GDT.WorldPositionInfo? Rows(int j) { int o = __p.__offset(4); return o != 0 ? (GDT.WorldPositionInfo?)(new GDT.WorldPositionInfo()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int RowsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GDT.WorldPositionInfoTable> CreateWorldPositionInfoTable(FlatBufferBuilder builder,
      VectorOffset RowsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    WorldPositionInfoTable.AddRows(builder, RowsOffset);
    return WorldPositionInfoTable.EndWorldPositionInfoTable(builder);
  }

  public static void StartWorldPositionInfoTable(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddRows(FlatBufferBuilder builder, VectorOffset RowsOffset) { builder.AddOffset(0, RowsOffset.Value, 0); }
  public static VectorOffset CreateRowsVector(FlatBufferBuilder builder, Offset<GDT.WorldPositionInfo>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateRowsVectorBlock(FlatBufferBuilder builder, Offset<GDT.WorldPositionInfo>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartRowsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<GDT.WorldPositionInfoTable> EndWorldPositionInfoTable(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GDT.WorldPositionInfoTable>(o);
  }
  public WorldPositionInfoTableT UnPack() {
    var _o = new WorldPositionInfoTableT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(WorldPositionInfoTableT _o) {
    _o.Rows = new List<GDT.WorldPositionInfoT>();
    for (var _j = 0; _j < this.RowsLength; ++_j) {_o.Rows.Add(this.Rows(_j).HasValue ? this.Rows(_j).Value.UnPack() : null);}
  }
  public static Offset<GDT.WorldPositionInfoTable> Pack(FlatBufferBuilder builder, WorldPositionInfoTableT _o) {
    if (_o == null) return default(Offset<GDT.WorldPositionInfoTable>);
    var _Rows = default(VectorOffset);
    if (_o.Rows != null) {
      var __Rows = new Offset<GDT.WorldPositionInfo>[_o.Rows.Count];
      for (var _j = 0; _j < __Rows.Length; ++_j) { __Rows[_j] = GDT.WorldPositionInfo.Pack(builder, _o.Rows[_j]); }
      _Rows = CreateRowsVector(builder, __Rows);
    }
    return CreateWorldPositionInfoTable(
      builder,
      _Rows);
  }
};

public class WorldPositionInfoTableT
{
  public List<GDT.WorldPositionInfoT> Rows { get; set; }

  public WorldPositionInfoTableT() {
    this.Rows = null;
  }
}


}
